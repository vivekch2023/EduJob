[
  {
    "id": "c1",
    "name": "HTML",
    "tests": [
      {
        "id": "t1",
        "name": "HTML Basics",
        "duration": 600,
        "questions": [
          {
            "id": 1,
            "question": "What does the <a> tag represent in HTML?",
            "options": ["Anchor (Hyperlink)", "Article", "Audio", "Aside"],
            "answer": "Anchor (Hyperlink)"
          },
          {
            "id": 2,
            "question": "Which attribute is used to specify the URL of a link in the <a> tag?",
            "options": ["src", "href", "link", "url"],
            "answer": "href"
          },
          {
            "id": 3,
            "question": "What is the purpose of the <head> element in an HTML document?",
            "options": [
              "Contains metadata and links to scripts/styles",
              "Contains the main content",
              "Defines a header section visible on the page",
              "Specifies the footer content"
            ],
            "answer": "Contains metadata and links to scripts/styles"
          },
          {
            "id": 4,
            "question": "Which HTML element is used to insert an image?",
            "options": ["<img>", "<image>", "<picture>", "<src>"],
            "answer": "<img>"
          },
          {
            "id": 5,
            "question": "What tag is used for an unordered list?",
            "options": ["<ul>", "<ol>", "<li>", "<list>"],
            "answer": "<ul>"
          },
          {
            "id": 6,
            "question": "Which HTML element defines the title of a document that appears in the browser tab?",
            "options": ["<title>", "<head>", "<meta>", "<header>"],
            "answer": "<title>"
          },
          {
            "id": 7,
            "question": "Which attribute specifies an alternate text for an image, if the image cannot be displayed?",
            "options": ["alt", "title", "src", "caption"],
            "answer": "alt"
          },
          {
            "id": 8,
            "question": "What does the <form> element represent in HTML?",
            "options": [
              "A container for input controls to submit data",
              "A section of content",
              "An image placeholder",
              "A clickable button"
            ],
            "answer": "A container for input controls to submit data"
          },
          {
            "id": 9,
            "question": "Which HTML5 element is used to define navigation links?",
            "options": ["<nav>", "<menu>", "<section>", "<header>"],
            "answer": "<nav>"
          },
          {
            "id": 10,
            "question": "How do you specify a checkbox input field in HTML?",
            "options": [
              "<input type='checkbox'>",
              "<checkbox>",
              "<input checkbox>",
              "<check>"
            ],
            "answer": "<input type='checkbox'>"
          },
          {
            "id": 11,
            "question": "Which attribute in the <script> tag is used to load a script asynchronously?",
            "options": ["async", "defer", "load", "asyncload"],
            "answer": "async"
          },
          {
            "id": 12,
            "question": "Which HTML element is used to specify a table header?",
            "options": ["<th>", "<thead>", "<header>", "<tr>"],
            "answer": "<th>"
          },
          {
            "id": 13,
            "question": "What does the <blockquote> element represent?",
            "options": [
              "A section quoted from another source",
              "A bold text",
              "A highlighted text",
              "A section heading"
            ],
            "answer": "A section quoted from another source"
          },
          {
            "id": 14,
            "question": "Which element is used to embed an external webpage inside the current webpage?",
            "options": ["<iframe>", "<embed>", "<object>", "<frame>"],
            "answer": "<iframe>"
          },
          {
            "id": 15,
            "question": "Which attribute is used to specify that an input field cannot be left empty?",
            "options": ["required", "mandatory", "validate", "notempty"],
            "answer": "required"
          },
          {
            "id": 16,
            "question": "Which tag is used to define a paragraph?",
            "options": ["<p>", "<para>", "<paragraph>", "<text>"],
            "answer": "<p>"
          },
          {
            "id": 17,
            "question": "How do you add a comment in HTML?",
            "options": [
              "<!-- comment -->",
              "// comment",
              "/* comment */",
              "# comment"
            ],
            "answer": "<!-- comment -->"
          },
          {
            "id": 18,
            "question": "Which element is used for the largest heading in HTML?",
            "options": ["<h1>", "<h6>", "<head>", "<header>"],
            "answer": "<h1>"
          },
          {
            "id": 19,
            "question": "What attribute is used to open a link in a new tab?",
            "options": [
              "target='_blank'",
              "newtab='true'",
              "open='new'",
              "window='new'"
            ],
            "answer": "target='_blank'"
          },
          {
            "id": 20,
            "question": "Which element represents the footer section of a document or section?",
            "options": ["<footer>", "<bottom>", "<section>", "<aside>"],
            "answer": "<footer>"
          },
          {
            "id": 21,
            "question": "Which tag is used to add a horizontal line?",
            "options": ["<hr>", "<line>", "<break>", "<hl>"],
            "answer": "<hr>"
          },
          {
            "id": 22,
            "question": "Which attribute defines inline styles in HTML elements?",
            "options": ["style", "class", "css", "design"],
            "answer": "style"
          },
          {
            "id": 23,
            "question": "Which tag is used to create a numbered list?",
            "options": ["<ol>", "<ul>", "<li>", "<list>"],
            "answer": "<ol>"
          },
          {
            "id": 24,
            "question": "How do you insert a line break in HTML?",
            "options": ["<br>", "<break>", "<lb>", "<newline>"],
            "answer": "<br>"
          },
          {
            "id": 25,
            "question": "What tag is used to embed an audio file?",
            "options": ["<audio>", "<sound>", "<music>", "<media>"],
            "answer": "<audio>"
          },
          {
            "id": 26,
            "question": "Which attribute is used to disable an input field?",
            "options": ["disabled", "readonly", "lock", "off"],
            "answer": "disabled"
          },
          {
            "id": 27,
            "question": "Which tag is used to create a dropdown list?",
            "options": ["<select>", "<dropdown>", "<list>", "<option>"],
            "answer": "<select>"
          },
          {
            "id": 28,
            "question": "How do you specify the character encoding for an HTML document?",
            "options": [
              "<meta charset='UTF-8'>",
              "<charset='UTF-8'>",
              "<encoding='UTF-8'>",
              "<meta encoding='UTF-8'>"
            ],
            "answer": "<meta charset='UTF-8'>"
          },
          {
            "id": 29,
            "question": "Which tag is used to define emphasized text?",
            "options": ["<em>", "<strong>", "<i>", "<b>"],
            "answer": "<em>"
          },
          {
            "id": 30,
            "question": "Which attribute is used to add a tooltip to an element?",
            "options": ["title", "alt", "tooltip", "desc"],
            "answer": "title"
          }
        ]
      },
      {
        "id": "t2",
        "name": "HTML Beginner",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "What does the <a> tag represent in HTML?",
            "options": ["Anchor (Hyperlink)", "Article", "Audio", "Aside"],
            "answer": "Anchor (Hyperlink)"
          },
          {
            "id": 2,
            "question": "Which attribute is used to specify the URL of a link in the <a> tag?",
            "options": ["src", "href", "link", "url"],
            "answer": "href"
          },
          {
            "id": 3,
            "question": "What is the purpose of the <head> element in an HTML document?",
            "options": [
              "Contains metadata and links to scripts/styles",
              "Contains the main content",
              "Defines a header section visible on the page",
              "Specifies the footer content"
            ],
            "answer": "Contains metadata and links to scripts/styles"
          },
          {
            "id": 4,
            "question": "Which HTML element is used to insert an image?",
            "options": ["<img>", "<image>", "<picture>", "<src>"],
            "answer": "<img>"
          },
          {
            "id": 5,
            "question": "What tag is used for an unordered list?",
            "options": ["<ul>", "<ol>", "<li>", "<list>"],
            "answer": "<ul>"
          },
          {
            "id": 6,
            "question": "Which HTML element defines the title of a document that appears in the browser tab?",
            "options": ["<title>", "<head>", "<meta>", "<header>"],
            "answer": "<title>"
          },
          {
            "id": 7,
            "question": "Which attribute specifies an alternate text for an image, if the image cannot be displayed?",
            "options": ["alt", "title", "src", "caption"],
            "answer": "alt"
          },
          {
            "id": 8,
            "question": "What does the <form> element represent in HTML?",
            "options": [
              "A container for input controls to submit data",
              "A section of content",
              "An image placeholder",
              "A clickable button"
            ],
            "answer": "A container for input controls to submit data"
          },
          {
            "id": 9,
            "question": "Which HTML5 element is used to define navigation links?",
            "options": ["<nav>", "<menu>", "<section>", "<header>"],
            "answer": "<nav>"
          },
          {
            "id": 10,
            "question": "How do you specify a checkbox input field in HTML?",
            "options": [
              "<input type='checkbox'>",
              "<checkbox>",
              "<input checkbox>",
              "<check>"
            ],
            "answer": "<input type='checkbox'>"
          },
          {
            "id": 11,
            "question": "Which attribute in the <script> tag is used to load a script asynchronously?",
            "options": ["async", "defer", "load", "asyncload"],
            "answer": "async"
          },
          {
            "id": 12,
            "question": "Which HTML element is used to specify a table header?",
            "options": ["<th>", "<thead>", "<header>", "<tr>"],
            "answer": "<th>"
          },
          {
            "id": 13,
            "question": "What does the <blockquote> element represent?",
            "options": [
              "A section quoted from another source",
              "A bold text",
              "A highlighted text",
              "A section heading"
            ],
            "answer": "A section quoted from another source"
          },
          {
            "id": 14,
            "question": "Which element is used to embed an external webpage inside the current webpage?",
            "options": ["<iframe>", "<embed>", "<object>", "<frame>"],
            "answer": "<iframe>"
          },
          {
            "id": 15,
            "question": "Which attribute is used to specify that an input field cannot be left empty?",
            "options": ["required", "mandatory", "validate", "notempty"],
            "answer": "required"
          },
          {
            "id": 16,
            "question": "What does the <section> element represent in HTML5?",
            "options": [
              "A standalone section of content",
              "A navigation menu",
              "A footer",
              "An inline text container"
            ],
            "answer": "A standalone section of content"
          },
          {
            "id": 17,
            "question": "Which tag is used to create a numbered list?",
            "options": ["<ol>", "<ul>", "<li>", "<list>"],
            "answer": "<ol>"
          },
          {
            "id": 18,
            "question": "How do you add a comment in HTML?",
            "options": [
              "<!-- This is a comment -->",
              "// This is a comment",
              "/* This is a comment */",
              "# This is a comment"
            ],
            "answer": "<!-- This is a comment -->"
          },
          {
            "id": 19,
            "question": "What does the <audio> tag do in HTML5?",
            "options": [
              "Embeds audio content",
              "Creates a button",
              "Adds video content",
              "Defines a paragraph"
            ],
            "answer": "Embeds audio content"
          },
          {
            "id": 20,
            "question": "Which attribute is used to specify the character encoding for the HTML document?",
            "options": ["charset", "encoding", "code", "type"],
            "answer": "charset"
          },
          {
            "id": 21,
            "question": "What is the default display behavior of a <div> element?",
            "options": ["Block", "Inline", "Inline-block", "None"],
            "answer": "Block"
          },
          {
            "id": 22,
            "question": "Which element represents a self-closing tag in HTML?",
            "options": ["<img>", "<div>", "<p>", "<section>"],
            "answer": "<img>"
          },
          {
            "id": 23,
            "question": "How do you create a dropdown list in HTML?",
            "options": [
              "<select>",
              "<input type='dropdown'>",
              "<list>",
              "<option>"
            ],
            "answer": "<select>"
          },
          {
            "id": 24,
            "question": "Which attribute in <input> tag specifies the maximum length of user input?",
            "options": ["maxlength", "max", "limit", "length"],
            "answer": "maxlength"
          },
          {
            "id": 25,
            "question": "What is the purpose of the <meta> tag with name='viewport'?",
            "options": [
              "Controls layout on mobile browsers",
              "Adds metadata for search engines",
              "Specifies page author",
              "Links to CSS files"
            ],
            "answer": "Controls layout on mobile browsers"
          },
          {
            "id": 26,
            "question": "Which tag is used to embed JavaScript code inside an HTML document?",
            "options": ["<script>", "<js>", "<code>", "<javascript>"],
            "answer": "<script>"
          },
          {
            "id": 27,
            "question": "What is the purpose of the <footer> element?",
            "options": [
              "Defines the footer section of a page",
              "Defines the header section",
              "Creates navigation menus",
              "Represents the main content"
            ],
            "answer": "Defines the footer section of a page"
          },
          {
            "id": 28,
            "question": "Which HTML tag is used to display a horizontal line?",
            "options": ["<hr>", "<line>", "<br>", "<hl>"],
            "answer": "<hr>"
          },
          {
            "id": 29,
            "question": "What does the <label> element do?",
            "options": [
              "Defines labels for input elements",
              "Creates headings",
              "Adds captions to images",
              "Defines paragraphs"
            ],
            "answer": "Defines labels for input elements"
          },
          {
            "id": 30,
            "question": "Which attribute is used to group radio buttons?",
            "options": ["name", "id", "class", "group"],
            "answer": "name"
          }
        ]
      },
      {
        "id": "t3",
        "name": "HTML Intermediate",
        "duration": 40,
        "questions": [
          {
            "id": 1,
            "question": "Which HTML5 element is used to embed a video?",
            "options": ["<video>", "<media>", "<movie>", "<embed>"],
            "answer": "<video>"
          },
          {
            "id": 2,
            "question": "What does the 'alt' attribute in <img> tag specify?",
            "options": [
              "Alternative text for image",
              "Alignment of the image",
              "Animation style",
              "Image size"
            ],
            "answer": "Alternative text for image"
          },
          {
            "id": 3,
            "question": "Which tag is used to define a section in HTML5?",
            "options": ["<section>", "<div>", "<article>", "<span>"],
            "answer": "<section>"
          },
          {
            "id": 4,
            "question": "How do you specify a comment in HTML?",
            "options": [
              "<!-- This is a comment -->",
              "// This is a comment",
              "/* This is a comment */",
              "# This is a comment"
            ],
            "answer": "<!-- This is a comment -->"
          },
          {
            "id": 5,
            "question": "Which attribute is used for inline CSS styling?",
            "options": ["style", "class", "css", "design"],
            "answer": "style"
          },
          {
            "id": 6,
            "question": "Which element is used to embed an audio file in HTML5?",
            "options": ["<audio>", "<sound>", "<music>", "<media>"],
            "answer": "<audio>"
          },
          {
            "id": 7,
            "question": "What is the purpose of the <canvas> element in HTML5?",
            "options": [
              "Draw graphics via scripting",
              "Embed videos",
              "Display audio",
              "Create forms"
            ],
            "answer": "Draw graphics via scripting"
          },
          {
            "id": 8,
            "question": "Which attribute controls whether an input field is disabled?",
            "options": ["disabled", "readonly", "inert", "blocked"],
            "answer": "disabled"
          },
          {
            "id": 9,
            "question": "How do you specify the language of an HTML document?",
            "options": [
              "Using <html lang='en'> attribute",
              "Using <head lang='en'>",
              "Using <body lang='en'>",
              "Using a meta tag"
            ],
            "answer": "Using <html lang='en'> attribute"
          },
          {
            "id": 10,
            "question": "What does the 'defer' attribute in the <script> tag do?",
            "options": [
              "Loads script after HTML parsing",
              "Loads script synchronously",
              "Stops script loading",
              "Immediately executes script"
            ],
            "answer": "Loads script after HTML parsing"
          },
          {
            "id": 11,
            "question": "Which tag is used to define an article in HTML5?",
            "options": ["<article>", "<section>", "<div>", "<content>"],
            "answer": "<article>"
          },
          {
            "id": 12,
            "question": "Which attribute specifies the target window for a link?",
            "options": ["target", "href", "src", "window"],
            "answer": "target"
          },
          {
            "id": 13,
            "question": "Which input type allows users to select a date?",
            "options": ["date", "datetime", "calendar", "time"],
            "answer": "date"
          },
          {
            "id": 14,
            "question": "What tag is used to create a dropdown list in HTML?",
            "options": ["<select>", "<dropdown>", "<input>", "<list>"],
            "answer": "<select>"
          },
          {
            "id": 15,
            "question": "What is the default display type of the <span> element?",
            "options": ["inline", "block", "inline-block", "none"],
            "answer": "inline"
          },
          {
            "id": 16,
            "question": "Which tag is used to define a table row?",
            "options": ["<tr>", "<td>", "<th>", "<table>"],
            "answer": "<tr>"
          },
          {
            "id": 17,
            "question": "What does the 'action' attribute in the <form> tag specify?",
            "options": [
              "The URL to send form data to",
              "The method to submit form",
              "The type of form",
              "The encoding type"
            ],
            "answer": "The URL to send form data to"
          },
          {
            "id": 18,
            "question": "Which attribute is used to group radio buttons?",
            "options": ["name", "id", "class", "group"],
            "answer": "name"
          },
          {
            "id": 19,
            "question": "Which element is used to define a footer for a document or section?",
            "options": ["<footer>", "<bottom>", "<section>", "<aside>"],
            "answer": "<footer>"
          },
          {
            "id": 20,
            "question": "How do you embed a favicon in an HTML document?",
            "options": [
              "<link rel='icon' href='favicon.ico'>",
              "<icon href='favicon.ico'>",
              "<favicon href='favicon.ico'>",
              "<link rel='shortcut icon' href='favicon.ico'>"
            ],
            "answer": "<link rel='icon' href='favicon.ico'>"
          },
          {
            "id": 21,
            "question": "Which HTML attribute is used to specify inline styles?",
            "options": ["style", "class", "id", "css"],
            "answer": "style"
          },
          {
            "id": 22,
            "question": "What does the <details> element do?",
            "options": [
              "Creates a disclosure widget that users can open and close",
              "Defines a detailed paragraph",
              "Specifies extra information on hover",
              "Creates a tooltip"
            ],
            "answer": "Creates a disclosure widget that users can open and close"
          },
          {
            "id": 23,
            "question": "Which tag is used to display a line break?",
            "options": ["<br>", "<hr>", "<break>", "<lb>"],
            "answer": "<br>"
          },
          {
            "id": 24,
            "question": "Which attribute is used to open a link in a new tab?",
            "options": [
              "target='_blank'",
              "rel='noopener'",
              "href='_new'",
              "link='new'"
            ],
            "answer": "target='_blank'"
          },
          {
            "id": 25,
            "question": "What is the purpose of the <mark> element?",
            "options": [
              "Highlights text",
              "Creates a mark on page",
              "Defines a bookmark",
              "Emphasizes text"
            ],
            "answer": "Highlights text"
          },
          {
            "id": 26,
            "question": "Which tag is used to create a checkbox input?",
            "options": [
              "<input type='checkbox'>",
              "<checkbox>",
              "<input checkbox>",
              "<check>"
            ],
            "answer": "<input type='checkbox'>"
          },
          {
            "id": 27,
            "question": "What does the 'lang' attribute specify in the <html> tag?",
            "options": [
              "Language of the document",
              "Layout style",
              "Link relationship",
              "Document direction"
            ],
            "answer": "Language of the document"
          },
          {
            "id": 28,
            "question": "Which HTML tag is used to define emphasized text?",
            "options": ["<em>", "<strong>", "<i>", "<b>"],
            "answer": "<em>"
          },
          {
            "id": 29,
            "question": "How do you specify a password field in a form?",
            "options": [
              "<input type='password'>",
              "<password>",
              "<input password>",
              "<pass>"
            ],
            "answer": "<input type='password'>"
          },
          {
            "id": 30,
            "question": "Which attribute is used to add placeholder text in an input field?",
            "options": ["placeholder", "title", "alt", "value"],
            "answer": "placeholder"
          }
        ]
      },
      {
        "id": "t4",
        "name": "HTML Advanced",
        "duration": 45,
        "questions": [
          {
            "id": 1,
            "question": "Which attribute in HTML5 is used to make an input field required?",
            "options": ["mandatory", "validate", "required", "check"],
            "answer": "required"
          },
          {
            "id": 2,
            "question": "What is the semantic purpose of the <aside> element?",
            "options": [
              "Defines main content",
              "Defines content aside from the page content",
              "Defines footer",
              "Defines navigation"
            ],
            "answer": "Defines content aside from the page content"
          },
          {
            "id": 3,
            "question": "Which input type provides a slider control in HTML5?",
            "options": ["range", "slider", "number", "select"],
            "answer": "range"
          },
          {
            "id": 4,
            "question": "How do you specify the language of an HTML document?",
            "options": [
              "Using <html lang='en'> attribute",
              "Using <head lang='en'>",
              "Using <body lang='en'>",
              "Using a meta tag"
            ],
            "answer": "Using <html lang='en'> attribute"
          },
          {
            "id": 5,
            "question": "What does the <canvas> element in HTML5 allow you to do?",
            "options": [
              "Draw graphics via scripting",
              "Embed videos",
              "Display audio content",
              "Create forms"
            ],
            "answer": "Draw graphics via scripting"
          },
          {
            "id": 6,
            "question": "Which attribute is used to specify placeholder text in an input field?",
            "options": ["placeholder", "hint", "tooltip", "label"],
            "answer": "placeholder"
          },
          {
            "id": 7,
            "question": "What does the <figure> element represent?",
            "options": [
              "Self-contained content like images with captions",
              "Main article section",
              "Sidebar content",
              "Footer content"
            ],
            "answer": "Self-contained content like images with captions"
          },
          {
            "id": 8,
            "question": "Which HTML5 element is used for a container that groups together multiple form controls?",
            "options": [
              "<fieldset>",
              "<formgroup>",
              "<group>",
              "<formsection>"
            ],
            "answer": "<fieldset>"
          },
          {
            "id": 9,
            "question": "Which attribute is used to specify multiple selection in a <select> element?",
            "options": ["multiple", "multi", "selectmultiple", "many"],
            "answer": "multiple"
          },
          {
            "id": 10,
            "question": "What is the purpose of the <output> element?",
            "options": [
              "Displays the result of a calculation or user action",
              "Outputs JavaScript code",
              "Defines a video player",
              "Displays user comments"
            ],
            "answer": "Displays the result of a calculation or user action"
          },
          {
            "id": 11,
            "question": "Which attribute specifies the maximum length of text in an input field?",
            "options": ["maxlength", "maxchars", "maxlen", "maxtext"],
            "answer": "maxlength"
          },
          {
            "id": 12,
            "question": "What is the purpose of the 'novalidate' attribute on a form?",
            "options": [
              "Disables HTML5 form validation",
              "Enables extra validation",
              "Marks form as not required",
              "Prevents form submission"
            ],
            "answer": "Disables HTML5 form validation"
          },
          {
            "id": 13,
            "question": "Which tag is used to define a dialog box or window in HTML5?",
            "options": ["<dialog>", "<modal>", "<window>", "<popup>"],
            "answer": "<dialog>"
          },
          {
            "id": 14,
            "question": "What is the purpose of the 'formaction' attribute on a submit button?",
            "options": [
              "Specifies the URL for form submission overriding <form> action",
              "Adds a click animation",
              "Validates form data",
              "Defines form method"
            ],
            "answer": "Specifies the URL for form submission overriding <form> action"
          },
          {
            "id": 15,
            "question": "Which input type allows file uploads in HTML5?",
            "options": ["file", "upload", "document", "image"],
            "answer": "file"
          },
          {
            "id": 16,
            "question": "Which attribute controls whether an audio or video plays automatically?",
            "options": ["autoplay", "play", "auto", "start"],
            "answer": "autoplay"
          },
          {
            "id": 17,
            "question": "What is the semantic use of the <main> element?",
            "options": [
              "Defines the dominant content of the document",
              "Defines a footer",
              "Defines a navigation section",
              "Defines a sidebar"
            ],
            "answer": "Defines the dominant content of the document"
          },
          {
            "id": 18,
            "question": "Which attribute can be used to provide a tooltip for an element?",
            "options": ["title", "tooltip", "alt", "hint"],
            "answer": "title"
          },
          {
            "id": 19,
            "question": "How do you make a button submit a form?",
            "options": [
              "<button type='submit'>",
              "<button action='submit'>",
              "<button submit>",
              "<submit>"
            ],
            "answer": "<button type='submit'>"
          },
          {
            "id": 20,
            "question": "Which attribute specifies that an <input> should only accept numeric values?",
            "options": ["type='number'", "numeric", "digits", "numonly"],
            "answer": "type='number'"
          },
          {
            "id": 21,
            "question": "What is the use of the <progress> element?",
            "options": [
              "Represents the progress of a task",
              "Creates a progress bar for media",
              "Starts a progress animation",
              "Creates a progress button"
            ],
            "answer": "Represents the progress of a task"
          },
          {
            "id": 22,
            "question": "Which attribute specifies that an <input> field should be read-only?",
            "options": ["readonly", "disabled", "immutable", "fixed"],
            "answer": "readonly"
          },
          {
            "id": 23,
            "question": "Which element is used to group multiple <source> elements for media?",
            "options": ["<picture>", "<media>", "<video>", "<audio>"],
            "answer": "<picture>"
          },
          {
            "id": 24,
            "question": "Which input type allows selecting a time value?",
            "options": ["time", "timer", "clock", "datetime"],
            "answer": "time"
          },
          {
            "id": 25,
            "question": "What does the 'formtarget' attribute specify?",
            "options": [
              "Specifies where to display the response after form submission",
              "Specifies form method",
              "Specifies form action",
              "Specifies form enctype"
            ],
            "answer": "Specifies where to display the response after form submission"
          },
          {
            "id": 26,
            "question": "Which tag is used to define a citation or reference?",
            "options": ["<cite>", "<quote>", "<ref>", "<source>"],
            "answer": "<cite>"
          },
          {
            "id": 27,
            "question": "What is the purpose of the <wbr> element?",
            "options": [
              "Defines a possible line break opportunity",
              "Wraps text",
              "Bold text",
              "Defines a word"
            ],
            "answer": "Defines a possible line break opportunity"
          },
          {
            "id": 28,
            "question": "Which attribute specifies an input field's maximum value?",
            "options": ["max", "maxlength", "maxval", "maximum"],
            "answer": "max"
          },
          {
            "id": 29,
            "question": "How do you define a data list for an input field?",
            "options": [
              "Using <datalist> element",
              "Using <list> element",
              "Using <select> element",
              "Using <options> element"
            ],
            "answer": "Using <datalist> element"
          },
          {
            "id": 30,
            "question": "Which element is used to represent keyboard input in HTML?",
            "options": ["<kbd>", "<key>", "<input>", "<keyboard>"],
            "answer": "<kbd>"
          }
        ]
      },
      {
        "id": "t5",
        "name": "HTML Expert",
        "duration": 50,
        "questions": [
          {
            "id": 1,
            "question": "Which HTML element is used to embed scalable vector graphics (SVG)?",
            "options": ["<svg>", "<vector>", "<image>", "<canvas>"],
            "answer": "<svg>"
          },
          {
            "id": 2,
            "question": "What is the purpose of the 'sandbox' attribute in the <iframe> element?",
            "options": [
              "Adds security restrictions to the iframe content",
              "Allows fullscreen mode",
              "Specifies the iframe size",
              "Enables scripts"
            ],
            "answer": "Adds security restrictions to the iframe content"
          },
          {
            "id": 3,
            "question": "Which attribute is used to specify multiple file selection in a file input?",
            "options": ["multiple", "files", "multi", "selectmultiple"],
            "answer": "multiple"
          },
          {
            "id": 4,
            "question": "How can you define a data list for an <input> element?",
            "options": [
              "Using the <datalist> element linked via the 'list' attribute",
              "Using <select> element inside <input>",
              "Using the 'options' attribute",
              "Using <options> element"
            ],
            "answer": "Using the <datalist> element linked via the 'list' attribute"
          },
          {
            "id": 5,
            "question": "Which HTML element is used to define a description list?",
            "options": ["<dl>", "<ul>", "<ol>", "<list>"],
            "answer": "<dl>"
          },
          {
            "id": 6,
            "question": "What attribute specifies the MIME type of the <object> element?",
            "options": ["type", "mime", "format", "media"],
            "answer": "type"
          },
          {
            "id": 7,
            "question": "Which HTML element is used to mark up text that is no longer accurate or relevant?",
            "options": ["<del>", "<strike>", "<s>", "<removed>"],
            "answer": "<del>"
          },
          {
            "id": 8,
            "question": "What is the purpose of the 'download' attribute in the <a> tag?",
            "options": [
              "Allows the linked file to be downloaded",
              "Opens the link in a new tab",
              "Specifies the file type",
              "Preloads the file"
            ],
            "answer": "Allows the linked file to be downloaded"
          },
          {
            "id": 9,
            "question": "Which attribute controls the autoplay of media elements like <audio> and <video>?",
            "options": ["autoplay", "auto", "play", "start"],
            "answer": "autoplay"
          },
          {
            "id": 10,
            "question": "What is the use of the 'contenteditable' attribute?",
            "options": [
              "Makes the element's content editable by the user",
              "Disables editing",
              "Highlights the element",
              "Specifies content format"
            ],
            "answer": "Makes the element's content editable by the user"
          },
          {
            "id": 11,
            "question": "Which element is used to embed audio content in HTML5?",
            "options": ["<audio>", "<sound>", "<music>", "<media>"],
            "answer": "<audio>"
          },
          {
            "id": 12,
            "question": "How do you declare the character encoding for an HTML document?",
            "options": [
              "<meta charset='UTF-8'>",
              "<meta encoding='UTF-8'>",
              "<charset='UTF-8'>",
              "<encoding='UTF-8'>"
            ],
            "answer": "<meta charset='UTF-8'>"
          },
          {
            "id": 13,
            "question": "Which attribute is used with the <input> element to provide placeholder text?",
            "options": ["placeholder", "hint", "tooltip", "title"],
            "answer": "placeholder"
          },
          {
            "id": 14,
            "question": "Which tag is used to create a numbered list?",
            "options": ["<ol>", "<ul>", "<li>", "<list>"],
            "answer": "<ol>"
          },
          {
            "id": 15,
            "question": "Which element is used to group several elements together without adding extra nodes to the DOM?",
            "options": ["<template>", "<div>", "<span>", "<section>"],
            "answer": "<template>"
          },
          {
            "id": 16,
            "question": "What does the 'rel' attribute specify in an <a> tag?",
            "options": [
              "Relationship between current document and linked resource",
              "Link URL",
              "Link title",
              "Link style"
            ],
            "answer": "Relationship between current document and linked resource"
          },
          {
            "id": 17,
            "question": "Which tag is deprecated and should not be used in HTML5?",
            "options": ["<font>", "<b>", "<i>", "<u>"],
            "answer": "<font>"
          },
          {
            "id": 18,
            "question": "Which attribute of the <form> tag specifies where to send the form-data on submission?",
            "options": ["action", "method", "target", "submit"],
            "answer": "action"
          },
          {
            "id": 19,
            "question": "Which method attribute value should be used to submit form data securely?",
            "options": ["post", "get", "put", "delete"],
            "answer": "post"
          },
          {
            "id": 20,
            "question": "Which HTML element is used to represent the footer section of a document or section?",
            "options": ["<footer>", "<bottom>", "<section>", "<aside>"],
            "answer": "<footer>"
          },
          {
            "id": 21,
            "question": "Which attribute in <input> is used to limit the maximum number of characters allowed?",
            "options": ["maxlength", "max", "limit", "size"],
            "answer": "maxlength"
          },
          {
            "id": 22,
            "question": "Which tag is used for a thematic break or horizontal line in HTML5?",
            "options": ["<hr>", "<break>", "<line>", "<separator>"],
            "answer": "<hr>"
          },
          {
            "id": 23,
            "question": "What does the 'defer' attribute in the <script> tag do?",
            "options": [
              "Defers execution of script until HTML parsing is finished",
              "Executes script immediately",
              "Loads script asynchronously",
              "Preloads the script"
            ],
            "answer": "Defers execution of script until HTML parsing is finished"
          },
          {
            "id": 24,
            "question": "Which HTML attribute specifies whether an input field is read-only?",
            "options": ["readonly", "disabled", "locked", "uneditable"],
            "answer": "readonly"
          },
          {
            "id": 25,
            "question": "Which element is used to define an article in HTML5?",
            "options": ["<article>", "<section>", "<div>", "<content>"],
            "answer": "<article>"
          },
          {
            "id": 26,
            "question": "What does the 'tabindex' attribute do?",
            "options": [
              "Specifies the tab order of elements",
              "Makes element focusable",
              "Disables tab key",
              "Both 1 and 2"
            ],
            "answer": "Both 1 and 2"
          },
          {
            "id": 27,
            "question": "Which attribute in the <input> tag specifies the accepted file types?",
            "options": ["accept", "filetypes", "types", "formats"],
            "answer": "accept"
          },
          {
            "id": 28,
            "question": "Which element is used to embed JavaScript code inline in HTML?",
            "options": ["<script>", "<js>", "<code>", "<inline>"],
            "answer": "<script>"
          },
          {
            "id": 29,
            "question": "What is the default display property of the <span> element?",
            "options": ["inline", "block", "inline-block", "none"],
            "answer": "inline"
          },
          {
            "id": 30,
            "question": "Which tag is used to mark text that is important or urgent?",
            "options": ["<strong>", "<em>", "<important>", "<urgent>"],
            "answer": "<strong>"
          }
        ]
      },
      {
        "id": "t6",
        "name": "HTML Master",
        "duration": 300,
        "questions": [
          {
            "id": 1,
            "question": "What is the correct syntax for referring to an external script called 'script.js'?",
            "options": [
              "<script href='script.js'></script>",
              "<script src='script.js'></script>",
              "<script ref='script.js'></script>",
              "<script name='script.js'></script>"
            ],
            "answer": "<script src='script.js'></script>"
          },
          {
            "id": 2,
            "question": "Which HTML attribute is used to define inline styles?",
            "options": ["style", "class", "styles", "font"],
            "answer": "style"
          },
          {
            "id": 3,
            "question": "Which HTML5 element defines navigation links?",
            "options": ["<nav>", "<navigate>", "<navigation>", "<menu>"],
            "answer": "<nav>"
          },
          {
            "id": 4,
            "question": "What is the purpose of the 'placeholder' attribute in input fields?",
            "options": [
              "Shows a hint text inside the input field",
              "Specifies input type",
              "Validates the input",
              "Marks required fields"
            ],
            "answer": "Shows a hint text inside the input field"
          },
          {
            "id": 5,
            "question": "Which element represents a self-contained composition in a document, page, application, or site?",
            "options": ["<article>", "<section>", "<aside>", "<div>"],
            "answer": "<article>"
          },
          {
            "id": 6,
            "question": "What does the 'content' attribute in a <meta> tag specify?",
            "options": [
              "Metadata value",
              "Content of the webpage",
              "URL of the page",
              "Author name"
            ],
            "answer": "Metadata value"
          },
          {
            "id": 7,
            "question": "How do you create a checkbox in HTML?",
            "options": [
              "<input type='checkbox'>",
              "<checkbox>",
              "<input type='check'>",
              "<check>"
            ],
            "answer": "<input type='checkbox'>"
          },
          {
            "id": 8,
            "question": "Which attribute is used to disable an HTML form element?",
            "options": ["disabled", "readonly", "uneditable", "blocked"],
            "answer": "disabled"
          },
          {
            "id": 9,
            "question": "Which element is used to embed a client-side script?",
            "options": ["<script>", "<js>", "<code>", "<client>"],
            "answer": "<script>"
          },
          {
            "id": 10,
            "question": "What is the default display behavior of the <div> element?",
            "options": ["block", "inline", "inline-block", "none"],
            "answer": "block"
          },
          {
            "id": 11,
            "question": "Which HTML element is used for the largest heading?",
            "options": ["<h6>", "<h1>", "<header>", "<head>"],
            "answer": "<h1>"
          },
          {
            "id": 12,
            "question": "What is the purpose of the 'lang' attribute in the <html> tag?",
            "options": [
              "Specifies the language of the document",
              "Sets text alignment",
              "Defines font style",
              "Marks document title"
            ],
            "answer": "Specifies the language of the document"
          },
          {
            "id": 13,
            "question": "Which tag is used to define a table row in HTML?",
            "options": ["<tr>", "<td>", "<table>", "<th>"],
            "answer": "<tr>"
          },
          {
            "id": 14,
            "question": "How do you create a numbered list in HTML?",
            "options": ["<ol>", "<ul>", "<li>", "<list>"],
            "answer": "<ol>"
          },
          {
            "id": 15,
            "question": "Which attribute is used to specify an image URL in the <img> tag?",
            "options": ["src", "href", "link", "url"],
            "answer": "src"
          },
          {
            "id": 16,
            "question": "Which element defines a caption for a <table>?",
            "options": ["<caption>", "<title>", "<thead>", "<footer>"],
            "answer": "<caption>"
          },
          {
            "id": 17,
            "question": "What does the 'target' attribute in an <a> tag specify?",
            "options": [
              "Where to open the linked document",
              "Title of the link",
              "Type of link",
              "Relationship to the current document"
            ],
            "answer": "Where to open the linked document"
          },
          {
            "id": 18,
            "question": "Which attribute defines alternative text for images?",
            "options": ["alt", "title", "src", "href"],
            "answer": "alt"
          },
          {
            "id": 19,
            "question": "What does the 'async' attribute in the <script> tag do?",
            "options": [
              "Loads script asynchronously without blocking HTML parsing",
              "Loads script after page load",
              "Executes script immediately",
              "Preloads the script"
            ],
            "answer": "Loads script asynchronously without blocking HTML parsing"
          },
          {
            "id": 20,
            "question": "Which tag is used to create a horizontal line?",
            "options": ["<hr>", "<line>", "<break>", "<separator>"],
            "answer": "<hr>"
          },
          {
            "id": 21,
            "question": "Which attribute specifies the character encoding for the HTML document?",
            "options": ["charset", "encoding", "content", "type"],
            "answer": "charset"
          },
          {
            "id": 22,
            "question": "How do you create a text input field in HTML?",
            "options": [
              "<input type='text'>",
              "<textinput>",
              "<textfield>",
              "<input>"
            ],
            "answer": "<input type='text'>"
          },
          {
            "id": 23,
            "question": "Which tag is used to define an inline frame?",
            "options": [
              "<iframe>",
              "<frame>",
              "<inlineframe>",
              "<frameinline>"
            ],
            "answer": "<iframe>"
          },
          {
            "id": 24,
            "question": "Which HTML element is used to specify a footer for a document or section?",
            "options": ["<footer>", "<bottom>", "<section>", "<aside>"],
            "answer": "<footer>"
          },
          {
            "id": 25,
            "question": "Which attribute in the <form> element specifies the HTTP method for sending data?",
            "options": ["method", "action", "submit", "type"],
            "answer": "method"
          },
          {
            "id": 26,
            "question": "What does the 'novalidate' attribute do in a form?",
            "options": [
              "Prevents form validation",
              "Requires all fields",
              "Submits form asynchronously",
              "Disables submit button"
            ],
            "answer": "Prevents form validation"
          },
          {
            "id": 27,
            "question": "Which attribute can be used to specify input restrictions on a number field?",
            "options": ["min", "maxlength", "max", "limit"],
            "answer": "min"
          },
          {
            "id": 28,
            "question": "What is the function of the <noscript> tag?",
            "options": [
              "Defines alternative content for users with disabled scripts",
              "Hides script content",
              "Loads scripts asynchronously",
              "Defines inline scripts"
            ],
            "answer": "Defines alternative content for users with disabled scripts"
          },
          {
            "id": 29,
            "question": "Which element is used to represent emphasized text?",
            "options": ["<em>", "<strong>", "<i>", "<b>"],
            "answer": "<em>"
          },
          {
            "id": 30,
            "question": "What is the difference between <b> and <strong> tags?",
            "options": [
              "<b> is for styling, <strong> indicates importance",
              "<b> is deprecated, <strong> is not",
              "<strong> is for styling, <b> indicates importance",
              "No difference"
            ],
            "answer": "<b> is for styling, <strong> indicates importance"
          }
        ]
      },
      {
        "id": "t7",
        "name": "HTML Coding Questions",
        "duration": 60,
        "questions": [
          {
            "id": 1,
            "question": "Write an HTML snippet to create a hyperlink to 'https://www.example.com' with the text 'Visit Example'.",
            "options": [
              "<a href='https://www.example.com'>Visit Example</a>",
              "<link url='https://www.example.com'>Visit Example</link>",
              "<a url='https://www.example.com'>Visit Example</a>",
              "<hyperlink href='https://www.example.com'>Visit Example</hyperlink>"
            ],
            "answer": "<a href='https://www.example.com'>Visit Example</a>"
          },
          {
            "id": 2,
            "question": "How would you create an ordered list with three items: Apple, Banana, and Cherry?",
            "options": [
              "<ol><li>Apple</li><li>Banana</li><li>Cherry</li></ol>",
              "<ul><li>Apple</li><li>Banana</li><li>Cherry</li></ul>",
              "<list><item>Apple</item><item>Banana</item><item>Cherry</item></list>",
              "<ol><item>Apple</item><item>Banana</item><item>Cherry</item></ol>"
            ],
            "answer": "<ol><li>Apple</li><li>Banana</li><li>Cherry</li></ol>"
          },
          {
            "id": 3,
            "question": "Write an HTML snippet to create an image element that loads 'image.jpg' and has alternate text 'Sample Image'.",
            "options": [
              "<img src='image.jpg' alt='Sample Image'>",
              "<image href='image.jpg' alt='Sample Image'>",
              "<img href='image.jpg' alt='Sample Image'>",
              "<img src='image.jpg' title='Sample Image'>"
            ],
            "answer": "<img src='image.jpg' alt='Sample Image'>"
          },
          {
            "id": 4,
            "question": "How to create a table with 2 columns (Name, Age) and 2 rows of data (John, 25 and Mary, 30)?",
            "options": [
              "<table><tr><th>Name</th><th>Age</th></tr><tr><td>John</td><td>25</td></tr><tr><td>Mary</td><td>30</td></tr></table>",
              "<table><thead><td>Name</td><td>Age</td></thead><tbody><tr>John 25</tr><tr>Mary 30</tr></tbody></table>",
              "<table><tr><td>Name</td><td>Age</td></tr><tr><td>John</td><td>25</td></tr><tr><td>Mary</td><td>30</td></tr></table>",
              "<table><th>Name</th><th>Age</th><tr><td>John</td><td>25</td></tr><tr><td>Mary</td><td>30</td></tr></table>"
            ],
            "answer": "<table><tr><th>Name</th><th>Age</th></tr><tr><td>John</td><td>25</td></tr><tr><td>Mary</td><td>30</td></tr></table>"
          },
          {
            "id": 5,
            "question": "Write an HTML snippet to create a form with a text input for 'username' and a submit button.",
            "options": [
              "<form><input type='text' name='username'><button type='submit'>Submit</button></form>",
              "<form><input type='text' id='username'><button>Submit</button></form>",
              "<form><textbox name='username'></textbox><button>Submit</button></form>",
              "<form><input name='username'><button type='submit'>Submit</button></form>"
            ],
            "answer": "<form><input type='text' name='username'><button type='submit'>Submit</button></form>"
          },
          {
            "id": 6,
            "question": "How do you create a checkbox input named 'subscribe'?",
            "options": [
              "<input type='checkbox' name='subscribe'>",
              "<checkbox name='subscribe'>",
              "<input type='check' name='subscribe'>",
              "<input checkbox='subscribe'>"
            ],
            "answer": "<input type='checkbox' name='subscribe'>"
          },
          {
            "id": 7,
            "question": "Write the HTML to embed a YouTube video using the iframe tag with the src 'https://www.youtube.com/embed/dQw4w9WgXcQ'.",
            "options": [
              "<iframe src='https://www.youtube.com/embed/dQw4w9WgXcQ' frameborder='0' allowfullscreen></iframe>",
              "<iframe href='https://www.youtube.com/embed/dQw4w9WgXcQ'></iframe>",
              "<video src='https://www.youtube.com/embed/dQw4w9WgXcQ'></video>",
              "<embed src='https://www.youtube.com/embed/dQw4w9WgXcQ'></embed>"
            ],
            "answer": "<iframe src='https://www.youtube.com/embed/dQw4w9WgXcQ' frameborder='0' allowfullscreen></iframe>"
          },
          {
            "id": 8,
            "question": "How do you create a dropdown (select) list with options 'Red', 'Green', and 'Blue'?",
            "options": [
              "<select><option>Red</option><option>Green</option><option>Blue</option></select>",
              "<dropdown><item>Red</item><item>Green</item><item>Blue</item></dropdown>",
              "<select><item>Red</item><item>Green</item><item>Blue</item></select>",
              "<list><option>Red</option><option>Green</option><option>Blue</option></list>"
            ],
            "answer": "<select><option>Red</option><option>Green</option><option>Blue</option></select>"
          },
          {
            "id": 9,
            "question": "Write HTML code to add a comment that says 'This is a comment'.",
            "options": [
              "<!-- This is a comment -->",
              "// This is a comment",
              "/* This is a comment */",
              "//- This is a comment"
            ],
            "answer": "<!-- This is a comment -->"
          },
          {
            "id": 10,
            "question": "How to add an image with a width of 200 pixels using inline CSS?",
            "options": [
              "<img src='img.jpg' style='width:200px;'>",
              "<img src='img.jpg' width='200px'>",
              "<img src='img.jpg' size='200'>",
              "<img src='img.jpg' style='size:200px;'>"
            ],
            "answer": "<img src='img.jpg' style='width:200px;'>"
          },
          {
            "id": 11,
            "question": "Write an HTML snippet to open a link in a new browser tab.",
            "options": [
              "<a href='https://example.com' target='_blank'>Link</a>",
              "<a href='https://example.com' newtab>",
              "<a href='https://example.com' target='new'>Link</a>",
              "<a href='https://example.com' target='_newtab'>Link</a>"
            ],
            "answer": "<a href='https://example.com' target='_blank'>Link</a>"
          },
          {
            "id": 12,
            "question": "How do you add a line break in HTML?",
            "options": ["<br>", "<break>", "<lb>", "<newline>"],
            "answer": "<br>"
          },
          {
            "id": 13,
            "question": "Write an HTML snippet to create a password input field.",
            "options": [
              "<input type='password'>",
              "<input type='text' password>",
              "<password>",
              "<input password='true'>"
            ],
            "answer": "<input type='password'>"
          },
          {
            "id": 14,
            "question": "Which tag is used to define emphasized text that is usually displayed in italics?",
            "options": ["<em>", "<strong>", "<i>", "<b>"],
            "answer": "<em>"
          },
          {
            "id": 15,
            "question": "How do you make an image clickable to redirect to another page?",
            "options": [
              "<a href='page.html'><img src='image.jpg'></a>",
              "<img href='page.html'>",
              "<img link='page.html'>",
              "<a src='page.html'><img></a>"
            ],
            "answer": "<a href='page.html'><img src='image.jpg'></a>"
          },
          {
            "id": 16,
            "question": "Write HTML code for a button that triggers form submission.",
            "options": [
              "<button type='submit'>Submit</button>",
              "<button type='button'>Submit</button>",
              "<input type='button' value='Submit'>",
              "<input type='submit'>"
            ],
            "answer": "<button type='submit'>Submit</button>"
          },
          {
            "id": 17,
            "question": "How to add a tooltip to an element that shows on hover?",
            "options": [
              "Use the 'title' attribute",
              "Use the 'tooltip' attribute",
              "Use the 'hovertext' attribute",
              "Use JavaScript only"
            ],
            "answer": "Use the 'title' attribute"
          },
          {
            "id": 18,
            "question": "Write an HTML snippet for embedding a video file named 'video.mp4'.",
            "options": [
              "<video src='video.mp4' controls></video>",
              "<media src='video.mp4'></media>",
              "<video file='video.mp4'></video>",
              "<movie src='video.mp4'></movie>"
            ],
            "answer": "<video src='video.mp4' controls></video>"
          },
          {
            "id": 19,
            "question": "How do you create a radio button group for gender with options Male and Female?",
            "options": [
              "<input type='radio' name='gender' value='male'> Male <input type='radio' name='gender' value='female'> Female",
              "<radio name='gender'> Male Female </radio>",
              "<input type='radio' id='male'> Male <input type='radio' id='female'> Female",
              "<input type='radiobutton' name='gender'> Male Female"
            ],
            "answer": "<input type='radio' name='gender' value='male'> Male <input type='radio' name='gender' value='female'> Female"
          },
          {
            "id": 20,
            "question": "Write an HTML snippet to create a text area for comments with 5 rows and 30 columns.",
            "options": [
              "<textarea rows='5' cols='30'></textarea>",
              "<input type='textarea' rows='5' cols='30'>",
              "<textarea size='5x30'></textarea>",
              "<input type='text-area' rows='5' cols='30'>"
            ],
            "answer": "<textarea rows='5' cols='30'></textarea>"
          }
        ]
      }
    ]
  },

  {
    "id": "c2",
    "name": "CSS",
    "tests": [
      {
        "id": "t1",
        "name": "CSS Basics",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "Which property is used to change the background color in CSS?",
            "options": ["background-color", "color", "bgcolor", "background"],
            "answer": "background-color"
          },
          {
            "id": 2,
            "question": "How do you select an element with id 'header' in CSS?",
            "options": ["#header", ".header", "*header", "header"],
            "answer": "#header"
          },
          {
            "id": 3,
            "question": "Which property controls the text size in CSS?",
            "options": ["font-size", "text-size", "font-style", "text-style"],
            "answer": "font-size"
          },
          {
            "id": 4,
            "question": "What does the 'float' property do in CSS?",
            "options": [
              "Positions elements left or right",
              "Changes text color",
              "Controls opacity",
              "Adjusts font weight"
            ],
            "answer": "Positions elements left or right"
          },
          {
            "id": 5,
            "question": "Which unit is relative to the font size of the root element?",
            "options": ["rem", "em", "px", "%"],
            "answer": "rem"
          },
          {
            "id": 6,
            "question": "Which CSS property is used to make text bold?",
            "options": [
              "font-weight",
              "font-style",
              "font-variant",
              "text-decoration"
            ],
            "answer": "font-weight"
          },
          {
            "id": 7,
            "question": "How do you apply a style only when a user hovers over an element?",
            "options": [":hover", ":active", ":focus", ":visited"],
            "answer": ":hover"
          },
          {
            "id": 8,
            "question": "Which property is used to change the spacing between lines of text?",
            "options": [
              "line-height",
              "letter-spacing",
              "word-spacing",
              "text-indent"
            ],
            "answer": "line-height"
          },
          {
            "id": 9,
            "question": "What is the default position value for HTML elements?",
            "options": ["static", "relative", "absolute", "fixed"],
            "answer": "static"
          },
          {
            "id": 10,
            "question": "Which property specifies the stack order of elements?",
            "options": ["z-index", "stack-order", "order", "position"],
            "answer": "z-index"
          },
          {
            "id": 11,
            "question": "How can you make a list that lists its items with squares?",
            "options": [
              "list-style-type: square;",
              "list-style: squares;",
              "list: square;",
              "list-type: square;"
            ],
            "answer": "list-style-type: square;"
          },
          {
            "id": 12,
            "question": "Which CSS property controls the element's transparency?",
            "options": ["opacity", "visibility", "filter", "transparency"],
            "answer": "opacity"
          },
          {
            "id": 13,
            "question": "How do you select all <p> elements inside a div?",
            "options": ["div p", "div > p", "p div", "div+p"],
            "answer": "div p"
          },
          {
            "id": 14,
            "question": "What does the 'box-sizing' property control?",
            "options": [
              "How width and height are calculated",
              "Element display type",
              "Padding size",
              "Border color"
            ],
            "answer": "How width and height are calculated"
          },
          {
            "id": 15,
            "question": "Which property is used to control the visibility of an element but keeps its space?",
            "options": ["visibility", "display", "opacity", "hidden"],
            "answer": "visibility"
          },
          {
            "id": 16,
            "question": "How do you write a comment in CSS?",
            "options": [
              "/* comment */",
              "// comment",
              "# comment",
              "<!-- comment -->"
            ],
            "answer": "/* comment */"
          },
          {
            "id": 17,
            "question": "Which property sets the distance between the border and the content inside an element?",
            "options": ["padding", "margin", "border-spacing", "spacing"],
            "answer": "padding"
          },
          {
            "id": 18,
            "question": "Which selector targets all elements with a class 'active'?",
            "options": [".active", "#active", "*active", "active"],
            "answer": ".active"
          },
          {
            "id": 19,
            "question": "Which property is used to add space between letters in text?",
            "options": [
              "letter-spacing",
              "word-spacing",
              "text-indent",
              "line-height"
            ],
            "answer": "letter-spacing"
          },
          {
            "id": 20,
            "question": "What does the 'flex-direction' property do in Flexbox?",
            "options": [
              "Defines the direction of flex items",
              "Sets the wrapping of flex items",
              "Aligns items vertically",
              "Controls the order of flex items"
            ],
            "answer": "Defines the direction of flex items"
          },
          {
            "id": 21,
            "question": "How do you center an element horizontally with margin?",
            "options": [
              "margin: 0 auto;",
              "margin: auto;",
              "margin: center;",
              "margin: 0 0 auto 0;"
            ],
            "answer": "margin: 0 auto;"
          },
          {
            "id": 22,
            "question": "Which CSS property is used to change the cursor when hovering over an element?",
            "options": ["cursor", "pointer", "hover", "mouse"],
            "answer": "cursor"
          },
          {
            "id": 23,
            "question": "Which property controls the order of flex items in Flexbox?",
            "options": ["order", "z-index", "flex-grow", "align-self"],
            "answer": "order"
          },
          {
            "id": 24,
            "question": "What value of 'position' makes an element stay fixed relative to the viewport?",
            "options": ["fixed", "absolute", "relative", "static"],
            "answer": "fixed"
          },
          {
            "id": 25,
            "question": "How do you specify multiple CSS classes on an element?",
            "options": [
              "class=\"class1 class2\"",
              "class=\"class1,class2\"",
              "class=\"class1;class2\"",
              "class=\"class1.class2\""
            ],
            "answer": "class=\"class1 class2\""
          },
          {
            "id": 26,
            "question": "Which CSS property is used to create rounded corners?",
            "options": [
              "border-radius",
              "corner-radius",
              "round-corners",
              "border-corner"
            ],
            "answer": "border-radius"
          },
          {
            "id": 27,
            "question": "What does the 'display: none;' declaration do?",
            "options": [
              "Hides the element and removes it from the layout",
              "Hides the element but keeps its space",
              "Makes the element invisible",
              "Disables the element"
            ],
            "answer": "Hides the element and removes it from the layout"
          },
          {
            "id": 28,
            "question": "Which CSS property specifies the font used for text?",
            "options": [
              "font-family",
              "font-style",
              "font-weight",
              "font-size"
            ],
            "answer": "font-family"
          },
          {
            "id": 29,
            "question": "Which pseudo-class applies styles to the first child element?",
            "options": [
              ":first-child",
              ":last-child",
              ":nth-child",
              ":only-child"
            ],
            "answer": ":first-child"
          },
          {
            "id": 30,
            "question": "Which property controls the gap between flex items?",
            "options": ["gap", "spacing", "margin", "padding"],
            "answer": "gap"
          },
          {
            "id": 31,
            "question": "What does the 'overflow: hidden;' property do?",
            "options": [
              "Clips content that overflows the element’s box",
              "Shows scrollbars when content overflows",
              "Makes content visible outside the box",
              "Sets element to be invisible"
            ],
            "answer": "Clips content that overflows the element’s box"
          },
          {
            "id": 32,
            "question": "How do you apply a style only to elements that are direct children?",
            "options": [
              "parent > child",
              "parent child",
              "parent + child",
              "parent ~ child"
            ],
            "answer": "parent > child"
          },
          {
            "id": 33,
            "question": "Which property is used to set the transparency of background colors using rgba?",
            "options": ["background-color", "opacity", "filter", "color"],
            "answer": "background-color"
          },
          {
            "id": 34,
            "question": "Which property changes the font style to italic?",
            "options": [
              "font-style",
              "font-weight",
              "font-variant",
              "font-size"
            ],
            "answer": "font-style"
          },
          {
            "id": 35,
            "question": "Which CSS property is used to control the vertical alignment of inline elements?",
            "options": [
              "vertical-align",
              "text-align",
              "line-height",
              "align-items"
            ],
            "answer": "vertical-align"
          }
        ]
      },
      {
        "id": "t2",
        "name": "CSS Beginner",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "Which property is used to change the background color in CSS?",
            "options": ["background-color", "color", "bgcolor", "background"],
            "answer": "background-color"
          },
          {
            "id": 2,
            "question": "How do you select an element with id 'header' in CSS?",
            "options": ["#header", ".header", "*header", "header"],
            "answer": "#header"
          },
          {
            "id": 3,
            "question": "Which property controls the text size in CSS?",
            "options": ["font-size", "text-size", "font-style", "text-style"],
            "answer": "font-size"
          },
          {
            "id": 4,
            "question": "What does the 'float' property do in CSS?",
            "options": [
              "Positions elements left or right",
              "Changes text color",
              "Controls opacity",
              "Adjusts font weight"
            ],
            "answer": "Positions elements left or right"
          },
          {
            "id": 5,
            "question": "Which unit is relative to the font size of the root element?",
            "options": ["rem", "em", "px", "%"],
            "answer": "rem"
          },
          {
            "id": 6,
            "question": "Which CSS property is used to make text bold?",
            "options": [
              "font-weight",
              "font-style",
              "font-variant",
              "text-decoration"
            ],
            "answer": "font-weight"
          },
          {
            "id": 7,
            "question": "How do you apply a style only when a user hovers over an element?",
            "options": [":hover", ":active", ":focus", ":visited"],
            "answer": ":hover"
          },
          {
            "id": 8,
            "question": "Which property is used to change the spacing between lines of text?",
            "options": [
              "line-height",
              "letter-spacing",
              "word-spacing",
              "text-indent"
            ],
            "answer": "line-height"
          },
          {
            "id": 9,
            "question": "What is the default position value for HTML elements?",
            "options": ["static", "relative", "absolute", "fixed"],
            "answer": "static"
          },
          {
            "id": 10,
            "question": "Which property specifies the stack order of elements?",
            "options": ["z-index", "stack-order", "order", "position"],
            "answer": "z-index"
          },
          {
            "id": 11,
            "question": "How can you make a list that lists its items with squares?",
            "options": [
              "list-style-type: square;",
              "list-style: squares;",
              "list: square;",
              "list-type: square;"
            ],
            "answer": "list-style-type: square;"
          },
          {
            "id": 12,
            "question": "Which CSS property controls the element's transparency?",
            "options": ["opacity", "visibility", "filter", "transparency"],
            "answer": "opacity"
          },
          {
            "id": 13,
            "question": "How do you select all <p> elements inside a div?",
            "options": ["div p", "div > p", "p div", "div+p"],
            "answer": "div p"
          },
          {
            "id": 14,
            "question": "What does the 'box-sizing' property control?",
            "options": [
              "How width and height are calculated",
              "Element display type",
              "Padding size",
              "Border color"
            ],
            "answer": "How width and height are calculated"
          },
          {
            "id": 15,
            "question": "Which property is used to control the visibility of an element but keeps its space?",
            "options": ["visibility", "display", "opacity", "hidden"],
            "answer": "visibility"
          },
          {
            "id": 16,
            "question": "How do you write a comment in CSS?",
            "options": [
              "/* comment */",
              "// comment",
              "# comment",
              "<!-- comment -->"
            ],
            "answer": "/* comment */"
          },
          {
            "id": 17,
            "question": "Which property sets the distance between the border and the content inside an element?",
            "options": ["padding", "margin", "border-spacing", "spacing"],
            "answer": "padding"
          },
          {
            "id": 18,
            "question": "Which selector targets all elements with a class 'active'?",
            "options": [".active", "#active", "*active", "active"],
            "answer": ".active"
          },
          {
            "id": 19,
            "question": "Which property is used to add space between letters in text?",
            "options": [
              "letter-spacing",
              "word-spacing",
              "text-indent",
              "line-height"
            ],
            "answer": "letter-spacing"
          },
          {
            "id": 20,
            "question": "What does the 'flex-direction' property do in Flexbox?",
            "options": [
              "Defines the direction of flex items",
              "Sets the wrapping of flex items",
              "Aligns items vertically",
              "Controls the order of flex items"
            ],
            "answer": "Defines the direction of flex items"
          },
          {
            "id": 21,
            "question": "How do you center an element horizontally with margin?",
            "options": [
              "margin: 0 auto;",
              "margin: auto;",
              "margin: center;",
              "margin: 0 0 auto 0;"
            ],
            "answer": "margin: 0 auto;"
          },
          {
            "id": 22,
            "question": "Which CSS property is used to change the cursor when hovering over an element?",
            "options": ["cursor", "pointer", "hover", "mouse"],
            "answer": "cursor"
          },
          {
            "id": 23,
            "question": "Which property controls the order of flex items in Flexbox?",
            "options": ["order", "z-index", "flex-grow", "align-self"],
            "answer": "order"
          },
          {
            "id": 24,
            "question": "What value of 'position' makes an element stay fixed relative to the viewport?",
            "options": ["fixed", "absolute", "relative", "static"],
            "answer": "fixed"
          },
          {
            "id": 25,
            "question": "How do you specify multiple CSS classes on an element?",
            "options": [
              "class=\"class1 class2\"",
              "class=\"class1,class2\"",
              "class=\"class1;class2\"",
              "class=\"class1.class2\""
            ],
            "answer": "class=\"class1 class2\""
          },
          {
            "id": 26,
            "question": "Which CSS property is used to create rounded corners?",
            "options": [
              "border-radius",
              "corner-radius",
              "round-corners",
              "border-corner"
            ],
            "answer": "border-radius"
          },
          {
            "id": 27,
            "question": "What does the 'display: none;' declaration do?",
            "options": [
              "Hides the element and removes it from the layout",
              "Hides the element but keeps its space",
              "Makes the element invisible",
              "Disables the element"
            ],
            "answer": "Hides the element and removes it from the layout"
          },
          {
            "id": 28,
            "question": "Which CSS property specifies the font used for text?",
            "options": [
              "font-family",
              "font-style",
              "font-weight",
              "font-size"
            ],
            "answer": "font-family"
          },
          {
            "id": 29,
            "question": "Which pseudo-class applies styles to the first child element?",
            "options": [
              ":first-child",
              ":last-child",
              ":nth-child",
              ":only-child"
            ],
            "answer": ":first-child"
          },
          {
            "id": 30,
            "question": "Which property controls the gap between flex items?",
            "options": ["gap", "spacing", "margin", "padding"],
            "answer": "gap"
          }
        ]
      },
      {
        "id": "t3",
        "name": "CSS Intermediate",
        "duration": 40,
        "questions": [
          {
            "id": 1,
            "question": "What does the 'calc()' function do in CSS?",
            "options": [
              "Performs calculations to determine CSS property values",
              "Calculates colors automatically",
              "Creates animations",
              "Calculates browser compatibility"
            ],
            "answer": "Performs calculations to determine CSS property values"
          },
          {
            "id": 2,
            "question": "Which CSS property controls the stacking context?",
            "options": ["z-index", "opacity", "position", "display"],
            "answer": "z-index"
          },
          {
            "id": 3,
            "question": "What does the 'object-fit' property do?",
            "options": [
              "Defines how an element's content fits within its box",
              "Controls font size relative to parent",
              "Sets box shadow style",
              "Aligns text inside a box"
            ],
            "answer": "Defines how an element's content fits within its box"
          },
          {
            "id": 4,
            "question": "How can you make a flex container wrap its items?",
            "options": [
              "flex-wrap: wrap;",
              "flex-direction: wrap;",
              "flex-flow: nowrap;",
              "wrap-items: true;"
            ],
            "answer": "flex-wrap: wrap;"
          },
          {
            "id": 5,
            "question": "Which pseudo-element lets you style the first letter of an element?",
            "options": [
              "::first-letter",
              "::first-line",
              "::before",
              "::after"
            ],
            "answer": "::first-letter"
          },
          {
            "id": 6,
            "question": "Which CSS function allows setting multiple backgrounds on one element?",
            "options": [
              "background-image",
              "multi-background",
              "bg-layer",
              "layered-bg"
            ],
            "answer": "background-image"
          },
          {
            "id": 7,
            "question": "How do you create a grid container?",
            "options": [
              "display: grid;",
              "display: flex;",
              "display: block;",
              "display: inline-grid;"
            ],
            "answer": "display: grid;"
          },
          {
            "id": 8,
            "question": "What does the 'minmax()' function do in CSS Grid?",
            "options": [
              "Sets a size range for grid tracks",
              "Sets minimum and maximum padding",
              "Defines min and max margin",
              "Controls responsive breakpoints"
            ],
            "answer": "Sets a size range for grid tracks"
          },
          {
            "id": 9,
            "question": "Which property controls the alignment of grid items along the row axis?",
            "options": [
              "justify-items",
              "align-items",
              "justify-content",
              "align-content"
            ],
            "answer": "justify-items"
          },
          {
            "id": 10,
            "question": "How do you make an element sticky to the top of the viewport?",
            "options": [
              "position: sticky; top: 0;",
              "position: fixed; top: 0;",
              "position: absolute; top: 0;",
              "position: relative; top: 0;"
            ],
            "answer": "position: sticky; top: 0;"
          },
          {
            "id": 11,
            "question": "Which unit is relative to the viewport width?",
            "options": ["vw", "vh", "rem", "em"],
            "answer": "vw"
          },
          {
            "id": 12,
            "question": "What does the 'pointer-events' property control?",
            "options": [
              "Whether an element can be the target of mouse events",
              "Cursor style",
              "Z-index stacking",
              "Visibility"
            ],
            "answer": "Whether an element can be the target of mouse events"
          },
          {
            "id": 13,
            "question": "Which property allows you to create smooth transitions between property changes?",
            "options": ["transition", "animation", "transform", "filter"],
            "answer": "transition"
          },
          {
            "id": 14,
            "question": "What does the CSS 'clamp()' function do?",
            "options": [
              "Sets a value between a min and max boundary",
              "Limits color range",
              "Sets opacity limits",
              "Restricts font weights"
            ],
            "answer": "Sets a value between a min and max boundary"
          },
          {
            "id": 15,
            "question": "Which CSS property can you use to control text overflow with an ellipsis?",
            "options": [
              "text-overflow",
              "white-space",
              "overflow-wrap",
              "word-break"
            ],
            "answer": "text-overflow"
          },
          {
            "id": 16,
            "question": "What value of 'display' creates a block-level flex container?",
            "options": ["flex", "inline-flex", "grid", "inline-grid"],
            "answer": "flex"
          },
          {
            "id": 17,
            "question": "How do you target every even child in a list?",
            "options": [
              ":nth-child(even)",
              ":nth-child(odd)",
              ":first-child",
              ":last-child"
            ],
            "answer": ":nth-child(even)"
          },
          {
            "id": 18,
            "question": "Which property controls whether flex items grow to fill space?",
            "options": ["flex-grow", "flex-shrink", "flex-basis", "flex-wrap"],
            "answer": "flex-grow"
          },
          {
            "id": 19,
            "question": "What is the default value of 'position' property?",
            "options": ["static", "relative", "absolute", "fixed"],
            "answer": "static"
          },
          {
            "id": 20,
            "question": "How do you apply a box shadow in CSS?",
            "options": [
              "box-shadow: 2px 2px 5px rgba(0,0,0,0.3);",
              "shadow-box: 2px 2px 5px rgba(0,0,0,0.3);",
              "text-shadow: 2px 2px 5px rgba(0,0,0,0.3);",
              "border-shadow: 2px 2px 5px rgba(0,0,0,0.3);"
            ],
            "answer": "box-shadow: 2px 2px 5px rgba(0,0,0,0.3);"
          },
          {
            "id": 21,
            "question": "Which property allows you to control the order of flex items?",
            "options": ["order", "z-index", "flex-grow", "flex-shrink"],
            "answer": "order"
          },
          {
            "id": 22,
            "question": "What is the effect of 'white-space: nowrap;'?",
            "options": [
              "Prevents line breaks within the text",
              "Allows text to wrap normally",
              "Removes all spaces",
              "Makes all text uppercase"
            ],
            "answer": "Prevents line breaks within the text"
          },
          {
            "id": 23,
            "question": "Which property is used to hide overflowing content but still show scrollbars?",
            "options": [
              "overflow: auto;",
              "overflow: hidden;",
              "overflow: visible;",
              "overflow: scroll;"
            ],
            "answer": "overflow: auto;"
          },
          {
            "id": 24,
            "question": "What is the effect of the CSS property 'filter: grayscale(100%);'?",
            "options": [
              "Makes the element appear black and white",
              "Blurs the element",
              "Increases brightness",
              "Applies a sepia tone"
            ],
            "answer": "Makes the element appear black and white"
          },
          {
            "id": 25,
            "question": "Which pseudo-class applies styles to elements when they are focused?",
            "options": [":focus", ":hover", ":active", ":visited"],
            "answer": ":focus"
          },
          {
            "id": 26,
            "question": "How do you make a grid item span two columns?",
            "options": [
              "grid-column: span 2;",
              "grid-row: span 2;",
              "grid-area: 2;",
              "grid-span: 2;"
            ],
            "answer": "grid-column: span 2;"
          },
          {
            "id": 27,
            "question": "Which CSS unit is relative to the height of the viewport?",
            "options": ["vh", "vw", "rem", "em"],
            "answer": "vh"
          },
          {
            "id": 28,
            "question": "What does 'align-self: center;' do in Flexbox?",
            "options": [
              "Centers a single flex item along the cross axis",
              "Centers all flex items",
              "Aligns items to the start",
              "Justifies content center"
            ],
            "answer": "Centers a single flex item along the cross axis"
          },
          {
            "id": 29,
            "question": "Which CSS property controls the gap between rows in a grid?",
            "options": ["row-gap", "column-gap", "grid-gap", "gap"],
            "answer": "row-gap"
          },
          {
            "id": 30,
            "question": "What is the purpose of 'content' property in ::before and ::after pseudo-elements?",
            "options": [
              "Inserts generated content",
              "Controls element visibility",
              "Sets the background image",
              "Adjusts font size"
            ],
            "answer": "Inserts generated content"
          }
        ]
      },

      {
        "id": "t4",
        "name": "CSS Advanced",
        "duration": 40,
        "questions": [
          {
            "id": 1,
            "question": "Which property is used for CSS animations?",
            "options": [
              "animation-name",
              "transition",
              "transform",
              "keyframes"
            ],
            "answer": "animation-name"
          },
          {
            "id": 2,
            "question": "What does the 'z-index' property do?",
            "options": [
              "Controls stack order of elements",
              "Sets opacity",
              "Changes font size",
              "Positions elements absolutely"
            ],
            "answer": "Controls stack order of elements"
          },
          {
            "id": 3,
            "question": "How do you apply a style to multiple selectors?",
            "options": [
              "Separate selectors with commas",
              "Use multiple classes",
              "Use multiple ids",
              "Nest selectors"
            ],
            "answer": "Separate selectors with commas"
          },
          {
            "id": 4,
            "question": "Which pseudo-class applies when a user mouses over an element?",
            "options": [":hover", ":focus", ":active", ":visited"],
            "answer": ":hover"
          },
          {
            "id": 5,
            "question": "Which CSS property controls the visibility of an element?",
            "options": ["visibility", "display", "opacity", "hidden"],
            "answer": "visibility"
          }
        ]
      },
      {
        "id": "t5",
        "name": "CSS Expert",
        "duration": 45,
        "questions": [
          {
            "id": 1,
            "question": "Which CSS property is used to control the space between lines of text?",
            "options": [
              "line-height",
              "letter-spacing",
              "text-spacing",
              "word-spacing"
            ],
            "answer": "line-height"
          },
          {
            "id": 2,
            "question": "What is the default position value of an HTML element?",
            "options": ["static", "relative", "absolute", "fixed"],
            "answer": "static"
          },
          {
            "id": 3,
            "question": "Which pseudo-element is used to style the first letter of a text block?",
            "options": [
              ":first-letter",
              ":first-line",
              ":first-child",
              ":first"
            ],
            "answer": ":first-letter"
          },
          {
            "id": 4,
            "question": "How do you make a flex container wrap its items to the next line?",
            "options": [
              "flex-wrap: wrap;",
              "flex-flow: nowrap;",
              "flex-direction: row;",
              "flex-wrap: nowrap;"
            ],
            "answer": "flex-wrap: wrap;"
          },
          {
            "id": 5,
            "question": "What does the 'inherit' value do in CSS?",
            "options": [
              "Inherits property from its parent element",
              "Sets property to default browser value",
              "Overrides all styles",
              "Sets property to none"
            ],
            "answer": "Inherits property from its parent element"
          }
        ]
      },
      {
        "id": "t6",
        "name": "CSS Coding Questions",
        "duration": 60,
        "questions": [
          {
            "id": 1,
            "question": "How do you select all paragraphs inside a div with class 'container'?",
            "options": [
              "div.container p",
              ".container > p",
              "p.container",
              "div > p.container"
            ],
            "answer": "div.container p"
          },
          {
            "id": 2,
            "question": "What is the CSS syntax to set the background color to blue?",
            "options": [
              "background-color: blue;",
              "bg-color: blue;",
              "color-background: blue;",
              "background: blue-color;"
            ],
            "answer": "background-color: blue;"
          },
          {
            "id": 3,
            "question": "How do you apply a style only on hover of a button?",
            "options": [":hover", ":focus", ":active", ":visited"],
            "answer": ":hover"
          },
          {
            "id": 4,
            "question": "Which property controls the space between lines of text?",
            "options": [
              "line-height",
              "letter-spacing",
              "word-spacing",
              "text-indent"
            ],
            "answer": "line-height"
          },
          {
            "id": 5,
            "question": "How can you make a list with no bullets?",
            "options": [
              "list-style-type: none;",
              "list-style: no-bullets;",
              "list: none;",
              "list-style-type: hide;"
            ],
            "answer": "list-style-type: none;"
          },
          {
            "id": 6,
            "question": "How to center a block element horizontally?",
            "options": [
              "margin: 0 auto;",
              "text-align: center;",
              "padding: 0 auto;",
              "center: true;"
            ],
            "answer": "margin: 0 auto;"
          },
          {
            "id": 7,
            "question": "What does 'display: flex;' do?",
            "options": [
              "Creates a flexible box layout",
              "Creates a grid layout",
              "Hides the element",
              "Makes element inline"
            ],
            "answer": "Creates a flexible box layout"
          },
          {
            "id": 8,
            "question": "Which property is used to add space inside the border of an element?",
            "options": ["padding", "margin", "border-spacing", "spacing"],
            "answer": "padding"
          },
          {
            "id": 9,
            "question": "How do you make text bold?",
            "options": [
              "font-weight: bold;",
              "text-weight: bold;",
              "font-style: bold;",
              "text-bold: true;"
            ],
            "answer": "font-weight: bold;"
          },
          {
            "id": 10,
            "question": "Which selector selects an element with id 'main'?",
            "options": ["#main", ".main", "main", "*main"],
            "answer": "#main"
          },
          {
            "id": 11,
            "question": "What does 'position: absolute;' mean?",
            "options": [
              "Element is positioned relative to its nearest positioned ancestor",
              "Element is positioned relative to the viewport",
              "Element is static",
              "Element floats left"
            ],
            "answer": "Element is positioned relative to its nearest positioned ancestor"
          },
          {
            "id": 12,
            "question": "How do you create a grid container?",
            "options": [
              "display: grid;",
              "display: flex;",
              "display: block;",
              "display: inline-block;"
            ],
            "answer": "display: grid;"
          },
          {
            "id": 13,
            "question": "What property sets the transparency level of an element?",
            "options": ["opacity", "visibility", "filter", "alpha"],
            "answer": "opacity"
          },
          {
            "id": 14,
            "question": "How do you make an element take the full width of its parent?",
            "options": [
              "width: 100%;",
              "width: auto;",
              "width: full;",
              "width: 1;"
            ],
            "answer": "width: 100%;"
          },
          {
            "id": 15,
            "question": "What does 'z-index' control?",
            "options": [
              "Stack order of elements",
              "Font size",
              "Padding size",
              "Border thickness"
            ],
            "answer": "Stack order of elements"
          },
          {
            "id": 16,
            "question": "Which property controls the space between words in a text?",
            "options": [
              "word-spacing",
              "letter-spacing",
              "line-height",
              "text-indent"
            ],
            "answer": "word-spacing"
          },
          {
            "id": 17,
            "question": "What does the 'float' property do?",
            "options": [
              "Positions an element to the left or right",
              "Changes text color",
              "Controls visibility",
              "Adds margin"
            ],
            "answer": "Positions an element to the left or right"
          },
          {
            "id": 18,
            "question": "How do you write a comment in CSS?",
            "options": [
              "/* comment */",
              "// comment",
              "# comment",
              "<!-- comment -->"
            ],
            "answer": "/* comment */"
          },
          {
            "id": 19,
            "question": "How do you select all elements with the class 'active'?",
            "options": [".active", "#active", "*active", "active"],
            "answer": ".active"
          },
          {
            "id": 20,
            "question": "What is the default display value for a <span> element?",
            "options": ["inline", "block", "inline-block", "none"],
            "answer": "inline"
          },
          {
            "id": 21,
            "question": "Which property controls the size of the font?",
            "options": ["font-size", "text-size", "font-weight", "text-style"],
            "answer": "font-size"
          },
          {
            "id": 22,
            "question": "How do you make an element visible but not interactable?",
            "options": [
              "pointer-events: none;",
              "visibility: hidden;",
              "display: none;",
              "opacity: 0;"
            ],
            "answer": "pointer-events: none;"
          },
          {
            "id": 23,
            "question": "How do you apply a style to the first child element?",
            "options": [
              ":first-child",
              ":last-child",
              ":nth-child(1)",
              ":only-child"
            ],
            "answer": ":first-child"
          },
          {
            "id": 24,
            "question": "Which property controls the gap between grid columns?",
            "options": ["column-gap", "row-gap", "gap", "grid-gap"],
            "answer": "column-gap"
          },
          {
            "id": 25,
            "question": "What does 'display: none;' do?",
            "options": [
              "Hides element and removes it from layout",
              "Hides element but keeps space",
              "Makes element invisible but clickable",
              "Disables element"
            ],
            "answer": "Hides element and removes it from layout"
          },
          {
            "id": 26,
            "question": "How do you make text uppercase?",
            "options": [
              "text-transform: uppercase;",
              "text-style: uppercase;",
              "text-case: upper;",
              "font-variant: uppercase;"
            ],
            "answer": "text-transform: uppercase;"
          },
          {
            "id": 27,
            "question": "What is the difference between 'em' and 'rem' units?",
            "options": [
              "'em' is relative to parent font size, 'rem' is relative to root font size",
              "'em' is fixed size, 'rem' is relative",
              "'em' is absolute unit, 'rem' is percentage",
              "'em' and 'rem' are the same"
            ],
            "answer": "'em' is relative to parent font size, 'rem' is relative to root font size"
          },
          {
            "id": 28,
            "question": "Which property adds a shadow behind an element?",
            "options": [
              "box-shadow",
              "text-shadow",
              "shadow",
              "element-shadow"
            ],
            "answer": "box-shadow"
          },
          {
            "id": 29,
            "question": "How do you make a grid item span 2 columns?",
            "options": [
              "grid-column: span 2;",
              "grid-row: span 2;",
              "grid-area: span 2;",
              "grid-span: 2;"
            ],
            "answer": "grid-column: span 2;"
          },
          {
            "id": 30,
            "question": "What does the 'overflow' property do?",
            "options": [
              "Controls what happens when content overflows an element’s box",
              "Sets margin outside the element",
              "Defines padding inside the element",
              "Sets the element's height"
            ],
            "answer": "Controls what happens when content overflows an element’s box"
          },
          {
            "id": 31,
            "question": "How to apply a Google Font in CSS?",
            "options": [
              "@import url('https://fonts.googleapis.com/css?family=Roboto');",
              "font-family: 'Roboto', sans-serif;",
              "Both A and B",
              "Only B"
            ],
            "answer": "Both A and B"
          },
          {
            "id": 32,
            "question": "Which property controls the space between letters?",
            "options": [
              "letter-spacing",
              "word-spacing",
              "text-indent",
              "line-height"
            ],
            "answer": "letter-spacing"
          },
          {
            "id": 33,
            "question": "How to apply a linear gradient background?",
            "options": [
              "background: linear-gradient(to right, red, blue);",
              "background-gradient: linear(to right, red, blue);",
              "gradient-background: linear(red, blue);",
              "background-style: gradient;"
            ],
            "answer": "background: linear-gradient(to right, red, blue);"
          },
          {
            "id": 34,
            "question": "How to make an element fully responsive to viewport width?",
            "options": [
              "width: 100vw;",
              "width: 100%;",
              "max-width: 100%;",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 35,
            "question": "Which property controls the cursor appearance when hovering over an element?",
            "options": ["cursor", "pointer", "hover", "mouse"],
            "answer": "cursor"
          },
          {
            "id": 36,
            "question": "What does the 'flex-grow' property do?",
            "options": [
              "Allows flex items to grow to fill available space",
              "Shrinks the flex items",
              "Sets the flex basis",
              "Controls flex direction"
            ],
            "answer": "Allows flex items to grow to fill available space"
          },
          {
            "id": 37,
            "question": "How to clear floats in CSS?",
            "options": [
              "clearfix hack with ::after pseudo-element",
              "overflow: hidden;",
              "display: flow-root;",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 38,
            "question": "Which property is used for responsive design breakpoints?",
            "options": ["@media", "@screen", "@breakpoint", "@responsive"],
            "answer": "@media"
          },
          {
            "id": 39,
            "question": "What is the default value of the 'display' property?",
            "options": ["inline", "block", "none", "inline-block"],
            "answer": "inline"
          },
          {
            "id": 40,
            "question": "Which property controls the vertical alignment of inline elements?",
            "options": [
              "vertical-align",
              "text-align",
              "align-items",
              "justify-content"
            ],
            "answer": "vertical-align"
          }
        ]
      }
    ]
  },

  {
    "id": "c3",
    "name": "JavaScript",
    "tests": [
      {
        "id": "t1",
        "name": "JS Basics",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "Which keyword is used to declare a variable in JavaScript?",
            "options": ["var", "let", "const", "All of the above"],
            "answer": "All of the above"
          },
          {
            "id": 2,
            "question": "What is the output of 'typeof null' in JavaScript?",
            "options": ["null", "object", "undefined", "number"],
            "answer": "object"
          },
          {
            "id": 3,
            "question": "Which method converts a JSON string to a JavaScript object?",
            "options": [
              "JSON.parse()",
              "JSON.stringify()",
              "JSON.convert()",
              "JSON.toObject()"
            ],
            "answer": "JSON.parse()"
          },
          {
            "id": 4,
            "question": "What does the '===' operator check?",
            "options": [
              "Value equality",
              "Type equality",
              "Both value and type equality",
              "Neither"
            ],
            "answer": "Both value and type equality"
          },
          {
            "id": 5,
            "question": "Which function is used to delay execution in JavaScript?",
            "options": ["setTimeout()", "delay()", "wait()", "sleep()"],
            "answer": "setTimeout()"
          },
          {
            "id": 6,
            "question": "How do you create an array in JavaScript?",
            "options": [
              "var arr = [];",
              "var arr = ();",
              "var arr = {};",
              "var arr = <>;"
            ],
            "answer": "var arr = [];"
          },
          {
            "id": 7,
            "question": "What will 'console.log(2 + '2');' output?",
            "options": ["4", "22", "Error", "NaN"],
            "answer": "22"
          },
          {
            "id": 8,
            "question": "Which method removes the last element from an array?",
            "options": ["pop()", "push()", "shift()", "unshift()"],
            "answer": "pop()"
          },
          {
            "id": 9,
            "question": "What is a closure in JavaScript?",
            "options": [
              "A function with access to its outer scope",
              "An object that stores data",
              "A loop inside a function",
              "A special variable type"
            ],
            "answer": "A function with access to its outer scope"
          },
          {
            "id": 10,
            "question": "How do you write a comment in JavaScript?",
            "options": [
              "// single line comment",
              "/* multi-line comment */",
              "Both A and B",
              "<!-- comment -->"
            ],
            "answer": "Both A and B"
          },
          {
            "id": 11,
            "question": "What does 'NaN' stand for?",
            "options": [
              "Not a Number",
              "Null and Nothing",
              "No Array Number",
              "Name a Number"
            ],
            "answer": "Not a Number"
          },
          {
            "id": 12,
            "question": "Which symbol is used for strict equality in JavaScript?",
            "options": ["===", "==", "=", "!=="],
            "answer": "==="
          },
          {
            "id": 13,
            "question": "What is the type of an undeclared variable?",
            "options": ["undefined", "null", "object", "error"],
            "answer": "undefined"
          },
          {
            "id": 14,
            "question": "What is the output of 'Boolean(0)'?",
            "options": ["false", "true", "0", "undefined"],
            "answer": "false"
          },
          {
            "id": 15,
            "question": "Which of the following is NOT a JavaScript loop?",
            "options": ["for", "while", "foreach", "do-while"],
            "answer": "foreach"
          },
          {
            "id": 16,
            "question": "How do you declare a function named 'sum'?",
            "options": [
              "function sum() {}",
              "func sum() {}",
              "function: sum() {}",
              "def sum() {}"
            ],
            "answer": "function sum() {}"
          },
          {
            "id": 17,
            "question": "Which operator is used to assign a value?",
            "options": ["=", "==", "===", ":"],
            "answer": "="
          },
          {
            "id": 18,
            "question": "What will be the output of: 'typeof []'?",
            "options": ["object", "array", "undefined", "null"],
            "answer": "object"
          },
          {
            "id": 19,
            "question": "How do you add an element at the beginning of an array?",
            "options": ["unshift()", "push()", "pop()", "shift()"],
            "answer": "unshift()"
          },
          {
            "id": 20,
            "question": "What will 'typeof function(){}' return?",
            "options": ["function", "object", "undefined", "string"],
            "answer": "function"
          },
          {
            "id": 21,
            "question": "Which statement is used to stop a loop?",
            "options": ["break", "continue", "stop", "return"],
            "answer": "break"
          },
          {
            "id": 22,
            "question": "What does JSON stand for?",
            "options": [
              "JavaScript Object Notation",
              "Java Standard Output Network",
              "JavaScript Output Node",
              "Java Source Open Network"
            ],
            "answer": "JavaScript Object Notation"
          },
          {
            "id": 23,
            "question": "Which keyword defines a constant variable?",
            "options": ["const", "let", "var", "static"],
            "answer": "const"
          },
          {
            "id": 24,
            "question": "What is the output of 'typeof NaN'?",
            "options": ["number", "NaN", "undefined", "object"],
            "answer": "number"
          },
          {
            "id": 25,
            "question": "Which method adds an item at the end of an array?",
            "options": ["push()", "pop()", "shift()", "unshift()"],
            "answer": "push()"
          },
          {
            "id": 26,
            "question": "What does the 'this' keyword refer to in a regular function?",
            "options": [
              "The object that called the function",
              "Global object",
              "Undefined",
              "The function itself"
            ],
            "answer": "The object that called the function"
          },
          {
            "id": 27,
            "question": "What does 'NaN === NaN' evaluate to?",
            "options": ["false", "true", "undefined", "Error"],
            "answer": "false"
          },
          {
            "id": 28,
            "question": "How do you declare an arrow function?",
            "options": [
              "() => {}",
              "function => {}",
              "func () {}",
              "arrow function() {}"
            ],
            "answer": "() => {}"
          },
          {
            "id": 29,
            "question": "What will '0 == false' return?",
            "options": ["true", "false", "undefined", "Error"],
            "answer": "true"
          },
          {
            "id": 30,
            "question": "What method is used to convert a number to a string?",
            "options": [
              "toString()",
              "parseInt()",
              "toNumber()",
              "stringify()"
            ],
            "answer": "toString()"
          },
          {
            "id": 31,
            "question": "Which of these is a falsy value in JavaScript?",
            "options": ["0", "'0'", "NaN", "Both 0 and NaN"],
            "answer": "Both 0 and NaN"
          },
          {
            "id": 32,
            "question": "How can you check if a variable is an array?",
            "options": [
              "Array.isArray(variable)",
              "typeof variable === 'array'",
              "variable instanceof Array",
              "Both A and C"
            ],
            "answer": "Both A and C"
          },
          {
            "id": 33,
            "question": "What is event bubbling in JavaScript?",
            "options": [
              "Event propagates from child to parent",
              "Event propagates from parent to child",
              "Event triggers only once",
              "Event stops propagation"
            ],
            "answer": "Event propagates from child to parent"
          },
          {
            "id": 34,
            "question": "Which symbol is used for single-line comments?",
            "options": ["//", "/*", "#", "<!--"],
            "answer": "//"
          },
          {
            "id": 35,
            "question": "What does the 'new' keyword do?",
            "options": [
              "Creates a new object instance",
              "Declares a variable",
              "Defines a function",
              "Calls a function"
            ],
            "answer": "Creates a new object instance"
          },
          {
            "id": 36,
            "question": "Which of the following is NOT a primitive data type?",
            "options": ["Object", "String", "Number", "Boolean"],
            "answer": "Object"
          },
          {
            "id": 37,
            "question": "How do you round a number to the nearest integer?",
            "options": [
              "Math.round()",
              "Math.floor()",
              "Math.ceil()",
              "round()"
            ],
            "answer": "Math.round()"
          },
          {
            "id": 38,
            "question": "Which statement creates a new scope in JavaScript?",
            "options": ["function", "if", "for", "while"],
            "answer": "function"
          },
          {
            "id": 39,
            "question": "How do you convert a string to a number?",
            "options": [
              "Number()",
              "parseInt()",
              "parseFloat()",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 40,
            "question": "Which method removes whitespace from both ends of a string?",
            "options": ["trim()", "strip()", "clean()", "remove()"],
            "answer": "trim()"
          }
        ]
      },
      {
        "id": "t2",
        "name": "JS Beginner",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "What is JavaScript primarily used for?",
            "options": [
              "Styling web pages",
              "Creating web page structure",
              "Adding interactivity to web pages",
              "Storing data"
            ],
            "answer": "Adding interactivity to web pages"
          },
          {
            "id": 2,
            "question": "How do you declare a variable in JavaScript?",
            "options": ["variable x;", "var x;", "dim x;", "declare x;"],
            "answer": "var x;"
          },
          {
            "id": 3,
            "question": "Which symbol is used to end a statement in JavaScript?",
            "options": [".", ";", ":", ","],
            "answer": ";"
          },
          {
            "id": 4,
            "question": "Which keyword is used to define a function?",
            "options": ["func", "function", "def", "fun"],
            "answer": "function"
          },
          {
            "id": 5,
            "question": "How do you write a comment in JavaScript?",
            "options": [
              "// This is a comment",
              "/* This is a comment */",
              "# This is a comment",
              "Both A and B"
            ],
            "answer": "Both A and B"
          },
          {
            "id": 6,
            "question": "Which method is used to output something to the web console?",
            "options": ["console.print()", "console.log()", "print()", "log()"],
            "answer": "console.log()"
          },
          {
            "id": 7,
            "question": "How do you create an array in JavaScript?",
            "options": [
              "var arr = [];",
              "var arr = {};",
              "var arr = ();",
              "var arr = <>;"
            ],
            "answer": "var arr = [];"
          },
          {
            "id": 8,
            "question": "How do you access the first element in an array named 'arr'?",
            "options": ["arr[1]", "arr[0]", "arr.first", "arr.get(0)"],
            "answer": "arr[0]"
          },
          {
            "id": 9,
            "question": "What will this code output?\n\nconsole.log(typeof 42);",
            "options": ["number", "string", "object", "undefined"],
            "answer": "number"
          },
          {
            "id": 10,
            "question": "What operator is used to compare two values for equality?",
            "options": ["=", "==", "===", "!="],
            "answer": "=="
          },
          {
            "id": 11,
            "question": "Which of these is a JavaScript data type?",
            "options": ["int", "float", "boolean", "char"],
            "answer": "boolean"
          },
          {
            "id": 12,
            "question": "What is the correct syntax to create a new object?",
            "options": [
              "var obj = {}",
              "var obj = []",
              "var obj = ()",
              "var obj = ''"
            ],
            "answer": "var obj = {}"
          },
          {
            "id": 13,
            "question": "Which of these is used to execute code repeatedly?",
            "options": ["if", "for", "switch", "function"],
            "answer": "for"
          },
          {
            "id": 14,
            "question": "Which keyword is used to stop a loop?",
            "options": ["exit", "stop", "break", "return"],
            "answer": "break"
          },
          {
            "id": 15,
            "question": "What does 'NaN' stand for?",
            "options": [
              "Not a Number",
              "Null and Nothing",
              "No Array Number",
              "Name a Number"
            ],
            "answer": "Not a Number"
          },
          {
            "id": 16,
            "question": "How do you add a comment that spans multiple lines?",
            "options": [
              "/* This is a comment */",
              "// This is a comment",
              "<!-- This is a comment -->",
              "# This is a comment"
            ],
            "answer": "/* This is a comment */"
          },
          {
            "id": 17,
            "question": "Which method adds an element to the end of an array?",
            "options": ["pop()", "push()", "shift()", "unshift()"],
            "answer": "push()"
          },
          {
            "id": 18,
            "question": "What keyword is used to declare a constant variable?",
            "options": ["const", "let", "var", "final"],
            "answer": "const"
          },
          {
            "id": 19,
            "question": "Which of these is a falsy value?",
            "options": ["false", "0", "'' (empty string)", "All of the above"],
            "answer": "All of the above"
          },
          {
            "id": 20,
            "question": "How do you convert a string '123' to a number?",
            "options": [
              "parseInt('123')",
              "Number('123')",
              "+'123'",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 21,
            "question": "What does the 'typeof' operator return?",
            "options": [
              "The type of a variable",
              "The value of a variable",
              "The size of a variable",
              "The scope of a variable"
            ],
            "answer": "The type of a variable"
          },
          {
            "id": 22,
            "question": "How do you declare a JavaScript function named 'hello'?",
            "options": [
              "function hello() {}",
              "def hello() {}",
              "func hello() {}",
              "function: hello() {}"
            ],
            "answer": "function hello() {}"
          },
          {
            "id": 23,
            "question": "How do you write an 'if' statement in JavaScript?",
            "options": [
              "if (condition) {}",
              "if condition {}",
              "if condition then {}",
              "if: condition {}"
            ],
            "answer": "if (condition) {}"
          },
          {
            "id": 24,
            "question": "How do you create a string in JavaScript?",
            "options": ["'Hello'", "\"Hello\"", "`Hello`", "All of the above"],
            "answer": "All of the above"
          },
          {
            "id": 25,
            "question": "What is the purpose of 'return' in a function?",
            "options": [
              "Stops the function and returns a value",
              "Exits the program",
              "Prints output",
              "Declares a variable"
            ],
            "answer": "Stops the function and returns a value"
          },
          {
            "id": 26,
            "question": "Which of the following is the correct way to declare a variable that can change its value?",
            "options": ["let", "const", "var", "Both let and var"],
            "answer": "Both let and var"
          },
          {
            "id": 27,
            "question": "Which operator is used for addition?",
            "options": ["+", "-", "*", "/"],
            "answer": "+"
          },
          {
            "id": 28,
            "question": "What will 'console.log(1 + '1');' output?",
            "options": ["2", "'11'", "Error", "'2'"],
            "answer": "'11'"
          },
          {
            "id": 29,
            "question": "How do you convert a number to a string?",
            "options": [
              "toString()",
              "String()",
              "Both A and B",
              "None of these"
            ],
            "answer": "Both A and B"
          },
          {
            "id": 30,
            "question": "Which function converts a string to uppercase?",
            "options": ["toUpperCase()", "toUpper()", "uppercase()", "upper()"],
            "answer": "toUpperCase()"
          }
        ]
      },
      {
        "id": "t3",
        "name": "JS Intermediate",
        "duration": 40,
        "questions": [
          {
            "id": 1,
            "question": "What is a JavaScript Promise?",
            "options": [
              "An object representing eventual completion or failure of async operation",
              "A synchronous function",
              "A type of variable",
              "A DOM event"
            ],
            "answer": "An object representing eventual completion or failure of async operation"
          },
          {
            "id": 2,
            "question": "Which method is used to handle a resolved Promise?",
            "options": [".then()", ".catch()", ".finally()", ".resolve()"],
            "answer": ".then()"
          },
          {
            "id": 3,
            "question": "What does 'async/await' help with?",
            "options": [
              "Simplifying asynchronous code syntax",
              "Creating synchronous code",
              "Making code run faster",
              "None of the above"
            ],
            "answer": "Simplifying asynchronous code syntax"
          },
          {
            "id": 4,
            "question": "What will be the output of this code?\n\nconsole.log(typeof NaN);",
            "options": ["number", "NaN", "undefined", "object"],
            "answer": "number"
          },
          {
            "id": 5,
            "question": "Which method creates a shallow copy of an object?",
            "options": [
              "Object.assign()",
              "JSON.parse()",
              "Object.create()",
              "Object.freeze()"
            ],
            "answer": "Object.assign()"
          },
          {
            "id": 6,
            "question": "What is the difference between '==' and '==='?",
            "options": [
              "'==' checks value equality, '===' checks value and type",
              "'==' checks type equality, '===' checks value equality",
              "They are the same",
              "Neither checks equality"
            ],
            "answer": "'==' checks value equality, '===' checks value and type"
          },
          {
            "id": 7,
            "question": "How do you create a new object without prototype?",
            "options": [
              "Object.create(null)",
              "{}",
              "new Object()",
              "Object.new()"
            ],
            "answer": "Object.create(null)"
          },
          {
            "id": 8,
            "question": "What does 'this' keyword refer to inside an arrow function?",
            "options": [
              "Lexical this from surrounding code",
              "Global object",
              "Undefined",
              "The arrow function itself"
            ],
            "answer": "Lexical this from surrounding code"
          },
          {
            "id": 9,
            "question": "Which method removes duplicates from an array?",
            "options": [
              "[...new Set(array)]",
              "array.unique()",
              "array.removeDuplicates()",
              "array.distinct()"
            ],
            "answer": "[...new Set(array)]"
          },
          {
            "id": 10,
            "question": "What will be the output of this code?\n\nconsole.log(0.1 + 0.2 === 0.3);",
            "options": ["false", "true", "undefined", "Error"],
            "answer": "false"
          },
          {
            "id": 11,
            "question": "What is event delegation?",
            "options": [
              "Attaching a single event listener to a parent element",
              "Removing event listeners",
              "Using inline event handlers",
              "None of the above"
            ],
            "answer": "Attaching a single event listener to a parent element"
          },
          {
            "id": 12,
            "question": "Which operator is used to spread elements of an array?",
            "options": ["...", "+", "...=", "spread"],
            "answer": "..."
          },
          {
            "id": 13,
            "question": "What is the output of:\n\nconsole.log(typeof null);",
            "options": ["object", "null", "undefined", "boolean"],
            "answer": "object"
          },
          {
            "id": 14,
            "question": "Which of the following is NOT a way to clone an object?",
            "options": [
              "JSON.parse(JSON.stringify(obj))",
              "Object.assign({}, obj)",
              "obj.clone()",
              "Spread operator {...obj}"
            ],
            "answer": "obj.clone()"
          },
          {
            "id": 15,
            "question": "What does the 'bind' method do?",
            "options": [
              "Creates a new function with 'this' bound to provided value",
              "Calls a function immediately",
              "Delays function execution",
              "Creates a promise"
            ],
            "answer": "Creates a new function with 'this' bound to provided value"
          },
          {
            "id": 16,
            "question": "How do you check if a property exists in an object?",
            "options": [
              "'prop' in obj",
              "obj.hasOwnProperty('prop')",
              "obj.prop !== undefined",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 17,
            "question": "What is a generator function?",
            "options": [
              "A function that can pause and resume execution",
              "A function that returns promises",
              "A function that runs asynchronously",
              "None of the above"
            ],
            "answer": "A function that can pause and resume execution"
          },
          {
            "id": 18,
            "question": "How to make an object immutable?",
            "options": [
              "Object.freeze(obj)",
              "Object.seal(obj)",
              "Object.preventExtensions(obj)",
              "None of the above"
            ],
            "answer": "Object.freeze(obj)"
          },
          {
            "id": 19,
            "question": "What is the output of this?\n\nconsole.log([] + []);",
            "options": ["''", "0", "undefined", "Error"],
            "answer": "''"
          },
          {
            "id": 20,
            "question": "How do you cancel a timeout set by setTimeout()?",
            "options": [
              "clearTimeout(id)",
              "cancelTimeout(id)",
              "stopTimeout(id)",
              "removeTimeout(id)"
            ],
            "answer": "clearTimeout(id)"
          },
          {
            "id": 21,
            "question": "Which of these is NOT a valid JavaScript data type?",
            "options": ["Symbol", "BigInt", "Character", "Undefined"],
            "answer": "Character"
          },
          {
            "id": 22,
            "question": "What is the purpose of 'use strict'?",
            "options": [
              "Enables strict mode to catch common coding bugs",
              "Allows use of new JS features",
              "Disables certain functions",
              "Optimizes performance"
            ],
            "answer": "Enables strict mode to catch common coding bugs"
          },
          {
            "id": 23,
            "question": "What will this code output?\n\nconsole.log(typeof (function(){}));",
            "options": ["function", "object", "undefined", "error"],
            "answer": "function"
          },
          {
            "id": 24,
            "question": "How do you convert a string '123' to a number?",
            "options": [
              "Number('123')",
              "parseInt('123')",
              "+ '123'",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 25,
            "question": "Which of these methods merges two arrays?",
            "options": ["concat()", "merge()", "append()", "add()"],
            "answer": "concat()"
          },
          {
            "id": 26,
            "question": "What is the output of this?\n\nconsole.log(!!'false');",
            "options": ["true", "false", "undefined", "Error"],
            "answer": "true"
          },
          {
            "id": 27,
            "question": "Which method can be used to debounce a function?",
            "options": [
              "Using setTimeout and clearTimeout",
              "setInterval",
              "Promise",
              "requestAnimationFrame"
            ],
            "answer": "Using setTimeout and clearTimeout"
          },
          {
            "id": 28,
            "question": "What does the 'typeof' operator return for arrays?",
            "options": ["object", "array", "undefined", "function"],
            "answer": "object"
          },
          {
            "id": 29,
            "question": "What is the output of this?\n\nconsole.log(typeof Symbol('id'));",
            "options": ["symbol", "string", "object", "undefined"],
            "answer": "symbol"
          },
          {
            "id": 30,
            "question": "What does the 'new' keyword do in JavaScript?",
            "options": [
              "Creates an instance of a user-defined object type",
              "Declares a new variable",
              "Calls a function immediately",
              "Creates a new array"
            ],
            "answer": "Creates an instance of a user-defined object type"
          }
        ]
      },
      {
        "id": "t4",
        "name": "JS Advanced",
        "duration": 50,
        "questions": [
          {
            "id": 1,
            "question": "What is a closure in JavaScript?",
            "options": [
              "A function with access to variables from its outer scope",
              "A function without parameters",
              "An immediately invoked function",
              "A function that returns another function"
            ],
            "answer": "A function with access to variables from its outer scope"
          },
          {
            "id": 2,
            "question": "What is the output of this code?\n\nconsole.log(typeof (function*(){}));",
            "options": ["function", "generator", "object", "undefined"],
            "answer": "function"
          },
          {
            "id": 3,
            "question": "What is the purpose of the 'Symbol' type?",
            "options": [
              "To create unique identifiers",
              "To represent a string",
              "To store numbers",
              "To declare variables"
            ],
            "answer": "To create unique identifiers"
          },
          {
            "id": 4,
            "question": "What does the 'Proxy' object do?",
            "options": [
              "Defines custom behavior for fundamental operations on objects",
              "Wraps a function",
              "Creates a new object type",
              "None of the above"
            ],
            "answer": "Defines custom behavior for fundamental operations on objects"
          },
          {
            "id": 5,
            "question": "What is the difference between 'call' and 'apply' methods?",
            "options": [
              "'call' accepts arguments individually, 'apply' accepts arguments as an array",
              "'call' calls functions asynchronously, 'apply' synchronously",
              "Both are the same",
              "None of the above"
            ],
            "answer": "'call' accepts arguments individually, 'apply' accepts arguments as an array"
          },
          {
            "id": 6,
            "question": "What is the event loop in JavaScript?",
            "options": [
              "Mechanism that handles asynchronous callbacks",
              "A method for looping through arrays",
              "A JavaScript library",
              "An object for managing events"
            ],
            "answer": "Mechanism that handles asynchronous callbacks"
          },
          {
            "id": 7,
            "question": "What will this code output?\n\nconsole.log(0 || '' && null || 'Hello');",
            "options": ["Hello", "null", "''", "0"],
            "answer": "Hello"
          },
          {
            "id": 8,
            "question": "What are 'WeakMap' and 'WeakSet' used for?",
            "options": [
              "Objects that hold weak references to keys to prevent memory leaks",
              "Objects for storing primitive data",
              "Arrays with weak typing",
              "None of the above"
            ],
            "answer": "Objects that hold weak references to keys to prevent memory leaks"
          },
          {
            "id": 9,
            "question": "Which of the following best describes 'debouncing'?",
            "options": [
              "Delaying a function call until after a wait period since the last invocation",
              "Calling a function repeatedly",
              "Executing a function immediately",
              "None of the above"
            ],
            "answer": "Delaying a function call until after a wait period since the last invocation"
          },
          {
            "id": 10,
            "question": "What is the purpose of 'Object.freeze()'?",
            "options": [
              "Prevents modifications to an object",
              "Removes all properties from an object",
              "Copies an object",
              "Creates a new object"
            ],
            "answer": "Prevents modifications to an object"
          },
          {
            "id": 11,
            "question": "What will be logged?\n\nconst a = [1, 2, 3];\nconst b = [...a];\nb.push(4);\nconsole.log(a.length);",
            "options": ["3", "4", "Error", "Undefined"],
            "answer": "3"
          },
          {
            "id": 12,
            "question": "Which method allows asynchronous iteration over data sources?",
            "options": ["for await...of", "for...of", "forEach", "while"],
            "answer": "for await...of"
          },
          {
            "id": 13,
            "question": "What is tail call optimization?",
            "options": [
              "Optimization that allows some recursive calls to reuse stack frames",
              "A way to call functions asynchronously",
              "A method to improve variable scoping",
              "None of the above"
            ],
            "answer": "Optimization that allows some recursive calls to reuse stack frames"
          },
          {
            "id": 14,
            "question": "What will this output?\n\nconsole.log(typeof NaN);",
            "options": ["number", "NaN", "undefined", "object"],
            "answer": "number"
          },
          {
            "id": 15,
            "question": "What are 'generators' used for?",
            "options": [
              "Functions that can pause and resume execution",
              "Functions that always return a Promise",
              "Functions that run in the background",
              "Functions that generate random numbers"
            ],
            "answer": "Functions that can pause and resume execution"
          },
          {
            "id": 16,
            "question": "What does the 'async' keyword do when placed before a function?",
            "options": [
              "Makes the function return a Promise",
              "Makes the function synchronous",
              "Makes the function immediately execute",
              "None of the above"
            ],
            "answer": "Makes the function return a Promise"
          },
          {
            "id": 17,
            "question": "Which method can be used to shallow copy an object?",
            "options": [
              "Object.assign()",
              "JSON.parse()",
              "Object.create()",
              "Object.freeze()"
            ],
            "answer": "Object.assign()"
          },
          {
            "id": 18,
            "question": "What is the use of 'Reflect' API?",
            "options": [
              "Provides methods for interceptable JavaScript operations",
              "Reflects objects on the screen",
              "Creates new objects",
              "Manipulates DOM elements"
            ],
            "answer": "Provides methods for interceptable JavaScript operations"
          },
          {
            "id": 19,
            "question": "What is the difference between 'var', 'let' and 'const'?",
            "options": [
              "'var' is function-scoped, 'let' and 'const' are block-scoped; 'const' cannot be reassigned",
              "'var' and 'let' are block-scoped; 'const' is function-scoped",
              "All are the same",
              "None of the above"
            ],
            "answer": "'var' is function-scoped, 'let' and 'const' are block-scoped; 'const' cannot be reassigned"
          },
          {
            "id": 20,
            "question": "Which of these is NOT a valid way to create a Promise?",
            "options": [
              "new Promise((resolve, reject) => {})",
              "Promise.resolve(value)",
              "Promise.create()",
              "Promise.reject(error)"
            ],
            "answer": "Promise.create()"
          },
          {
            "id": 21,
            "question": "What is the output of this code?\n\nconsole.log([] == false);",
            "options": ["true", "false", "undefined", "Error"],
            "answer": "true"
          },
          {
            "id": 22,
            "question": "What is the temporal dead zone in JavaScript?",
            "options": [
              "The time between entering a scope and variable initialization",
              "The time a function runs asynchronously",
              "A deprecated feature",
              "The global scope"
            ],
            "answer": "The time between entering a scope and variable initialization"
          },
          {
            "id": 23,
            "question": "Which of these will create a new array with all elements doubled?\n\nconst arr = [1, 2, 3];",
            "options": [
              "arr.map(x => x * 2)",
              "arr.forEach(x => x * 2)",
              "arr.filter(x => x * 2)",
              "arr.reduce(x => x * 2)"
            ],
            "answer": "arr.map(x => x * 2)"
          },
          {
            "id": 24,
            "question": "What does the spread operator '...' do?",
            "options": [
              "Expands iterables into individual elements",
              "Combines two strings",
              "Creates a new function",
              "Declares variables"
            ],
            "answer": "Expands iterables into individual elements"
          },
          {
            "id": 25,
            "question": "What is memoization?",
            "options": [
              "Caching results of expensive function calls",
              "Reducing code size",
              "Delaying function execution",
              "None of the above"
            ],
            "answer": "Caching results of expensive function calls"
          },
          {
            "id": 26,
            "question": "Which of these is true about 'const' objects?",
            "options": [
              "Properties can be changed, but binding cannot",
              "Properties and binding cannot be changed",
              "Binding can be changed but properties cannot",
              "None of the above"
            ],
            "answer": "Properties can be changed, but binding cannot"
          },
          {
            "id": 27,
            "question": "What is the output of this?\n\nconsole.log(typeof async function() {});",
            "options": ["function", "asyncfunction", "object", "undefined"],
            "answer": "function"
          },
          {
            "id": 28,
            "question": "How can you create a private variable in JavaScript ES6?",
            "options": [
              "Using closures",
              "Using the '#' prefix",
              "Using Symbols",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 29,
            "question": "What is the 'this' value in a regular function called as an event handler?",
            "options": [
              "The DOM element the handler is attached to",
              "Window object",
              "Undefined",
              "The function itself"
            ],
            "answer": "The DOM element the handler is attached to"
          },
          {
            "id": 30,
            "question": "Which is true about JavaScript modules?",
            "options": [
              "They use 'import' and 'export' syntax",
              "They are loaded synchronously",
              "They cannot import JSON files",
              "None of the above"
            ],
            "answer": "They use 'import' and 'export' syntax"
          }
        ]
      },
      {
        "id": "t5",
        "name": "JS Expert",
        "duration": 60,
        "questions": [
          {
            "id": 1,
            "question": "Explain the concept of the JavaScript event loop and its phases.",
            "options": [
              "A mechanism for asynchronous execution with phases like timers, I/O callbacks, idle, and poll",
              "A loop that runs only synchronous code",
              "A function that loops through events",
              "A way to stop events from firing"
            ],
            "answer": "A mechanism for asynchronous execution with phases like timers, I/O callbacks, idle, and poll"
          },
          {
            "id": 2,
            "question": "What are microtasks and macrotasks in JavaScript?",
            "options": [
              "Microtasks are queued after the current operation, macrotasks include timers and I/O events",
              "They are both synchronous tasks",
              "They refer to threads in JavaScript",
              "They are just different names for promises"
            ],
            "answer": "Microtasks are queued after the current operation, macrotasks include timers and I/O events"
          },
          {
            "id": 3,
            "question": "How do you implement memoization in JavaScript for a recursive function?",
            "options": [
              "Store computed results in a cache object and return cached results when available",
              "Use global variables only",
              "Use setTimeout for caching",
              "Use try-catch blocks"
            ],
            "answer": "Store computed results in a cache object and return cached results when available"
          },
          {
            "id": 4,
            "question": "Explain the difference between prototypal inheritance and classical inheritance.",
            "options": [
              "Prototypal inheritance copies objects directly; classical inheritance uses classes and instances",
              "They are the same",
              "Classical inheritance is only in Java, not JS",
              "Prototypal inheritance uses prototypes chains"
            ],
            "answer": "Prototypal inheritance uses prototypes chains"
          },
          {
            "id": 5,
            "question": "What is the 'new' keyword doing under the hood?",
            "options": [
              "Creates a new object, sets prototype, binds 'this' and returns the object",
              "Only calls a constructor function",
              "Creates a class",
              "Nothing special"
            ],
            "answer": "Creates a new object, sets prototype, binds 'this' and returns the object"
          },
          {
            "id": 6,
            "question": "What is a WeakRef in JavaScript and when would you use it?",
            "options": [
              "Allows referencing an object without preventing its garbage collection",
              "A type of variable",
              "A Promise variant",
              "An old deprecated feature"
            ],
            "answer": "Allows referencing an object without preventing its garbage collection"
          },
          {
            "id": 7,
            "question": "What does the following code output and why?\n\nconsole.log([] + []);",
            "options": ["'' (empty string)", "undefined", "0", "Error"],
            "answer": "'' (empty string)"
          },
          {
            "id": 8,
            "question": "Explain the difference between call, apply, and bind.",
            "options": [
              "call and apply invoke immediately, bind returns a new function",
              "All three invoke immediately",
              "bind invokes immediately, call and apply do not",
              "None of the above"
            ],
            "answer": "call and apply invoke immediately, bind returns a new function"
          },
          {
            "id": 9,
            "question": "What are Symbols and how do they help in avoiding property name collisions?",
            "options": [
              "Symbols are unique and immutable identifiers that can be used as object keys",
              "Symbols are strings",
              "Symbols are numbers",
              "Symbols are arrays"
            ],
            "answer": "Symbols are unique and immutable identifiers that can be used as object keys"
          },
          {
            "id": 10,
            "question": "What is the difference between synchronous and asynchronous iterators?",
            "options": [
              "Asynchronous iterators can await promises; synchronous cannot",
              "Synchronous iterators await promises; asynchronous cannot",
              "Both are the same",
              "Neither can await promises"
            ],
            "answer": "Asynchronous iterators can await promises; synchronous cannot"
          },
          {
            "id": 11,
            "question": "Explain how JavaScript's 'this' keyword is determined in different contexts.",
            "options": [
              "Depends on how function is called: global, method, constructor, explicit binding",
              "Always refers to the window object",
              "Always refers to the current function",
              "It is not used in JavaScript"
            ],
            "answer": "Depends on how function is called: global, method, constructor, explicit binding"
          },
          {
            "id": 12,
            "question": "What are generator functions and how do they differ from regular functions?",
            "options": [
              "Generators can pause and resume execution using yield",
              "Generators run synchronously without pauses",
              "Generators always return promises",
              "Generators are only used for event handling"
            ],
            "answer": "Generators can pause and resume execution using yield"
          },
          {
            "id": 13,
            "question": "What is the output of the following and why?\n\nconsole.log(typeof null);",
            "options": ["object", "null", "undefined", "boolean"],
            "answer": "object"
          },
          {
            "id": 14,
            "question": "What is the temporal dead zone?",
            "options": [
              "Period between entering scope and variable initialization for let/const",
              "Time before page loads",
              "Period after function call",
              "Deprecated JS concept"
            ],
            "answer": "Period between entering scope and variable initialization for let/const"
          },
          {
            "id": 15,
            "question": "Explain how event delegation works and why it is useful.",
            "options": [
              "Attaching a single event listener to a parent to handle events for its children",
              "Attaching event listeners to each child",
              "Stopping events from bubbling",
              "Using setTimeout to delay events"
            ],
            "answer": "Attaching a single event listener to a parent to handle events for its children"
          },
          {
            "id": 16,
            "question": "What does 'use strict' do in JavaScript?",
            "options": [
              "Enables strict mode which catches common coding mistakes",
              "Disables errors",
              "Is required in all JS files",
              "None of the above"
            ],
            "answer": "Enables strict mode which catches common coding mistakes"
          },
          {
            "id": 17,
            "question": "Explain the difference between deep copy and shallow copy.",
            "options": [
              "Deep copy duplicates nested objects; shallow copy copies only top-level references",
              "Shallow copy duplicates nested objects",
              "They are the same",
              "None of the above"
            ],
            "answer": "Deep copy duplicates nested objects; shallow copy copies only top-level references"
          },
          {
            "id": 18,
            "question": "How can you create a private variable in modern JavaScript?",
            "options": [
              "Using private fields with # syntax",
              "Using closures",
              "Using Symbols",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 19,
            "question": "What is a Promise and how does it help in asynchronous programming?",
            "options": [
              "Represents a value that may be available now, in future or never, allowing chaining",
              "Executes code synchronously",
              "Blocks the main thread",
              "None of the above"
            ],
            "answer": "Represents a value that may be available now, in future or never, allowing chaining"
          },
          {
            "id": 20,
            "question": "What is the difference between '==' and '==='?",
            "options": [
              "'==' does type coercion, '===' checks both type and value equality",
              "They are the same",
              "'===' does type coercion",
              "None of the above"
            ],
            "answer": "'==' does type coercion, '===' checks both type and value equality"
          },
          {
            "id": 21,
            "question": "Explain the concept of hoisting in JavaScript.",
            "options": [
              "Variable and function declarations are moved to the top of their scope before code execution",
              "Variables cannot be accessed before declaration",
              "Functions are not hoisted",
              "None of the above"
            ],
            "answer": "Variable and function declarations are moved to the top of their scope before code execution"
          },
          {
            "id": 22,
            "question": "What will the following code output?\n\nconsole.log([] == ![]);",
            "options": ["true", "false", "undefined", "Error"],
            "answer": "true"
          },
          {
            "id": 23,
            "question": "How does async/await work under the hood?",
            "options": [
              "Async functions return Promises and await pauses execution until Promise resolves",
              "Async functions are synchronous",
              "Await makes functions execute faster",
              "None of the above"
            ],
            "answer": "Async functions return Promises and await pauses execution until Promise resolves"
          },
          {
            "id": 24,
            "question": "What is a Proxy in JavaScript?",
            "options": [
              "An object that wraps another object and intercepts operations on it",
              "A way to copy objects",
              "A function that returns a Promise",
              "None of the above"
            ],
            "answer": "An object that wraps another object and intercepts operations on it"
          },
          {
            "id": 25,
            "question": "What is the purpose of the Reflect API?",
            "options": [
              "To provide methods for interceptable JavaScript operations that Proxy traps use",
              "To reflect changes on the screen",
              "To create new objects",
              "None of the above"
            ],
            "answer": "To provide methods for interceptable JavaScript operations that Proxy traps use"
          },
          {
            "id": 26,
            "question": "Explain event bubbling and capturing phases.",
            "options": [
              "Capturing phase goes from window down to target; bubbling goes from target back up",
              "Both are the same",
              "Bubbling occurs before capturing",
              "None of the above"
            ],
            "answer": "Capturing phase goes from window down to target; bubbling goes from target back up"
          },
          {
            "id": 27,
            "question": "What are tagged template literals?",
            "options": [
              "Functions to process template literals with customized processing",
              "A way to comment code",
              "A deprecated feature",
              "None of the above"
            ],
            "answer": "Functions to process template literals with customized processing"
          },
          {
            "id": 28,
            "question": "What is a service worker in JavaScript?",
            "options": [
              "A script that runs in the background to enable features like offline caching",
              "A server-side script",
              "A function that manages DOM events",
              "None of the above"
            ],
            "answer": "A script that runs in the background to enable features like offline caching"
          },
          {
            "id": 29,
            "question": "How does JavaScript's garbage collection work?",
            "options": [
              "Automatically frees memory for objects no longer referenced",
              "Developer must manually free memory",
              "Uses reference counting only",
              "Does not have garbage collection"
            ],
            "answer": "Automatically frees memory for objects no longer referenced"
          },
          {
            "id": 30,
            "question": "Explain the difference between 'null' and 'undefined'.",
            "options": [
              "'null' is an assigned empty value; 'undefined' means a variable is declared but not assigned",
              "They are the same",
              "'undefined' is assigned by the user",
              "None of the above"
            ],
            "answer": "'null' is an assigned empty value; 'undefined' means a variable is declared but not assigned"
          }
        ]
      },
      {
        "id": "t6",
        "name": "JS Expert Coding",
        "duration": 60,
        "questions": [
          {
            "id": 1,
            "question": "Write a function to deep clone an object in JavaScript.",
            "options": [
              "Use JSON.parse(JSON.stringify(obj))",
              "Use recursion to copy all nested properties",
              "Use Object.assign()",
              "Use spread operator"
            ],
            "answer": "Use recursion to copy all nested properties"
          },
          {
            "id": 2,
            "question": "Implement a function debounce(fn, delay) that delays invoking fn until after delay milliseconds have elapsed since the last time it was invoked.",
            "options": [
              "Use setTimeout and clearTimeout inside the returned function",
              "Use setInterval",
              "Use Promise",
              "Use async/await"
            ],
            "answer": "Use setTimeout and clearTimeout inside the returned function"
          },
          {
            "id": 3,
            "question": "Write a function to flatten a nested array of arbitrary depth.",
            "options": [
              "Use recursion to concatenate arrays",
              "Use Array.flat() with depth Infinity",
              "Use for loops",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 4,
            "question": "Create a function that checks if two strings are anagrams of each other.",
            "options": [
              "Sort both strings and compare",
              "Use character frequency map",
              "Use regular expressions",
              "Both sorting and frequency map methods"
            ],
            "answer": "Both sorting and frequency map methods"
          },
          {
            "id": 5,
            "question": "Implement a function to find the first non-repeated character in a string.",
            "options": [
              "Use a hash map to store character counts and iterate again to find first with count 1",
              "Use regex",
              "Use Array.filter",
              "Use recursion"
            ],
            "answer": "Use a hash map to store character counts and iterate again to find first with count 1"
          },
          {
            "id": 6,
            "question": "Write a function that returns the factorial of a number using recursion.",
            "options": [
              "function factorial(n) { if(n <= 1) return 1; return n * factorial(n - 1); }",
              "function factorial(n) { return n * factorial(n); }",
              "Use a for loop",
              "Use while loop"
            ],
            "answer": "function factorial(n) { if(n <= 1) return 1; return n * factorial(n - 1); }"
          },
          {
            "id": 7,
            "question": "Implement a function to check if a number is a palindrome.",
            "options": [
              "Convert to string and check if equal to reversed string",
              "Use math operations to reverse the number",
              "Use recursion",
              "Both string and math methods"
            ],
            "answer": "Both string and math methods"
          },
          {
            "id": 8,
            "question": "Create a function that merges two sorted arrays into a single sorted array.",
            "options": [
              "Use two pointers to compare and merge",
              "Concatenate and sort",
              "Use recursion",
              "Use map"
            ],
            "answer": "Use two pointers to compare and merge"
          },
          {
            "id": 9,
            "question": "Write a function to implement a simple memoization for any single-argument function.",
            "options": [
              "Use a cache object inside closure to store results",
              "Use global variables",
              "Use localStorage",
              "Use Promises"
            ],
            "answer": "Use a cache object inside closure to store results"
          },
          {
            "id": 10,
            "question": "Implement a function to detect if a linked list has a cycle.",
            "options": [
              "Use two pointers (Floyd’s cycle detection)",
              "Use a Set to track visited nodes",
              "Modify the list",
              "Both pointer and Set methods"
            ],
            "answer": "Both pointer and Set methods"
          },
          {
            "id": 11,
            "question": "Write a function to reverse a string without using built-in reverse methods.",
            "options": [
              "Use a for loop to concatenate characters from end to start",
              "Use recursion",
              "Use reduceRight",
              "Use split and join"
            ],
            "answer": "Use a for loop to concatenate characters from end to start"
          },
          {
            "id": 12,
            "question": "Create a function to find the maximum sum of a contiguous subarray (Kadane’s Algorithm).",
            "options": [
              "Iterate and track max current and max global sums",
              "Use recursion",
              "Sort the array",
              "Use map"
            ],
            "answer": "Iterate and track max current and max global sums"
          },
          {
            "id": 13,
            "question": "Implement a function that converts a Roman numeral to an integer.",
            "options": [
              "Use a mapping and iterate from right to left",
              "Use regex",
              "Use recursion",
              "Use string replace"
            ],
            "answer": "Use a mapping and iterate from right to left"
          },
          {
            "id": 14,
            "question": "Write a function to check if two strings are rotations of each other.",
            "options": [
              "Check if one string is substring of the other concatenated to itself",
              "Sort and compare",
              "Use regex",
              "Use recursion"
            ],
            "answer": "Check if one string is substring of the other concatenated to itself"
          },
          {
            "id": 15,
            "question": "Create a function to implement a simple version of the 'bind' method.",
            "options": [
              "Return a function that calls the original with bound context",
              "Use call inside bind",
              "Use apply inside bind",
              "None of the above"
            ],
            "answer": "Return a function that calls the original with bound context"
          },
          {
            "id": 16,
            "question": "Write a function that throttles another function, limiting its call rate.",
            "options": [
              "Use a flag and setTimeout to limit calls",
              "Use debounce logic",
              "Use Promise",
              "Use recursion"
            ],
            "answer": "Use a flag and setTimeout to limit calls"
          },
          {
            "id": 17,
            "question": "Implement a function to generate all permutations of a given string.",
            "options": [
              "Use recursion swapping characters",
              "Use loops",
              "Use sort",
              "Use reduce"
            ],
            "answer": "Use recursion swapping characters"
          },
          {
            "id": 18,
            "question": "Write a function to find the longest common prefix among an array of strings.",
            "options": [
              "Iterate character by character and check all strings",
              "Sort the array and compare first and last",
              "Use recursion",
              "Use regex"
            ],
            "answer": "Iterate character by character and check all strings"
          },
          {
            "id": 19,
            "question": "Create a function to implement a simple event emitter.",
            "options": [
              "Maintain a registry of events and callbacks, provide on/emit methods",
              "Use DOM events",
              "Use Promises",
              "Use async/await"
            ],
            "answer": "Maintain a registry of events and callbacks, provide on/emit methods"
          },
          {
            "id": 20,
            "question": "Write a function to check if a binary tree is balanced.",
            "options": [
              "Check recursively if left and right subtree heights differ at most by 1",
              "Use BFS",
              "Use DFS",
              "Use map"
            ],
            "answer": "Check recursively if left and right subtree heights differ at most by 1"
          },
          {
            "id": 21,
            "question": "Implement a function to shuffle an array (Fisher-Yates algorithm).",
            "options": [
              "Iterate backward swapping elements with random indices",
              "Sort with random comparator",
              "Reverse array",
              "Use recursion"
            ],
            "answer": "Iterate backward swapping elements with random indices"
          },
          {
            "id": 22,
            "question": "Write a function to convert a flat array into a tree structure.",
            "options": [
              "Map items by id and assign children based on parent ids",
              "Use reduce",
              "Use recursion",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 23,
            "question": "Create a function to debounce window resize event to improve performance.",
            "options": [
              "Wrap event handler in debounce function with setTimeout",
              "Use throttling",
              "Use Promise",
              "Use async/await"
            ],
            "answer": "Wrap event handler in debounce function with setTimeout"
          },
          {
            "id": 24,
            "question": "Write a function that implements a binary search on a sorted array.",
            "options": [
              "Use iterative or recursive approach comparing middle element",
              "Use linear search",
              "Use map",
              "Use reduce"
            ],
            "answer": "Use iterative or recursive approach comparing middle element"
          },
          {
            "id": 25,
            "question": "Implement a function to calculate the nth Fibonacci number using memoization.",
            "options": [
              "Use recursion with a cache object",
              "Use loops",
              "Use reduce",
              "Use Promise"
            ],
            "answer": "Use recursion with a cache object"
          },
          {
            "id": 26,
            "question": "Write a function to detect if two linked lists intersect.",
            "options": [
              "Compare nodes by reference after aligning lengths",
              "Use hash set",
              "Modify lists",
              "Use recursion"
            ],
            "answer": "Compare nodes by reference after aligning lengths"
          },
          {
            "id": 27,
            "question": "Create a function to implement the curry technique for any function.",
            "options": [
              "Return a series of functions each taking one argument until all are provided",
              "Use closures",
              "Use recursion",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 28,
            "question": "Write a function to find the majority element in an array (element appearing more than n/2 times).",
            "options": [
              "Use Boyer–Moore majority vote algorithm",
              "Use frequency map",
              "Sort and pick middle",
              "All of the above"
            ],
            "answer": "Use Boyer–Moore majority vote algorithm"
          },
          {
            "id": 29,
            "question": "Implement a function that checks if a string is a valid palindrome considering only alphanumeric characters.",
            "options": [
              "Normalize string and compare characters from both ends",
              "Use regex",
              "Use loops",
              "All of the above"
            ],
            "answer": "Normalize string and compare characters from both ends"
          },
          {
            "id": 30,
            "question": "Write a function to find the longest substring without repeating characters.",
            "options": [
              "Use sliding window technique",
              "Use nested loops",
              "Use recursion",
              "Use map"
            ],
            "answer": "Use sliding window technique"
          }
        ]
      }
    ]
  },

  {
    "id": "c4",
    "name": "React Js",
    "tests": [
      {
        "id": "t1",
        "name": "React Basic",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "What is React?",
            "options": [
              "A JavaScript library for building user interfaces",
              "A backend framework",
              "A database",
              "A CSS framework"
            ],
            "answer": "A JavaScript library for building user interfaces"
          },
          {
            "id": 2,
            "question": "Who developed React?",
            "options": ["Google", "Facebook", "Microsoft", "Apple"],
            "answer": "Facebook"
          },
          {
            "id": 3,
            "question": "What language is JSX similar to?",
            "options": ["JavaScript", "XML", "HTML", "CSS"],
            "answer": "XML"
          },
          {
            "id": 4,
            "question": "What does a React component return?",
            "options": ["JSX", "HTML", "CSS", "JavaScript"],
            "answer": "JSX"
          },
          {
            "id": 5,
            "question": "Which method is used to render a React app to the DOM?",
            "options": [
              "ReactDOM.render",
              "React.render",
              "ReactDOM.create",
              "React.renderDOM"
            ],
            "answer": "ReactDOM.render"
          },
          {
            "id": 6,
            "question": "What is the name of the virtual DOM implementation in React?",
            "options": ["Shadow DOM", "Virtual DOM", "DOM", "Real DOM"],
            "answer": "Virtual DOM"
          },
          {
            "id": 7,
            "question": "How do you create a React component?",
            "options": [
              "By creating a function or class",
              "By writing HTML",
              "By writing CSS",
              "By creating an object"
            ],
            "answer": "By creating a function or class"
          },
          {
            "id": 8,
            "question": "What is a React fragment?",
            "options": [
              "A way to group multiple elements without adding extra nodes",
              "A special kind of component",
              "An API",
              "A CSS style"
            ],
            "answer": "A way to group multiple elements without adding extra nodes"
          },
          {
            "id": 9,
            "question": "How do you add comments in JSX?",
            "options": [
              "{/* Comment */}",
              "// Comment",
              "/* Comment */",
              "<!-- Comment -->"
            ],
            "answer": "{/* Comment */}"
          },
          {
            "id": 10,
            "question": "What is the purpose of props in React?",
            "options": [
              "To pass data from parent to child components",
              "To hold component state",
              "To modify CSS",
              "To handle events"
            ],
            "answer": "To pass data from parent to child components"
          },
          {
            "id": 11,
            "question": "Which React hook lets you add state to a functional component?",
            "options": ["useState", "useEffect", "useContext", "useReducer"],
            "answer": "useState"
          },
          {
            "id": 12,
            "question": "What is the default port for React development server?",
            "options": ["3000", "8000", "8080", "5000"],
            "answer": "3000"
          },
          {
            "id": 13,
            "question": "Which method do you use to update the state in class components?",
            "options": [
              "this.setState()",
              "this.state()",
              "this.updateState()",
              "this.changeState()"
            ],
            "answer": "this.setState()"
          },
          {
            "id": 14,
            "question": "How do you write inline styles in React?",
            "options": [
              "As an object with camelCase properties",
              "As a string with CSS syntax",
              "Using CSS files",
              "Using style tags"
            ],
            "answer": "As an object with camelCase properties"
          },
          {
            "id": 15,
            "question": "How do you handle events in React?",
            "options": [
              "Using camelCase event handlers as props",
              "Using lowercase event names",
              "Using jQuery",
              "Using HTML attributes"
            ],
            "answer": "Using camelCase event handlers as props"
          },
          {
            "id": 16,
            "question": "What is JSX?",
            "options": [
              "A syntax extension that looks like HTML used in React",
              "JavaScript XML",
              "A CSS preprocessor",
              "A template engine"
            ],
            "answer": "A syntax extension that looks like HTML used in React"
          },
          {
            "id": 17,
            "question": "Can you use React without JSX?",
            "options": [
              "Yes, by using React.createElement",
              "No",
              "Only with class components",
              "Only with hooks"
            ],
            "answer": "Yes, by using React.createElement"
          },
          {
            "id": 18,
            "question": "What does the key prop do in lists?",
            "options": [
              "Helps React identify which items changed",
              "Sets the value",
              "Is used for styling",
              "Binds event listeners"
            ],
            "answer": "Helps React identify which items changed"
          },
          {
            "id": 19,
            "question": "What does ReactDOM.render() do?",
            "options": [
              "Renders React elements to the DOM",
              "Creates React components",
              "Manages state",
              "Handles routing"
            ],
            "answer": "Renders React elements to the DOM"
          },
          {
            "id": 20,
            "question": "What is the use of React.StrictMode?",
            "options": [
              "It highlights potential problems in the app during development",
              "It's required for production",
              "Handles routing",
              "Manages state"
            ],
            "answer": "It highlights potential problems in the app during development"
          },
          {
            "id": 21,
            "question": "Which company maintains React?",
            "options": ["Google", "Facebook", "Microsoft", "Amazon"],
            "answer": "Facebook"
          },
          {
            "id": 22,
            "question": "What does React use to track changes in the UI?",
            "options": ["Virtual DOM", "Real DOM", "Shadow DOM", "HTML DOM"],
            "answer": "Virtual DOM"
          },
          {
            "id": 23,
            "question": "How do you embed JavaScript expressions in JSX?",
            "options": [
              "Using curly braces {}",
              "Using quotes \"\"",
              "Using parentheses ()",
              "Using angle brackets <>"
            ],
            "answer": "Using curly braces {}"
          },
          {
            "id": 24,
            "question": "What is a stateful component?",
            "options": [
              "A component that manages its own state",
              "A component without state",
              "A function component",
              "A component that only receives props"
            ],
            "answer": "A component that manages its own state"
          },
          {
            "id": 25,
            "question": "Which React feature helps reuse code between components?",
            "options": ["Components", "Hooks", "Props", "State"],
            "answer": "Components"
          },
          {
            "id": 26,
            "question": "Which of these is NOT a React lifecycle method?",
            "options": [
              "componentDidMount",
              "componentWillUpdate",
              "componentDidReceiveProps",
              "render"
            ],
            "answer": "componentDidReceiveProps"
          },
          {
            "id": 27,
            "question": "What is the purpose of the render method in React class components?",
            "options": [
              "To return the JSX to display",
              "To manage state",
              "To handle events",
              "To set props"
            ],
            "answer": "To return the JSX to display"
          },
          {
            "id": 28,
            "question": "Which hook runs after every render in functional components?",
            "options": ["useEffect", "useState", "useMemo", "useContext"],
            "answer": "useEffect"
          },
          {
            "id": 29,
            "question": "How do you conditionally render a component?",
            "options": [
              "Using ternary operators or logical && inside JSX",
              "Using if statements directly in JSX",
              "Using switch case in JSX",
              "Using for loops"
            ],
            "answer": "Using ternary operators or logical && inside JSX"
          },
          {
            "id": 30,
            "question": "Which keyword is used to import React in your component file?",
            "options": ["import", "require", "export", "include"],
            "answer": "import"
          }
        ]
      },
      {
        "id": "t2",
        "name": "React Beginner",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "Which hook is used to manage state in functional components?",
            "options": ["useState", "useEffect", "useContext", "useReducer"],
            "answer": "useState"
          },
          {
            "id": 2,
            "question": "How do you pass data from a parent to a child component?",
            "options": [
              "Using props",
              "Using state",
              "Using context",
              "Using refs"
            ],
            "answer": "Using props"
          },
          {
            "id": 3,
            "question": "What does useEffect hook do?",
            "options": [
              "Performs side effects in components",
              "Manages state",
              "Renders JSX",
              "Creates components"
            ],
            "answer": "Performs side effects in components"
          },
          {
            "id": 4,
            "question": "How do you prevent a component from re-rendering unnecessarily?",
            "options": [
              "Using React.memo",
              "Using useEffect",
              "Using useState",
              "Using setTimeout"
            ],
            "answer": "Using React.memo"
          },
          {
            "id": 5,
            "question": "What is a controlled component?",
            "options": [
              "An input element where React controls the value via state",
              "An input element controlled by the DOM",
              "A component without state",
              "A component without props"
            ],
            "answer": "An input element where React controls the value via state"
          },
          {
            "id": 6,
            "question": "What is JSX compiled to?",
            "options": ["React.createElement calls", "HTML", "JSON", "CSS"],
            "answer": "React.createElement calls"
          },
          {
            "id": 7,
            "question": "How do you add CSS styles inline in React?",
            "options": [
              "As a JS object with camelCase property names",
              "As a string like HTML style attribute",
              "Using CSS files only",
              "You cannot use inline styles"
            ],
            "answer": "As a JS object with camelCase property names"
          },
          {
            "id": 8,
            "question": "What hook is used for managing complex state logic?",
            "options": ["useReducer", "useState", "useEffect", "useCallback"],
            "answer": "useReducer"
          },
          {
            "id": 9,
            "question": "What is the purpose of keys in lists?",
            "options": [
              "To help React identify list items and optimize rendering",
              "For styling",
              "For unique IDs in the database",
              "For event handling"
            ],
            "answer": "To help React identify list items and optimize rendering"
          },
          {
            "id": 10,
            "question": "How do you handle events in React?",
            "options": [
              "Using camelCase event handlers like onClick",
              "Using lowercase like onclick",
              "Using addEventListener directly",
              "React does not support events"
            ],
            "answer": "Using camelCase event handlers like onClick"
          },
          {
            "id": 11,
            "question": "How do you lift state up in React?",
            "options": [
              "Move the shared state to the closest common parent component",
              "Duplicate state in every component",
              "Use refs to share state",
              "Use useEffect to share state"
            ],
            "answer": "Move the shared state to the closest common parent component"
          },
          {
            "id": 12,
            "question": "How can you memoize a component in React?",
            "options": [
              "Wrap it with React.memo",
              "Use useCallback",
              "Use useState",
              "Use useEffect"
            ],
            "answer": "Wrap it with React.memo"
          },
          {
            "id": 13,
            "question": "What is the significance of the dependency array in useEffect?",
            "options": [
              "It controls when the effect runs",
              "It is optional and ignored",
              "It controls event listeners",
              "It declares state variables"
            ],
            "answer": "It controls when the effect runs"
          },
          {
            "id": 14,
            "question": "What does useContext hook do?",
            "options": [
              "Accesses the value from a React Context",
              "Creates a new context",
              "Updates props",
              "Manages state"
            ],
            "answer": "Accesses the value from a React Context"
          },
          {
            "id": 15,
            "question": "Which of these is NOT a valid React hook?",
            "options": ["useState", "useEffect", "useRoute", "useContext"],
            "answer": "useRoute"
          },
          {
            "id": 16,
            "question": "Which method updates state asynchronously in class components?",
            "options": [
              "setState",
              "updateState",
              "changeState",
              "modifyState"
            ],
            "answer": "setState"
          },
          {
            "id": 17,
            "question": "What happens if you call setState in React?",
            "options": [
              "Schedules a component re-render with new state",
              "Immediately mutates state",
              "Does nothing",
              "Triggers an error"
            ],
            "answer": "Schedules a component re-render with new state"
          },
          {
            "id": 18,
            "question": "What does the useRef hook return?",
            "options": [
              "A mutable ref object with a current property",
              "A state variable",
              "A callback",
              "A context value"
            ],
            "answer": "A mutable ref object with a current property"
          },
          {
            "id": 19,
            "question": "What is the purpose of useMemo hook?",
            "options": [
              "Memoizes the result of a function to optimize performance",
              "Runs side effects",
              "Manages state",
              "Triggers component updates"
            ],
            "answer": "Memoizes the result of a function to optimize performance"
          },
          {
            "id": 20,
            "question": "How do you create a ref in a functional component?",
            "options": [
              "Using useRef hook",
              "Using createRef",
              "Using useState",
              "Using forwardRef"
            ],
            "answer": "Using useRef hook"
          },
          {
            "id": 21,
            "question": "What is the significance of the key prop in React lists?",
            "options": [
              "It helps React identify items and optimize re-rendering",
              "It defines styles",
              "It triggers events",
              "It holds state"
            ],
            "answer": "It helps React identify items and optimize re-rendering"
          },
          {
            "id": 22,
            "question": "What is a Higher-Order Component (HOC)?",
            "options": [
              "A function that takes a component and returns a new component",
              "A React component",
              "A hook",
              "An event handler"
            ],
            "answer": "A function that takes a component and returns a new component"
          },
          {
            "id": 23,
            "question": "What does lifting state up mean?",
            "options": [
              "Moving state to the closest common ancestor component",
              "Moving state down to child components",
              "Deleting state",
              "Storing state in context"
            ],
            "answer": "Moving state to the closest common ancestor component"
          },
          {
            "id": 24,
            "question": "What is the role of React Router?",
            "options": [
              "Manage routing and navigation in React apps",
              "Manage state",
              "Handle API calls",
              "Style components"
            ],
            "answer": "Manage routing and navigation in React apps"
          },
          {
            "id": 25,
            "question": "What is the difference between props and state?",
            "options": [
              "Props are read-only and passed from parent; state is local and mutable",
              "State is passed from parent; props are local",
              "Both are mutable",
              "Both are global"
            ],
            "answer": "Props are read-only and passed from parent; state is local and mutable"
          },
          {
            "id": 26,
            "question": "What is the purpose of React.StrictMode?",
            "options": [
              "Helps find potential problems during development",
              "Required for production",
              "Used for styling",
              "Used for routing"
            ],
            "answer": "Helps find potential problems during development"
          },
          {
            "id": 27,
            "question": "How do you conditionally render JSX elements?",
            "options": [
              "Using ternary operators or logical && inside JSX",
              "Using if statements directly",
              "Using for loops",
              "Using switch-case inside JSX"
            ],
            "answer": "Using ternary operators or logical && inside JSX"
          },
          {
            "id": 28,
            "question": "What does the React.useLayoutEffect hook do?",
            "options": [
              "Runs synchronously after all DOM mutations but before the browser paints",
              "Runs asynchronously",
              "Manages state",
              "Manages context"
            ],
            "answer": "Runs synchronously after all DOM mutations but before the browser paints"
          },
          {
            "id": 29,
            "question": "What is a fragment in React?",
            "options": [
              "A component that lets you group multiple elements without extra nodes",
              "A CSS style",
              "An event handler",
              "A hook"
            ],
            "answer": "A component that lets you group multiple elements without extra nodes"
          },
          {
            "id": 30,
            "question": "What is the purpose of the React Developer Tools?",
            "options": [
              "Debug and inspect React component hierarchies and state",
              "Edit CSS",
              "Manage routes",
              "Run tests"
            ],
            "answer": "Debug and inspect React component hierarchies and state"
          }
        ]
      },
      {
        "id": "t3",
        "name": "React Intermediate",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "What is the difference between useEffect and useLayoutEffect?",
            "options": [
              "useEffect runs after paint, useLayoutEffect runs before paint",
              "Both run at the same time",
              "useEffect runs synchronously, useLayoutEffect asynchronously",
              "useLayoutEffect only runs once"
            ],
            "answer": "useEffect runs after paint, useLayoutEffect runs before paint"
          },
          {
            "id": 2,
            "question": "How can you optimize performance for expensive calculations in React?",
            "options": [
              "Using useMemo hook",
              "Using useCallback hook",
              "Using React.memo only",
              "Using useState"
            ],
            "answer": "Using useMemo hook"
          },
          {
            "id": 3,
            "question": "What is useCallback hook used for?",
            "options": [
              "Memoizing functions to prevent unnecessary re-creation",
              "Managing state",
              "Managing context",
              "Side effects"
            ],
            "answer": "Memoizing functions to prevent unnecessary re-creation"
          },
          {
            "id": 4,
            "question": "What is a React portal?",
            "options": [
              "A way to render children into a DOM node outside the parent hierarchy",
              "A new component type",
              "An event handler",
              "A routing technique"
            ],
            "answer": "A way to render children into a DOM node outside the parent hierarchy"
          },
          {
            "id": 5,
            "question": "What is reconciliation in React?",
            "options": [
              "The process React uses to update the DOM efficiently",
              "Merging CSS styles",
              "Handling user input",
              "Component lifecycle management"
            ],
            "answer": "The process React uses to update the DOM efficiently"
          },
          {
            "id": 6,
            "question": "What does React.memo do?",
            "options": [
              "Prevents re-rendering if props have not changed",
              "Manages state",
              "Triggers re-render every time",
              "Handles routing"
            ],
            "answer": "Prevents re-rendering if props have not changed"
          },
          {
            "id": 7,
            "question": "What is the purpose of the useImperativeHandle hook?",
            "options": [
              "Customizes the instance value exposed when using refs",
              "Manages state",
              "Triggers side effects",
              "Memoizes callbacks"
            ],
            "answer": "Customizes the instance value exposed when using refs"
          },
          {
            "id": 8,
            "question": "What is the difference between controlled and uncontrolled components?",
            "options": [
              "Controlled components have state managed by React; uncontrolled by the DOM",
              "Both are the same",
              "Uncontrolled components use useState",
              "Controlled components don't use props"
            ],
            "answer": "Controlled components have state managed by React; uncontrolled by the DOM"
          },
          {
            "id": 9,
            "question": "What is a pure component in React?",
            "options": [
              "A component that implements shouldComponentUpdate with shallow prop/state comparison",
              "A component with no props",
              "A functional component",
              "A component without state"
            ],
            "answer": "A component that implements shouldComponentUpdate with shallow prop/state comparison"
          },
          {
            "id": 10,
            "question": "What is the significance of the key prop when rendering lists?",
            "options": [
              "Identifies items for efficient re-rendering",
              "Styles the list",
              "Handles events",
              "Is optional and has no effect"
            ],
            "answer": "Identifies items for efficient re-rendering"
          },
          {
            "id": 11,
            "question": "What is React.lazy used for?",
            "options": [
              "Code-splitting and lazy-loading components",
              "Handling errors",
              "Managing state",
              "Styling components"
            ],
            "answer": "Code-splitting and lazy-loading components"
          },
          {
            "id": 12,
            "question": "How do you handle errors in React components?",
            "options": [
              "Using error boundaries",
              "Using try-catch inside render",
              "Using useEffect",
              "Using conditional rendering"
            ],
            "answer": "Using error boundaries"
          },
          {
            "id": 13,
            "question": "What is the purpose of the Suspense component?",
            "options": [
              "To show fallback UI while waiting for lazy-loaded components",
              "To manage state",
              "To catch errors",
              "To style components"
            ],
            "answer": "To show fallback UI while waiting for lazy-loaded components"
          },
          {
            "id": 14,
            "question": "What is the Context API used for?",
            "options": [
              "Passing data deeply without prop drilling",
              "Managing component state",
              "Handling events",
              "Styling components"
            ],
            "answer": "Passing data deeply without prop drilling"
          },
          {
            "id": 15,
            "question": "What are hooks rules?",
            "options": [
              "Only call hooks at the top level and from React functions",
              "Call hooks anywhere",
              "Call hooks inside loops",
              "Call hooks conditionally"
            ],
            "answer": "Only call hooks at the top level and from React functions"
          },
          {
            "id": 16,
            "question": "What does useRef hook help you with?",
            "options": [
              "Persisting mutable values across renders",
              "Managing state",
              "Handling side effects",
              "Memoizing functions"
            ],
            "answer": "Persisting mutable values across renders"
          },
          {
            "id": 17,
            "question": "What is a custom hook in React?",
            "options": [
              "A function that uses hooks and can be reused across components",
              "A component",
              "A special JSX element",
              "A third-party library"
            ],
            "answer": "A function that uses hooks and can be reused across components"
          },
          {
            "id": 18,
            "question": "How can you prevent unnecessary re-renders in React?",
            "options": [
              "Using React.memo, useCallback, and useMemo",
              "Using useState only",
              "Using CSS",
              "Using setTimeout"
            ],
            "answer": "Using React.memo, useCallback, and useMemo"
          },
          {
            "id": 19,
            "question": "What is reconciliation in React?",
            "options": [
              "The process of updating the DOM with minimal changes",
              "The process of managing state",
              "The process of routing",
              "The process of styling"
            ],
            "answer": "The process of updating the DOM with minimal changes"
          },
          {
            "id": 20,
            "question": "What is the difference between useEffect and componentDidMount?",
            "options": [
              "useEffect with empty deps runs after mount, componentDidMount is class lifecycle",
              "They are the same",
              "useEffect runs before mount",
              "componentDidMount runs on unmount"
            ],
            "answer": "useEffect with empty deps runs after mount, componentDidMount is class lifecycle"
          },
          {
            "id": 21,
            "question": "What are Higher-Order Components (HOCs)?",
            "options": [
              "Functions that take a component and return a new enhanced component",
              "Components that render portals",
              "Hooks that manage state",
              "Special JSX elements"
            ],
            "answer": "Functions that take a component and return a new enhanced component"
          },
          {
            "id": 22,
            "question": "What does the React Profiler do?",
            "options": [
              "Measures performance of React components",
              "Handles routing",
              "Manages state",
              "Handles side effects"
            ],
            "answer": "Measures performance of React components"
          },
          {
            "id": 23,
            "question": "What is the purpose of the useDebugValue hook?",
            "options": [
              "Display a label for custom hooks in React DevTools",
              "Manage state",
              "Handle side effects",
              "Render JSX"
            ],
            "answer": "Display a label for custom hooks in React DevTools"
          },
          {
            "id": 24,
            "question": "What is the role of useTransition hook?",
            "options": [
              "Manage UI transitions and mark updates as non-urgent",
              "Handle routing",
              "Manage state",
              "Render lists"
            ],
            "answer": "Manage UI transitions and mark updates as non-urgent"
          },
          {
            "id": 25,
            "question": "How do you create a controlled form input in React?",
            "options": [
              "Use state and update value via onChange",
              "Use refs",
              "Use uncontrolled inputs",
              "Use event listeners"
            ],
            "answer": "Use state and update value via onChange"
          },
          {
            "id": 26,
            "question": "What is the use of the useId hook?",
            "options": [
              "Generates unique IDs for accessibility and consistency",
              "Manages state",
              "Handles side effects",
              "Memoizes values"
            ],
            "answer": "Generates unique IDs for accessibility and consistency"
          },
          {
            "id": 27,
            "question": "How do you use React Router to pass parameters in URLs?",
            "options": [
              "Define route params with :paramName and access with useParams hook",
              "Use query strings only",
              "Use context API",
              "Use Redux"
            ],
            "answer": "Define route params with :paramName and access with useParams hook"
          },
          {
            "id": 28,
            "question": "What is React Fiber?",
            "options": [
              "The reconciliation engine in React that improves rendering performance",
              "A new React hook",
              "A router",
              "A styling library"
            ],
            "answer": "The reconciliation engine in React that improves rendering performance"
          },
          {
            "id": 29,
            "question": "What is Suspense used for besides lazy loading?",
            "options": [
              "Data fetching in concurrent mode",
              "State management",
              "Handling forms",
              "Styling"
            ],
            "answer": "Data fetching in concurrent mode"
          },
          {
            "id": 30,
            "question": "How do you pass functions to child components?",
            "options": [
              "Via props",
              "Using state",
              "Using context only",
              "Using refs"
            ],
            "answer": "Via props"
          }
        ]
      },
      {
        "id": "t4",
        "name": "React Advanced",
        "duration": 40,
        "questions": [
          {
            "id": 1,
            "question": "What is Concurrent Mode in React?",
            "options": [
              "An experimental feature to improve UI responsiveness by interruptible rendering",
              "A way to write synchronous code",
              "A new hook",
              "A routing method"
            ],
            "answer": "An experimental feature to improve UI responsiveness by interruptible rendering"
          },
          {
            "id": 2,
            "question": "What is the SuspenseList component used for?",
            "options": [
              "Coordination of the order in which suspense components show their fallback",
              "Handling errors in Suspense",
              "Managing routing",
              "Styling Suspense components"
            ],
            "answer": "Coordination of the order in which suspense components show their fallback"
          },
          {
            "id": 3,
            "question": "How do you implement code splitting in React?",
            "options": [
              "Using React.lazy and Suspense",
              "Using Redux",
              "Using useEffect",
              "Using higher-order components"
            ],
            "answer": "Using React.lazy and Suspense"
          },
          {
            "id": 4,
            "question": "What is the purpose of useDeferredValue hook?",
            "options": [
              "Allows you to defer re-rendering a value to avoid blocking urgent updates",
              "Manages state",
              "Handles effects",
              "Manages context"
            ],
            "answer": "Allows you to defer re-rendering a value to avoid blocking urgent updates"
          },
          {
            "id": 5,
            "question": "What is the use of useTransition hook?",
            "options": [
              "Manage UI transitions and mark updates as non-urgent",
              "Handle routing",
              "Manage state",
              "Render lists"
            ],
            "answer": "Manage UI transitions and mark updates as non-urgent"
          },
          {
            "id": 6,
            "question": "What is the difference between controlled and uncontrolled forms?",
            "options": [
              "Controlled forms have React state controlling inputs; uncontrolled rely on the DOM",
              "Both are controlled by React",
              "Both rely on the DOM",
              "Uncontrolled forms don't exist"
            ],
            "answer": "Controlled forms have React state controlling inputs; uncontrolled rely on the DOM"
          },
          {
            "id": 7,
            "question": "What is the purpose of React Profiler API?",
            "options": [
              "Measure and analyze the performance of React components",
              "Manage state",
              "Handle routing",
              "Manage context"
            ],
            "answer": "Measure and analyze the performance of React components"
          },
          {
            "id": 8,
            "question": "What is the use of React.memo's second argument?",
            "options": [
              "A custom comparison function to control re-rendering",
              "A state updater",
              "A hook",
              "A routing method"
            ],
            "answer": "A custom comparison function to control re-rendering"
          },
          {
            "id": 9,
            "question": "How do you prevent prop drilling?",
            "options": [
              "Using Context API or state management libraries",
              "Using refs",
              "Using local component state",
              "Using CSS modules"
            ],
            "answer": "Using Context API or state management libraries"
          },
          {
            "id": 10,
            "question": "What is React.forwardRef used for?",
            "options": [
              "Passing refs to child components",
              "Managing state",
              "Handling effects",
              "Styling components"
            ],
            "answer": "Passing refs to child components"
          },
          {
            "id": 11,
            "question": "What is the significance of keys in React lists during reconciliation?",
            "options": [
              "Keys help React identify which items have changed, added, or removed",
              "Keys style the list",
              "Keys are optional and ignored",
              "Keys trigger events"
            ],
            "answer": "Keys help React identify which items have changed, added, or removed"
          },
          {
            "id": 12,
            "question": "What are React Portals used for?",
            "options": [
              "Rendering children into a DOM node outside the parent component hierarchy",
              "Managing state",
              "Handling side effects",
              "Routing"
            ],
            "answer": "Rendering children into a DOM node outside the parent component hierarchy"
          },
          {
            "id": 13,
            "question": "What is the React Fiber architecture?",
            "options": [
              "A reimplementation of the React core algorithm for incremental rendering",
              "A styling framework",
              "A routing mechanism",
              "A hook"
            ],
            "answer": "A reimplementation of the React core algorithm for incremental rendering"
          },
          {
            "id": 14,
            "question": "How do you manage global state in React applications?",
            "options": [
              "Using Context API, Redux, MobX, or other state management libraries",
              "Using only useState",
              "Using refs",
              "Using props only"
            ],
            "answer": "Using Context API, Redux, MobX, or other state management libraries"
          },
          {
            "id": 15,
            "question": "What is the use of the useId hook?",
            "options": [
              "Generating stable unique IDs for accessibility and consistency",
              "Managing state",
              "Handling side effects",
              "Styling components"
            ],
            "answer": "Generating stable unique IDs for accessibility and consistency"
          },
          {
            "id": 16,
            "question": "How can you implement server-side rendering (SSR) with React?",
            "options": [
              "Using frameworks like Next.js or custom Node.js server setups",
              "Using React Router only",
              "Using Redux",
              "Using useEffect"
            ],
            "answer": "Using frameworks like Next.js or custom Node.js server setups"
          },
          {
            "id": 17,
            "question": "What is hydration in React SSR?",
            "options": [
              "Attaching event listeners and making the SSR markup interactive",
              "Rendering the component",
              "Styling components",
              "Fetching data"
            ],
            "answer": "Attaching event listeners and making the SSR markup interactive"
          },
          {
            "id": 18,
            "question": "What is code splitting and why is it important?",
            "options": [
              "Loading parts of the app lazily to reduce initial load time",
              "Combining all code into one file",
              "Styling components",
              "Managing state"
            ],
            "answer": "Loading parts of the app lazily to reduce initial load time"
          },
          {
            "id": 19,
            "question": "What is the difference between useEffect cleanup and componentWillUnmount?",
            "options": [
              "useEffect cleanup runs on unmount or before next effect; componentWillUnmount is a class method",
              "They are the same",
              "useEffect cleanup runs only once",
              "componentWillUnmount runs after mount"
            ],
            "answer": "useEffect cleanup runs on unmount or before next effect; componentWillUnmount is a class method"
          },
          {
            "id": 20,
            "question": "What are error boundaries in React?",
            "options": [
              "Components that catch JavaScript errors in child components",
              "Hooks for handling errors",
              "Styling components",
              "State management components"
            ],
            "answer": "Components that catch JavaScript errors in child components"
          },
          {
            "id": 21,
            "question": "How do you optimize React app bundle size?",
            "options": [
              "Using code splitting, tree shaking, and lazy loading",
              "Using inline styles",
              "Using more dependencies",
              "Using class components only"
            ],
            "answer": "Using code splitting, tree shaking, and lazy loading"
          },
          {
            "id": 22,
            "question": "What is the use of useSyncExternalStore hook?",
            "options": [
              "Subscribe to external stores and ensure consistent UI updates",
              "Manage state internally",
              "Handle effects",
              "Memoize functions"
            ],
            "answer": "Subscribe to external stores and ensure consistent UI updates"
          },
          {
            "id": 23,
            "question": "What is React Server Components?",
            "options": [
              "Components rendered on the server without sending JavaScript to the client",
              "Client-only components",
              "Styling components",
              "Routing components"
            ],
            "answer": "Components rendered on the server without sending JavaScript to the client"
          },
          {
            "id": 24,
            "question": "What is the purpose of React’s useTransition hook?",
            "options": [
              "To mark state updates as non-urgent and keep UI responsive",
              "To manage forms",
              "To handle errors",
              "To style components"
            ],
            "answer": "To mark state updates as non-urgent and keep UI responsive"
          },
          {
            "id": 25,
            "question": "How does React batching work?",
            "options": [
              "Groups multiple state updates into a single render for performance",
              "Updates each state separately",
              "Ignores some state updates",
              "Manages side effects"
            ],
            "answer": "Groups multiple state updates into a single render for performance"
          },
          {
            "id": 26,
            "question": "What is React.lazy used for?",
            "options": [
              "Lazy loading components to split bundles",
              "State management",
              "Event handling",
              "Styling"
            ],
            "answer": "Lazy loading components to split bundles"
          },
          {
            "id": 27,
            "question": "What is the difference between React context and Redux?",
            "options": [
              "Context is simpler for passing data; Redux is a full state management library",
              "Both are the same",
              "Context manages side effects",
              "Redux is for styling"
            ],
            "answer": "Context is simpler for passing data; Redux is a full state management library"
          },
          {
            "id": 28,
            "question": "What is memoization in React?",
            "options": [
              "Caching results to avoid expensive recalculations",
              "Creating new components",
              "Managing props",
              "Handling side effects"
            ],
            "answer": "Caching results to avoid expensive recalculations"
          },
          {
            "id": 29,
            "question": "What is the role of useEffect's dependency array?",
            "options": [
              "Controls when the effect runs based on dependencies",
              "Is optional and ignored",
              "Runs effects synchronously",
              "Manages state"
            ],
            "answer": "Controls when the effect runs based on dependencies"
          },
          {
            "id": 30,
            "question": "How can you prevent unnecessary renders in React?",
            "options": [
              "Using React.memo, useCallback, and useMemo hooks",
              "Using only useState",
              "Using class components",
              "Avoiding JSX"
            ],
            "answer": "Using React.memo, useCallback, and useMemo hooks"
          }
        ]
      },
      {
        "id": "t5",
        "name": "React Expert",
        "duration": 45,
        "questions": [
          {
            "id": 1,
            "question": "Explain the architecture of React Fiber and its benefits.",
            "options": [
              "React Fiber is a reimplementation of React’s core algorithm for incremental rendering, enabling interruptible and prioritized updates.",
              "React Fiber is a new UI library.",
              "React Fiber manages routing in React apps.",
              "React Fiber replaces Redux."
            ],
            "answer": "React Fiber is a reimplementation of React’s core algorithm for incremental rendering, enabling interruptible and prioritized updates."
          },
          {
            "id": 2,
            "question": "How does React handle scheduling of updates internally?",
            "options": [
              "Using a priority-based task scheduler to interrupt and resume rendering.",
              "All updates are synchronous.",
              "Updates are queued and run sequentially without interruption.",
              "Updates run in a web worker."
            ],
            "answer": "Using a priority-based task scheduler to interrupt and resume rendering."
          },
          {
            "id": 3,
            "question": "What are the key differences between React Server Components and Client Components?",
            "options": [
              "Server Components render on the server without sending JS to the client; Client Components run on the client with full interactivity.",
              "They are the same.",
              "Server Components run in the browser.",
              "Client Components do not support hooks."
            ],
            "answer": "Server Components render on the server without sending JS to the client; Client Components run on the client with full interactivity."
          },
          {
            "id": 4,
            "question": "How does React achieve concurrency, and what are its implications?",
            "options": [
              "React concurrency allows interruptible rendering and prioritization of tasks to keep the UI responsive.",
              "React concurrency makes all renders synchronous.",
              "Concurrency is handled outside React by the browser.",
              "React concurrency disables hooks."
            ],
            "answer": "React concurrency allows interruptible rendering and prioritization of tasks to keep the UI responsive."
          },
          {
            "id": 5,
            "question": "Explain the use of the useTransition hook with an example use case.",
            "options": [
              "useTransition marks updates as non-urgent to avoid blocking user input, e.g., deferring a search results update.",
              "useTransition manages state in class components.",
              "useTransition is for styling transitions.",
              "useTransition replaces useEffect."
            ],
            "answer": "useTransition marks updates as non-urgent to avoid blocking user input, e.g., deferring a search results update."
          },
          {
            "id": 6,
            "question": "What strategies can be used for state management in large-scale React applications?",
            "options": [
              "Combination of Context API, Redux/MobX, server state libraries, and hooks.",
              "Using only useState.",
              "Using only class components.",
              "Using inline styles."
            ],
            "answer": "Combination of Context API, Redux/MobX, server state libraries, and hooks."
          },
          {
            "id": 7,
            "question": "How does React’s reconciliation algorithm work with keys in lists?",
            "options": [
              "Keys help React identify changed elements to minimize DOM updates.",
              "Keys add styling.",
              "Keys are ignored by React.",
              "Keys only work with hooks."
            ],
            "answer": "Keys help React identify changed elements to minimize DOM updates."
          },
          {
            "id": 8,
            "question": "Explain how Suspense works with data fetching libraries like React Query.",
            "options": [
              "Suspense pauses rendering until data is fetched, showing fallback UI meanwhile.",
              "Suspense caches data automatically.",
              "Suspense handles errors.",
              "Suspense replaces useEffect."
            ],
            "answer": "Suspense pauses rendering until data is fetched, showing fallback UI meanwhile."
          },
          {
            "id": 9,
            "question": "What are the challenges with server-side rendering in React and how can they be mitigated?",
            "options": [
              "Hydration mismatches, data fetching, and client-server code differences; mitigated with careful SSR strategies and hydration checks.",
              "SSR causes memory leaks.",
              "SSR is synchronous only.",
              "SSR disables hooks."
            ],
            "answer": "Hydration mismatches, data fetching, and client-server code differences; mitigated with careful SSR strategies and hydration checks."
          },
          {
            "id": 10,
            "question": "Describe the role of React Profiler and how it helps in performance optimization.",
            "options": [
              "Profiler measures render timings and highlights unnecessary renders.",
              "Profiler manages state.",
              "Profiler manages side effects.",
              "Profiler replaces useMemo."
            ],
            "answer": "Profiler measures render timings and highlights unnecessary renders."
          },
          {
            "id": 11,
            "question": "How would you implement code-splitting at route and component level in React?",
            "options": [
              "Using React.lazy with Suspense for components and dynamic import for routes.",
              "Using Redux.",
              "Using inline scripts.",
              "Using hooks only."
            ],
            "answer": "Using React.lazy with Suspense for components and dynamic import for routes."
          },
          {
            "id": 12,
            "question": "What is the use of useSyncExternalStore and when should it be used?",
            "options": [
              "It subscribes to external stores and keeps React state in sync, important for concurrent rendering.",
              "It manages local state.",
              "It handles errors.",
              "It is a styling API."
            ],
            "answer": "It subscribes to external stores and keeps React state in sync, important for concurrent rendering."
          },
          {
            "id": 13,
            "question": "Explain React's batching behavior and how it improves performance.",
            "options": [
              "Batches multiple state updates into a single render to reduce re-render overhead.",
              "Runs every state update separately.",
              "Ignores some updates.",
              "Manages event handling."
            ],
            "answer": "Batches multiple state updates into a single render to reduce re-render overhead."
          },
          {
            "id": 14,
            "question": "What are React Server Components and what benefits do they offer?",
            "options": [
              "Render on the server without sending JS to the client, reducing bundle size and improving performance.",
              "Run only in the browser.",
              "Manage routing.",
              "Handle styling."
            ],
            "answer": "Render on the server without sending JS to the client, reducing bundle size and improving performance."
          },
          {
            "id": 15,
            "question": "Describe how to handle complex forms efficiently in React.",
            "options": [
              "Use libraries like Formik or React Hook Form for better state management and validation.",
              "Use plain HTML forms only.",
              "Use useEffect to manage forms.",
              "Use Redux only."
            ],
            "answer": "Use libraries like Formik or React Hook Form for better state management and validation."
          },
          {
            "id": 16,
            "question": "How can you optimize rendering of large lists in React?",
            "options": [
              "Use virtualization libraries like react-window or react-virtualized.",
              "Render all items at once.",
              "Use inline styles.",
              "Use useEffect."
            ],
            "answer": "Use virtualization libraries like react-window or react-virtualized."
          },
          {
            "id": 17,
            "question": "What are some anti-patterns in React development?",
            "options": [
              "Mutating state directly, overusing useEffect, not memoizing expensive functions.",
              "Using hooks.",
              "Using components.",
              "Using JSX."
            ],
            "answer": "Mutating state directly, overusing useEffect, not memoizing expensive functions."
          },
          {
            "id": 18,
            "question": "Explain how you would handle accessibility in React applications.",
            "options": [
              "Use semantic HTML, ARIA attributes, and accessible components.",
              "Use only divs.",
              "Ignore keyboard navigation.",
              "Use inline styles only."
            ],
            "answer": "Use semantic HTML, ARIA attributes, and accessible components."
          },
          {
            "id": 19,
            "question": "What is hydration mismatch and how to fix it?",
            "options": [
              "When server-rendered markup doesn't match client render; fix by consistent data and avoiding non-deterministic code.",
              "Styling issue.",
              "A routing problem.",
              "A build issue."
            ],
            "answer": "When server-rendered markup doesn't match client render; fix by consistent data and avoiding non-deterministic code."
          },
          {
            "id": 20,
            "question": "Describe the concept of render props and when to use them.",
            "options": [
              "Technique for sharing code by passing a function as a prop to control rendering.",
              "A React hook.",
              "A class component.",
              "A type of event handler."
            ],
            "answer": "Technique for sharing code by passing a function as a prop to control rendering."
          },
          {
            "id": 21,
            "question": "How does React handle reconciliation with portals?",
            "options": [
              "Portals render outside the DOM hierarchy but React still manages updates and reconciliation.",
              "Portals break reconciliation.",
              "Portals require manual DOM updates.",
              "Portals don't support hooks."
            ],
            "answer": "Portals render outside the DOM hierarchy but React still manages updates and reconciliation."
          },
          {
            "id": 22,
            "question": "What are the implications of using inline functions in JSX on performance?",
            "options": [
              "Creates new function instances causing unnecessary re-renders if not memoized.",
              "Improves performance.",
              "Does not affect performance.",
              "Prevents re-renders."
            ],
            "answer": "Creates new function instances causing unnecessary re-renders if not memoized."
          },
          {
            "id": 23,
            "question": "Explain the use of useImperativeHandle hook with an example.",
            "options": [
              "Customizes the ref instance value exposed to parent components.",
              "Manages state.",
              "Triggers side effects.",
              "Renders JSX."
            ],
            "answer": "Customizes the ref instance value exposed to parent components."
          },
          {
            "id": 24,
            "question": "What is the role of suspense in React concurrent mode for data fetching?",
            "options": [
              "Suspense allows declarative waiting for asynchronous data before rendering.",
              "Handles errors.",
              "Manages state.",
              "Styles components."
            ],
            "answer": "Suspense allows declarative waiting for asynchronous data before rendering."
          },
          {
            "id": 25,
            "question": "How does React differentiate between function components and class components internally?",
            "options": [
              "Function components are simpler and do not have lifecycle methods; class components have full lifecycle APIs.",
              "They are the same.",
              "Only class components can use hooks.",
              "Function components manage refs differently."
            ],
            "answer": "Function components are simpler and do not have lifecycle methods; class components have full lifecycle APIs."
          },
          {
            "id": 26,
            "question": "What is the purpose of the useDebugValue hook?",
            "options": [
              "Display custom labels in React DevTools for custom hooks.",
              "Manage state.",
              "Handle side effects.",
              "Render JSX."
            ],
            "answer": "Display custom labels in React DevTools for custom hooks."
          },
          {
            "id": 27,
            "question": "How can you implement optimistic UI updates in React?",
            "options": [
              "Update the UI immediately before server confirmation, then rollback on failure.",
              "Wait for server response before updating.",
              "Use CSS animations.",
              "Use useEffect only."
            ],
            "answer": "Update the UI immediately before server confirmation, then rollback on failure."
          },
          {
            "id": 28,
            "question": "What are some best practices for component composition in React?",
            "options": [
              "Use props.children, higher-order components, and render props to compose components.",
              "Use global variables.",
              "Use inline styles.",
              "Avoid composition."
            ],
            "answer": "Use props.children, higher-order components, and render props to compose components."
          },
          {
            "id": 29,
            "question": "Explain the concept of a controlled vs uncontrolled component with forms.",
            "options": [
              "Controlled components have React state control inputs; uncontrolled rely on DOM.",
              "Both are uncontrolled.",
              "Both are controlled.",
              "Only uncontrolled can have validation."
            ],
            "answer": "Controlled components have React state control inputs; uncontrolled rely on DOM."
          },
          {
            "id": 30,
            "question": "How do React hooks preserve state between renders?",
            "options": [
              "Hooks use internal React mechanisms to persist state across function calls.",
              "Hooks use local variables.",
              "Hooks use props only.",
              "Hooks do not preserve state."
            ],
            "answer": "Hooks use internal React mechanisms to persist state across function calls."
          }
        ]
      },
      {
        "id": "t6",
        "name": "React Coding",
        "duration": 50,
        "questions": [
          {
            "id": 1,
            "question": "Create a controlled input component in React that updates its value on user input.",
            "options": [
              "Use useState to hold the input value and update it on onChange.",
              "Use useEffect for input value.",
              "Use refs to read input value.",
              "Use Redux for input value."
            ],
            "answer": "Use useState to hold the input value and update it on onChange."
          },
          {
            "id": 2,
            "question": "How would you implement a simple to-do list with add and delete functionality in React?",
            "options": [
              "Use useState to manage an array of to-dos and update on add/delete.",
              "Use useEffect only.",
              "Use localStorage only.",
              "Use Redux only."
            ],
            "answer": "Use useState to manage an array of to-dos and update on add/delete."
          },
          {
            "id": 3,
            "question": "Write a React component that fetches data from an API on mount and displays a loading indicator.",
            "options": [
              "Use useEffect to fetch data and useState to manage loading and data.",
              "Use componentDidMount only.",
              "Use Redux only.",
              "Use useMemo for fetching."
            ],
            "answer": "Use useEffect to fetch data and useState to manage loading and data."
          },
          {
            "id": 4,
            "question": "How to implement a reusable modal component in React?",
            "options": [
              "Create a component with conditional rendering and portal support.",
              "Use alerts.",
              "Use CSS only.",
              "Use class components only."
            ],
            "answer": "Create a component with conditional rendering and portal support."
          },
          {
            "id": 5,
            "question": "How do you implement debouncing in React for a search input?",
            "options": [
              "Use useEffect with a timeout and cleanup for delay.",
              "Use useState only.",
              "Use setInterval.",
              "Use Redux."
            ],
            "answer": "Use useEffect with a timeout and cleanup for delay."
          },
          {
            "id": 6,
            "question": "Implement a custom hook for form input validation.",
            "options": [
              "Create a hook that manages input state, validation rules, and errors.",
              "Use useState only.",
              "Use useEffect only.",
              "Use inline functions."
            ],
            "answer": "Create a hook that manages input state, validation rules, and errors."
          },
          {
            "id": 7,
            "question": "How would you optimize a React list rendering 1000+ items?",
            "options": [
              "Use virtualization libraries like react-window.",
              "Render all items directly.",
              "Use CSS scroll.",
              "Use useEffect."
            ],
            "answer": "Use virtualization libraries like react-window."
          },
          {
            "id": 8,
            "question": "Write a React component to toggle between dark and light themes.",
            "options": [
              "Use useState to toggle a theme variable and apply conditional classes.",
              "Use CSS only.",
              "Use Redux only.",
              "Use refs."
            ],
            "answer": "Use useState to toggle a theme variable and apply conditional classes."
          },
          {
            "id": 9,
            "question": "Implement a timer countdown component with start, pause, and reset.",
            "options": [
              "Use useState and useEffect with setInterval and cleanup.",
              "Use setTimeout only.",
              "Use Redux only.",
              "Use componentDidMount."
            ],
            "answer": "Use useState and useEffect with setInterval and cleanup."
          },
          {
            "id": 10,
            "question": "How to handle errors in React data fetching?",
            "options": [
              "Use try-catch inside async functions and set error state.",
              "Ignore errors.",
              "Use componentDidCatch.",
              "Use Redux only."
            ],
            "answer": "Use try-catch inside async functions and set error state."
          },
          {
            "id": 11,
            "question": "Implement a paginated list component in React.",
            "options": [
              "Manage current page in state and slice data accordingly.",
              "Render all data.",
              "Use infinite scroll only.",
              "Use useEffect only."
            ],
            "answer": "Manage current page in state and slice data accordingly."
          },
          {
            "id": 12,
            "question": "How would you debounce an API call in a React search box?",
            "options": [
              "Use useEffect with a timer to delay the API call until typing stops.",
              "Call API on every key press.",
              "Use Redux.",
              "Use refs."
            ],
            "answer": "Use useEffect with a timer to delay the API call until typing stops."
          },
          {
            "id": 13,
            "question": "Write a React component to fetch and display user profiles with pagination.",
            "options": [
              "Use useState for data and page, useEffect to fetch on page change.",
              "Render all profiles at once.",
              "Use class components only.",
              "Use Redux only."
            ],
            "answer": "Use useState for data and page, useEffect to fetch on page change."
          },
          {
            "id": 14,
            "question": "Create a multi-step form wizard in React.",
            "options": [
              "Use state to track current step and conditionally render step components.",
              "Render all steps at once.",
              "Use Redux only.",
              "Use useEffect only."
            ],
            "answer": "Use state to track current step and conditionally render step components."
          },
          {
            "id": 15,
            "question": "How to memoize expensive function results in React components?",
            "options": [
              "Use useMemo hook with dependency array.",
              "Use useState only.",
              "Use refs only.",
              "Use Redux."
            ],
            "answer": "Use useMemo hook with dependency array."
          },
          {
            "id": 16,
            "question": "Implement infinite scrolling in a React component.",
            "options": [
              "Listen to scroll events and fetch more data when reaching bottom.",
              "Load all data initially.",
              "Use useEffect only.",
              "Use Redux only."
            ],
            "answer": "Listen to scroll events and fetch more data when reaching bottom."
          },
          {
            "id": 17,
            "question": "Write a React component that uses context to share theme data across the app.",
            "options": [
              "Create a context provider and consume it using useContext hook.",
              "Use props drilling.",
              "Use Redux only.",
              "Use local state only."
            ],
            "answer": "Create a context provider and consume it using useContext hook."
          },
          {
            "id": 18,
            "question": "How would you create a reusable button component with different styles?",
            "options": [
              "Use props to control styles and conditional classNames.",
              "Create multiple components for each style.",
              "Use inline styles only.",
              "Use CSS only."
            ],
            "answer": "Use props to control styles and conditional classNames."
          },
          {
            "id": 19,
            "question": "Implement a custom hook to detect window resize events.",
            "options": [
              "Use useEffect to add event listener and cleanup on unmount.",
              "Use useState only.",
              "Use useMemo only.",
              "Use Redux."
            ],
            "answer": "Use useEffect to add event listener and cleanup on unmount."
          },
          {
            "id": 20,
            "question": "Write a React component to toggle visibility of a dropdown menu.",
            "options": [
              "Use useState to track visibility and toggle on button click.",
              "Use CSS hover only.",
              "Use Redux only.",
              "Use refs only."
            ],
            "answer": "Use useState to track visibility and toggle on button click."
          },
          {
            "id": 21,
            "question": "How do you implement optimistic UI updates in React?",
            "options": [
              "Update UI immediately before server confirmation and rollback on failure.",
              "Wait for server response before updating UI.",
              "Use CSS animations.",
              "Use Redux only."
            ],
            "answer": "Update UI immediately before server confirmation and rollback on failure."
          },
          {
            "id": 22,
            "question": "Implement a dark mode toggle that persists user preference using localStorage.",
            "options": [
              "Use useEffect to read/write localStorage and useState for theme.",
              "Use CSS only.",
              "Use Redux only.",
              "Use refs."
            ],
            "answer": "Use useEffect to read/write localStorage and useState for theme."
          },
          {
            "id": 23,
            "question": "Write a component that fetches data and cancels the request on unmount.",
            "options": [
              "Use AbortController in fetch and cleanup in useEffect.",
              "Ignore cancellation.",
              "Use setTimeout only.",
              "Use Redux only."
            ],
            "answer": "Use AbortController in fetch and cleanup in useEffect."
          },
          {
            "id": 24,
            "question": "How do you create a reusable tooltip component in React?",
            "options": [
              "Use state to toggle visibility and portals to position tooltip.",
              "Use CSS only.",
              "Use alerts.",
              "Use refs only."
            ],
            "answer": "Use state to toggle visibility and portals to position tooltip."
          },
          {
            "id": 25,
            "question": "Implement a hook that logs component renders for debugging.",
            "options": [
              "Use useEffect to log on each render.",
              "Use useState only.",
              "Use Redux only.",
              "Use refs only."
            ],
            "answer": "Use useEffect to log on each render."
          },
          {
            "id": 26,
            "question": "Write a React component that updates document title based on state.",
            "options": [
              "Use useEffect to set document.title when state changes.",
              "Use useState only.",
              "Use Redux only.",
              "Use refs only."
            ],
            "answer": "Use useEffect to set document.title when state changes."
          },
          {
            "id": 27,
            "question": "How to implement drag and drop functionality in React?",
            "options": [
              "Use HTML5 drag and drop events or libraries like react-dnd.",
              "Use CSS animations only.",
              "Use Redux only.",
              "Use refs only."
            ],
            "answer": "Use HTML5 drag and drop events or libraries like react-dnd."
          },
          {
            "id": 28,
            "question": "Create a multi-select dropdown component in React.",
            "options": [
              "Manage selected items state and render checkboxes for options.",
              "Use select tag only.",
              "Use Redux only.",
              "Use CSS only."
            ],
            "answer": "Manage selected items state and render checkboxes for options."
          },
          {
            "id": 29,
            "question": "How do you debounce an input in React without external libraries?",
            "options": [
              "Use useEffect with setTimeout and cleanup for delay.",
              "Use useState only.",
              "Use Redux only.",
              "Use refs only."
            ],
            "answer": "Use useEffect with setTimeout and cleanup for delay."
          },
          {
            "id": 30,
            "question": "Write a React component that conditionally renders children based on user permissions.",
            "options": [
              "Check permission prop and conditionally render children.",
              "Render all children always.",
              "Use Redux only.",
              "Use CSS only."
            ],
            "answer": "Check permission prop and conditionally render children."
          }
        ]
      }
    ]
  },
  {
    "id": "c5",
    "name": "Node Js",
    "tests": [
      {
        "id": "node_basic",
        "name": "Node.js Basic",
        "duration": 30,
        "questions": [
          {
            "id": 1,
            "question": "What is Node.js?",
            "options": [
              "A JavaScript runtime built on Chrome's V8 engine",
              "A front-end framework",
              "A database",
              "A CSS preprocessor"
            ],
            "answer": "A JavaScript runtime built on Chrome's V8 engine"
          },
          {
            "id": 2,
            "question": "Which module is used to create a web server in Node.js?",
            "options": ["http", "fs", "url", "path"],
            "answer": "http"
          },
          {
            "id": 3,
            "question": "How do you import modules in Node.js?",
            "options": ["require()", "import()", "include()", "load()"],
            "answer": "require()"
          },
          {
            "id": 4,
            "question": "What is npm?",
            "options": [
              "Node package manager",
              "Network programming manager",
              "Node performance monitor",
              "New programming method"
            ],
            "answer": "Node package manager"
          },
          {
            "id": 5,
            "question": "Which function is used to read files asynchronously in Node.js?",
            "options": [
              "fs.readFile()",
              "fs.read()",
              "fs.open()",
              "fs.readSync()"
            ],
            "answer": "fs.readFile()"
          },
          {
            "id": 6,
            "question": "What is the default scope of variables in Node.js modules?",
            "options": [
              "Module scoped",
              "Global scoped",
              "Block scoped",
              "Function scoped"
            ],
            "answer": "Module scoped"
          },
          {
            "id": 7,
            "question": "Which object provides information about the current process in Node.js?",
            "options": ["process", "os", "global", "module"],
            "answer": "process"
          },
          {
            "id": 8,
            "question": "How do you create a new Buffer in Node.js?",
            "options": [
              "Buffer.alloc(size)",
              "new Buffer(size)",
              "Buffer.create(size)",
              "Buffer.new(size)"
            ],
            "answer": "Buffer.alloc(size)"
          },
          {
            "id": 9,
            "question": "Which event triggers when a stream finishes reading data?",
            "options": ["end", "finish", "close", "data"],
            "answer": "end"
          },
          {
            "id": 10,
            "question": "What is the use of the 'path' module?",
            "options": [
              "To handle and transform file paths",
              "To handle networking",
              "To process streams",
              "To interact with databases"
            ],
            "answer": "To handle and transform file paths"
          },
          {
            "id": 11,
            "question": "Which command initializes a new Node.js project?",
            "options": ["npm init", "node init", "npm start", "node create"],
            "answer": "npm init"
          },
          {
            "id": 12,
            "question": "What is 'callback hell'?",
            "options": [
              "Nested callbacks that are hard to read",
              "A type of error",
              "A debugging tool",
              "A Node.js module"
            ],
            "answer": "Nested callbacks that are hard to read"
          },
          {
            "id": 13,
            "question": "How to install a package globally with npm?",
            "options": [
              "npm install -g <package>",
              "npm install <package>",
              "npm global add <package>",
              "npm global install <package>"
            ],
            "answer": "npm install -g <package>"
          },
          {
            "id": 14,
            "question": "Which method is used to write data to a stream?",
            "options": [
              "stream.write()",
              "stream.read()",
              "stream.pipe()",
              "stream.open()"
            ],
            "answer": "stream.write()"
          },
          {
            "id": 15,
            "question": "What is the role of the event loop in Node.js?",
            "options": [
              "Handles asynchronous callbacks",
              "Manages CPU scheduling",
              "Handles synchronous code",
              "Manages memory"
            ],
            "answer": "Handles asynchronous callbacks"
          },
          {
            "id": 16,
            "question": "Which global object represents the current module?",
            "options": ["module", "exports", "require", "__dirname"],
            "answer": "module"
          },
          {
            "id": 17,
            "question": "How to exit a Node.js process?",
            "options": ["process.exit()", "exit()", "stop()", "end()"],
            "answer": "process.exit()"
          },
          {
            "id": 18,
            "question": "What is the purpose of the 'package.json' file?",
            "options": [
              "Manage project metadata and dependencies",
              "Store source code",
              "Manage environment variables",
              "Handle server configuration"
            ],
            "answer": "Manage project metadata and dependencies"
          },
          {
            "id": 19,
            "question": "Which method is used to log output to the console?",
            "options": ["console.log()", "print()", "log()", "console.print()"],
            "answer": "console.log()"
          },
          {
            "id": 20,
            "question": "What does 'asynchronous' mean in Node.js?",
            "options": [
              "Operations that don’t block the main thread",
              "Operations that block the main thread",
              "Operations that use multiple threads",
              "Operations that run only once"
            ],
            "answer": "Operations that don’t block the main thread"
          },
          {
            "id": 21,
            "question": "What is the role of the 'fs' module?",
            "options": [
              "File system operations",
              "Network operations",
              "Cryptography",
              "Process management"
            ],
            "answer": "File system operations"
          },
          {
            "id": 22,
            "question": "Which function creates a readable stream from a file?",
            "options": [
              "fs.createReadStream()",
              "fs.readFile()",
              "fs.open()",
              "fs.read()"
            ],
            "answer": "fs.createReadStream()"
          },
          {
            "id": 23,
            "question": "Which object is used to export functions or variables from a module?",
            "options": ["exports", "module", "require", "global"],
            "answer": "exports"
          },
          {
            "id": 24,
            "question": "How do you read environment variables in Node.js?",
            "options": ["process.env", "env()", "environment", "config.env"],
            "answer": "process.env"
          },
          {
            "id": 25,
            "question": "What is the default file executed when running 'node .'?",
            "options": ["index.js", "main.js", "app.js", "server.js"],
            "answer": "index.js"
          },
          {
            "id": 26,
            "question": "How do you handle errors in asynchronous callbacks?",
            "options": [
              "Check if error argument is present and handle it",
              "Ignore errors",
              "Use try-catch always",
              "Use synchronous functions"
            ],
            "answer": "Check if error argument is present and handle it"
          },
          {
            "id": 27,
            "question": "What is 'npm' used for?",
            "options": [
              "Manage packages and dependencies",
              "Run Node.js applications",
              "Build native modules",
              "Test Node.js code"
            ],
            "answer": "Manage packages and dependencies"
          },
          {
            "id": 28,
            "question": "Which method is used to write files asynchronously?",
            "options": [
              "fs.writeFile()",
              "fs.write()",
              "fs.writeSync()",
              "fs.saveFile()"
            ],
            "answer": "fs.writeFile()"
          },
          {
            "id": 29,
            "question": "How can you create a simple HTTP server?",
            "options": [
              "Using http.createServer() method",
              "Using fs module",
              "Using child_process module",
              "Using net module"
            ],
            "answer": "Using http.createServer() method"
          },
          {
            "id": 30,
            "question": "Which Node.js version introduced async/await?",
            "options": ["7.6", "6.0", "8.0", "10.0"],
            "answer": "7.6"
          }
        ]
      },
      {
        "id": "node_beginner",
        "name": "Node.js Beginner",
        "duration": 40,
        "questions": [
          {
            "id": 1,
            "question": "How can you handle multiple asynchronous operations in Node.js?",
            "options": [
              "Callbacks",
              "Promises",
              "Async/Await",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 2,
            "question": "Which of these is a core Node.js module?",
            "options": ["express", "http", "lodash", "react"],
            "answer": "http"
          },
          {
            "id": 3,
            "question": "What does the 'require.cache' object do?",
            "options": [
              "Caches modules after the first load",
              "Caches data from databases",
              "Caches HTTP requests",
              "Caches environment variables"
            ],
            "answer": "Caches modules after the first load"
          },
          {
            "id": 4,
            "question": "How do you make a Node.js script executable from the command line?",
            "options": [
              "Add shebang (#!/usr/bin/env node) at the top",
              "Use npm start",
              "Use node run",
              "Use chmod 777"
            ],
            "answer": "Add shebang (#!/usr/bin/env node) at the top"
          },
          {
            "id": 5,
            "question": "What is the purpose of the 'cluster' module?",
            "options": [
              "To create child processes that share server ports",
              "To cluster database connections",
              "To create worker threads",
              "To handle HTTP requests"
            ],
            "answer": "To create child processes that share server ports"
          },
          {
            "id": 6,
            "question": "How can you handle uncaught exceptions in Node.js?",
            "options": [
              "Using process.on('uncaughtException') event",
              "Try-catch in all functions",
              "Using domain module",
              "Using middleware"
            ],
            "answer": "Using process.on('uncaughtException') event"
          },
          {
            "id": 7,
            "question": "Which method is used to append data to a file asynchronously?",
            "options": [
              "fs.appendFile()",
              "fs.writeFile()",
              "fs.write()",
              "fs.append()"
            ],
            "answer": "fs.appendFile()"
          },
          {
            "id": 8,
            "question": "What is the use of 'process.nextTick()'?",
            "options": [
              "To schedule a callback to be invoked in the next event loop iteration",
              "To pause the event loop",
              "To exit the process",
              "To delay execution for milliseconds"
            ],
            "answer": "To schedule a callback to be invoked in the next event loop iteration"
          },
          {
            "id": 9,
            "question": "Which method is used to decode URL query strings?",
            "options": [
              "querystring.parse()",
              "url.parse()",
              "decodeURIComponent()",
              "decodeURI()"
            ],
            "answer": "querystring.parse()"
          },
          {
            "id": 10,
            "question": "What does the 'os' module provide?",
            "options": [
              "Operating system-related utility methods and properties",
              "Networking utilities",
              "Filesystem utilities",
              "HTTP server utilities"
            ],
            "answer": "Operating system-related utility methods and properties"
          },
          {
            "id": 11,
            "question": "How do you create an HTTP POST request handler with Express?",
            "options": [
              "app.post('/route', callback)",
              "app.get('/route', callback)",
              "http.post('/route', callback)",
              "app.put('/route', callback)"
            ],
            "answer": "app.post('/route', callback)"
          },
          {
            "id": 12,
            "question": "What is middleware in Express?",
            "options": [
              "Functions that have access to request and response objects and next middleware",
              "Functions to serve static files",
              "Error handlers only",
              "Route handlers only"
            ],
            "answer": "Functions that have access to request and response objects and next middleware"
          },
          {
            "id": 13,
            "question": "How do you send JSON response in Express?",
            "options": [
              "res.json(data)",
              "res.sendJSON(data)",
              "res.send(data)",
              "res.write(data)"
            ],
            "answer": "res.json(data)"
          },
          {
            "id": 14,
            "question": "What does the 'body-parser' middleware do?",
            "options": [
              "Parses incoming request bodies in middleware",
              "Handles cookies",
              "Logs requests",
              "Manages sessions"
            ],
            "answer": "Parses incoming request bodies in middleware"
          },
          {
            "id": 15,
            "question": "Which module helps to create routes in Express?",
            "options": [
              "express.Router()",
              "http.Router()",
              "router.create()",
              "express.route()"
            ],
            "answer": "express.Router()"
          },
          {
            "id": 16,
            "question": "How to handle CORS in Express?",
            "options": [
              "Use cors middleware package",
              "Use body-parser",
              "Use helmet",
              "Use cookie-parser"
            ],
            "answer": "Use cors middleware package"
          },
          {
            "id": 17,
            "question": "What is 'req.params' used for?",
            "options": [
              "To access route parameters in Express",
              "To access query strings",
              "To access body data",
              "To set headers"
            ],
            "answer": "To access route parameters in Express"
          },
          {
            "id": 18,
            "question": "What is the purpose of 'nodemon'?",
            "options": [
              "Automatically restart server on file changes",
              "Manage dependencies",
              "Deploy apps",
              "Run tests"
            ],
            "answer": "Automatically restart server on file changes"
          },
          {
            "id": 19,
            "question": "How do you read a file synchronously?",
            "options": [
              "fs.readFileSync()",
              "fs.readFile()",
              "fs.open()",
              "fs.read()"
            ],
            "answer": "fs.readFileSync()"
          },
          {
            "id": 20,
            "question": "Which environment variable defines the port to listen on?",
            "options": [
              "process.env.PORT",
              "process.port",
              "process.env.SERVER_PORT",
              "process.portNumber"
            ],
            "answer": "process.env.PORT"
          },
          {
            "id": 21,
            "question": "Which command installs packages and saves them to package.json?",
            "options": [
              "npm install <package> --save",
              "npm install <package>",
              "npm install <package> --global",
              "npm start"
            ],
            "answer": "npm install <package> --save"
          },
          {
            "id": 22,
            "question": "What is the purpose of 'express.static()'?",
            "options": [
              "To serve static files such as images and CSS",
              "To handle API routes",
              "To manage sessions",
              "To parse JSON"
            ],
            "answer": "To serve static files such as images and CSS"
          },
          {
            "id": 23,
            "question": "Which database is commonly used with Node.js?",
            "options": ["MongoDB", "MySQL", "PostgreSQL", "All of the above"],
            "answer": "All of the above"
          },
          {
            "id": 24,
            "question": "What does 'npm run start' do?",
            "options": [
              "Runs the start script defined in package.json",
              "Starts the Node.js server automatically",
              "Updates packages",
              "Starts nodemon"
            ],
            "answer": "Runs the start script defined in package.json"
          },
          {
            "id": 25,
            "question": "What is the purpose of 'module.exports'?",
            "options": [
              "Export functionality from a module",
              "Import functionality",
              "Declare a global variable",
              "Create a new module"
            ],
            "answer": "Export functionality from a module"
          },
          {
            "id": 26,
            "question": "Which method is used to parse URL parameters?",
            "options": [
              "url.parse()",
              "querystring.parse()",
              "decodeURI()",
              "decodeURIComponent()"
            ],
            "answer": "url.parse()"
          },
          {
            "id": 27,
            "question": "How can you debug Node.js applications?",
            "options": [
              "Using console.log, node inspect, or debugging tools in editors",
              "Only console.log",
              "Only debugger statements",
              "Only third-party tools"
            ],
            "answer": "Using console.log, node inspect, or debugging tools in editors"
          },
          {
            "id": 28,
            "question": "What does 'process.argv' provide?",
            "options": [
              "An array of command-line arguments",
              "Process environment variables",
              "Current process id",
              "Memory usage"
            ],
            "answer": "An array of command-line arguments"
          },
          {
            "id": 29,
            "question": "How can you schedule a function to run after 5 seconds?",
            "options": [
              "setTimeout(func, 5000)",
              "setInterval(func, 5000)",
              "process.nextTick(func)",
              "clearTimeout(func)"
            ],
            "answer": "setTimeout(func, 5000)"
          },
          {
            "id": 30,
            "question": "Which of the following is true about event emitters?",
            "options": [
              "They allow registering and triggering custom events",
              "They only handle errors",
              "They are synchronous only",
              "They replace callbacks"
            ],
            "answer": "They allow registering and triggering custom events"
          }
        ]
      },
      {
        "id": "node_intermediate",
        "name": "Node.js Intermediate",
        "duration": 45,
        "questions": [
          {
            "id": 1,
            "question": "What is the difference between process.nextTick() and setImmediate()?",
            "options": [
              "process.nextTick() runs before the next event loop tick, setImmediate() after",
              "They do the same thing",
              "setImmediate() runs before process.nextTick()",
              "Both run synchronously"
            ],
            "answer": "process.nextTick() runs before the next event loop tick, setImmediate() after"
          },
          {
            "id": 2,
            "question": "What is the purpose of the 'stream' module?",
            "options": [
              "To handle streaming data",
              "To manage HTTP servers",
              "To manage file systems",
              "To parse JSON"
            ],
            "answer": "To handle streaming data"
          },
          {
            "id": 3,
            "question": "What is a promise in Node.js?",
            "options": [
              "An object representing eventual completion or failure of an async operation",
              "A callback function",
              "An error handler",
              "A synchronous function"
            ],
            "answer": "An object representing eventual completion or failure of an async operation"
          },
          {
            "id": 4,
            "question": "Which Node.js module provides utilities for working with file paths?",
            "options": ["path", "fs", "url", "http"],
            "answer": "path"
          },
          {
            "id": 5,
            "question": "How can you create a child process in Node.js?",
            "options": [
              "Using child_process.spawn() or exec()",
              "Using process.fork()",
              "Using cluster module",
              "All of the above"
            ],
            "answer": "All of the above"
          },
          {
            "id": 6,
            "question": "What is middleware chaining in Express?",
            "options": [
              "Multiple middleware functions executed sequentially",
              "Middleware functions in parallel",
              "Middleware functions executed only on error",
              "Single middleware per route"
            ],
            "answer": "Multiple middleware functions executed sequentially"
          },
          {
            "id": 7,
            "question": "How does 'require()' cache modules?",
            "options": [
              "Modules are loaded once and cached for future use",
              "Modules are loaded every time",
              "Only core modules are cached",
              "Modules are never cached"
            ],
            "answer": "Modules are loaded once and cached for future use"
          },
          {
            "id": 8,
            "question": "What is the difference between 'exports' and 'module.exports'?",
            "options": [
              "module.exports is the actual exported object; exports is a shortcut",
              "They are the same",
              "exports overrides module.exports",
              "module.exports overrides exports"
            ],
            "answer": "module.exports is the actual exported object; exports is a shortcut"
          },
          {
            "id": 9,
            "question": "How do you handle file uploads in Node.js?",
            "options": [
              "Use middleware like multer to parse multipart/form-data",
              "Use express.static",
              "Use body-parser",
              "Use fs.readFile()"
            ],
            "answer": "Use middleware like multer to parse multipart/form-data"
          },
          {
            "id": 10,
            "question": "What is the purpose of the 'crypto' module?",
            "options": [
              "Provides cryptographic functionalities such as hashing and encryption",
              "Handles HTTP encryption only",
              "Handles file encryption only",
              "Manages tokens"
            ],
            "answer": "Provides cryptographic functionalities such as hashing and encryption"
          },
          {
            "id": 11,
            "question": "How can you prevent callback hell?",
            "options": [
              "Use Promises and async/await",
              "Use nested callbacks",
              "Use synchronous functions",
              "Use events only"
            ],
            "answer": "Use Promises and async/await"
          },
          {
            "id": 12,
            "question": "How can you debug memory leaks in Node.js?",
            "options": [
              "Use Chrome DevTools heap snapshots and profiling",
              "Use console.log",
              "Use npm packages only",
              "Restart the app"
            ],
            "answer": "Use Chrome DevTools heap snapshots and profiling"
          },
          {
            "id": 13,
            "question": "What is the difference between 'app.use()' and 'app.all()' in Express?",
            "options": [
              "app.use() mounts middleware; app.all() handles all HTTP methods for a route",
              "Both do the same",
              "app.all() mounts middleware",
              "app.use() handles all HTTP methods"
            ],
            "answer": "app.use() mounts middleware; app.all() handles all HTTP methods for a route"
          },
          {
            "id": 14,
            "question": "What is the role of the 'events' module?",
            "options": [
              "Provides event-driven programming via EventEmitter class",
              "Handles HTTP requests",
              "Manages file systems",
              "Handles streams"
            ],
            "answer": "Provides event-driven programming via EventEmitter class"
          },
          {
            "id": 15,
            "question": "How do you handle database connections in Node.js to prevent memory leaks?",
            "options": [
              "Use connection pools and close connections properly",
              "Open new connections per query",
              "Use global variables",
              "Use synchronous connections"
            ],
            "answer": "Use connection pools and close connections properly"
          },
          {
            "id": 16,
            "question": "What does 'fs.watch()' do?",
            "options": [
              "Watches for file changes and triggers callbacks",
              "Reads file contents",
              "Creates files",
              "Deletes files"
            ],
            "answer": "Watches for file changes and triggers callbacks"
          },
          {
            "id": 17,
            "question": "How can you protect a Node.js app against common security risks?",
            "options": [
              "Use helmet, sanitize inputs, validate data, use HTTPS",
              "Use only HTTP",
              "Use no dependencies",
              "Disable CORS"
            ],
            "answer": "Use helmet, sanitize inputs, validate data, use HTTPS"
          },
          {
            "id": 18,
            "question": "What is a readable stream in Node.js?",
            "options": [
              "An abstraction for a source from which data can be read",
              "An abstraction for a sink to write data",
              "An HTTP client",
              "A file descriptor"
            ],
            "answer": "An abstraction for a source from which data can be read"
          },
          {
            "id": 19,
            "question": "What is the purpose of the 'cluster' module?",
            "options": [
              "To create child processes to handle load balancing across CPU cores",
              "To manage database clusters",
              "To create child threads",
              "To monitor processes"
            ],
            "answer": "To create child processes to handle load balancing across CPU cores"
          },
          {
            "id": 20,
            "question": "Which Node.js feature supports microservices architecture?",
            "options": [
              "Cluster module and child processes",
              "Single-threaded event loop",
              "Callback functions",
              "Global variables"
            ],
            "answer": "Cluster module and child processes"
          },
          {
            "id": 21,
            "question": "How do you implement session management in Express?",
            "options": [
              "Use express-session middleware",
              "Store data in cookies only",
              "Use localStorage",
              "Use Redis only"
            ],
            "answer": "Use express-session middleware"
          },
          {
            "id": 22,
            "question": "How to handle file downloads in Express?",
            "options": [
              "Use res.download() or res.sendFile()",
              "Use res.json()",
              "Use fs.readFile()",
              "Use express.static only"
            ],
            "answer": "Use res.download() or res.sendFile()"
          },
          {
            "id": 23,
            "question": "What is the benefit of using async/await in Node.js?",
            "options": [
              "Makes asynchronous code look synchronous and easier to read",
              "Improves performance",
              "Avoids errors",
              "Replaces Promises"
            ],
            "answer": "Makes asynchronous code look synchronous and easier to read"
          },
          {
            "id": 24,
            "question": "How do you secure sensitive data in environment variables?",
            "options": [
              "Use .env files and packages like dotenv",
              "Hardcode values",
              "Use public JSON files",
              "Use global variables"
            ],
            "answer": "Use .env files and packages like dotenv"
          },
          {
            "id": 25,
            "question": "How can you prevent blocking the event loop?",
            "options": [
              "Avoid heavy synchronous computations, use asynchronous APIs",
              "Use global variables",
              "Use synchronous APIs",
              "Use callbacks only"
            ],
            "answer": "Avoid heavy synchronous computations, use asynchronous APIs"
          },
          {
            "id": 26,
            "question": "What is 'npm audit' used for?",
            "options": [
              "To scan and report known vulnerabilities in dependencies",
              "To update npm packages",
              "To run tests",
              "To manage scripts"
            ],
            "answer": "To scan and report known vulnerabilities in dependencies"
          },
          {
            "id": 27,
            "question": "What is the difference between 'fs.readFile' and 'fs.createReadStream'?",
            "options": [
              "readFile reads entire file into memory; createReadStream reads chunks",
              "They do the same",
              "readFile reads chunks; createReadStream reads entire file",
              "readFile is synchronous; createReadStream is asynchronous"
            ],
            "answer": "readFile reads entire file into memory; createReadStream reads chunks"
          },
          {
            "id": 28,
            "question": "How to implement rate limiting in Express?",
            "options": [
              "Use middleware like express-rate-limit",
              "Use helmet",
              "Use cors",
              "Use body-parser"
            ],
            "answer": "Use middleware like express-rate-limit"
          },
          {
            "id": 29,
            "question": "How do you log HTTP requests in Express?",
            "options": [
              "Use morgan middleware",
              "Use console.log() only",
              "Use body-parser",
              "Use helmet"
            ],
            "answer": "Use morgan middleware"
          },
          {
            "id": 30,
            "question": "What is the role of 'process.env.NODE_ENV'?",
            "options": [
              "Indicates the environment mode (development, production, etc.)",
              "Specifies Node.js version",
              "Defines process id",
              "Configures memory limits"
            ],
            "answer": "Indicates the environment mode (development, production, etc.)"
          }
        ]
      },
      {
        "id": "node_advanced",
        "name": "Node.js Advanced",
        "duration": 50,
        "questions": [
          {
            "id": 1,
            "question": "How does Node.js handle concurrency given it is single-threaded?",
            "options": [
              "Through the event loop and non-blocking I/O",
              "Using multiple threads",
              "Using child processes only",
              "Using synchronous callbacks"
            ],
            "answer": "Through the event loop and non-blocking I/O"
          },
          {
            "id": 2,
            "question": "Explain the concept of event loop phases in Node.js.",
            "options": [
              "Timers, pending callbacks, idle/prepare, poll, check, close callbacks",
              "Initialization, running, cleanup",
              "Async, sync, and blocking phases",
              "Setup, execution, teardown"
            ],
            "answer": "Timers, pending callbacks, idle/prepare, poll, check, close callbacks"
          },
          {
            "id": 3,
            "question": "What are worker threads in Node.js and when would you use them?",
            "options": [
              "Allow parallel JavaScript execution for CPU intensive tasks",
              "To run asynchronous code",
              "To handle HTTP requests",
              "To spawn child processes"
            ],
            "answer": "Allow parallel JavaScript execution for CPU intensive tasks"
          },
          {
            "id": 4,
            "question": "How can you monitor and profile a Node.js application?",
            "options": [
              "Using tools like Node.js inspector, clinic.js, and Chrome DevTools",
              "Using console.log only",
              "Using npm scripts",
              "Using global variables"
            ],
            "answer": "Using tools like Node.js inspector, clinic.js, and Chrome DevTools"
          },
          {
            "id": 5,
            "question": "What is the difference between process.nextTick() and setImmediate() in detail?",
            "options": [
              "process.nextTick() executes before any I/O events, setImmediate() after the poll phase",
              "Both execute immediately",
              "setImmediate() is deprecated",
              "process.nextTick() schedules a macro-task"
            ],
            "answer": "process.nextTick() executes before any I/O events, setImmediate() after the poll phase"
          },
          {
            "id": 6,
            "question": "Explain how you can implement load balancing in Node.js.",
            "options": [
              "Using cluster module or external load balancers like Nginx",
              "Using multiple event loops",
              "Using child_process only",
              "Using global variables"
            ],
            "answer": "Using cluster module or external load balancers like Nginx"
          },
          {
            "id": 7,
            "question": "What is the difference between synchronous and asynchronous streams?",
            "options": [
              "Streams are inherently asynchronous; synchronous streams block the event loop",
              "Streams are synchronous by default",
              "Both are the same",
              "Asynchronous streams use callbacks; synchronous do not"
            ],
            "answer": "Streams are inherently asynchronous; synchronous streams block the event loop"
          },
          {
            "id": 8,
            "question": "How can you handle backpressure in streams?",
            "options": [
              "By pausing readable streams and managing writable streams buffer",
              "By ignoring it",
              "By using buffers only",
              "By converting to synchronous code"
            ],
            "answer": "By pausing readable streams and managing writable streams buffer"
          },
          {
            "id": 9,
            "question": "What are native addons in Node.js?",
            "options": [
              "Modules written in C/C++ for performance",
              "Modules written in JavaScript only",
              "Third party npm packages",
              "Modules for networking"
            ],
            "answer": "Modules written in C/C++ for performance"
          },
          {
            "id": 10,
            "question": "How do you manage environment-specific configurations in Node.js apps?",
            "options": [
              "Using environment variables and config files loaded based on NODE_ENV",
              "Using hardcoded values",
              "Using global variables",
              "Using package.json only"
            ],
            "answer": "Using environment variables and config files loaded based on NODE_ENV"
          },
          {
            "id": 11,
            "question": "What is the role of the 'async_hooks' module?",
            "options": [
              "Provides API to track asynchronous resources",
              "Handles HTTP requests",
              "Manages child processes",
              "Logs errors"
            ],
            "answer": "Provides API to track asynchronous resources"
          },
          {
            "id": 12,
            "question": "Explain the differences between CommonJS and ES modules in Node.js.",
            "options": [
              "CommonJS uses require(), ES modules use import/export syntax",
              "They are the same",
              "ES modules are deprecated",
              "CommonJS is asynchronous only"
            ],
            "answer": "CommonJS uses require(), ES modules use import/export syntax"
          },
          {
            "id": 13,
            "question": "What is the use of the 'vm' module?",
            "options": [
              "To run code within V8 virtual machine contexts",
              "To handle HTTP requests",
              "To create child processes",
              "To manage database connections"
            ],
            "answer": "To run code within V8 virtual machine contexts"
          },
          {
            "id": 14,
            "question": "How would you debug a live Node.js application in production?",
            "options": [
              "Using node-inspect with remote debugging or logs with monitoring tools",
              "Restart the app",
              "Use console.log only",
              "Use nodemon"
            ],
            "answer": "Using node-inspect with remote debugging or logs with monitoring tools"
          },
          {
            "id": 15,
            "question": "Explain how you can implement microservices architecture using Node.js.",
            "options": [
              "By breaking the app into smaller independent services communicating via HTTP or messaging queues",
              "By using monolithic architecture",
              "By using global variables",
              "By using callbacks"
            ],
            "answer": "By breaking the app into smaller independent services communicating via HTTP or messaging queues"
          },
          {
            "id": 16,
            "question": "What is the event emitter pattern?",
            "options": [
              "A design pattern where objects emit named events to notify listeners",
              "A debugging pattern",
              "A database pattern",
              "A streaming pattern"
            ],
            "answer": "A design pattern where objects emit named events to notify listeners"
          },
          {
            "id": 17,
            "question": "How can you avoid blocking the event loop with CPU-intensive tasks?",
            "options": [
              "Offload to worker threads or child processes",
              "Use synchronous functions",
              "Use global variables",
              "Ignore it"
            ],
            "answer": "Offload to worker threads or child processes"
          },
          {
            "id": 18,
            "question": "How do you secure Node.js applications against SQL injection?",
            "options": [
              "Use parameterized queries or ORM libraries",
              "Use string concatenation",
              "Use only NoSQL databases",
              "Avoid databases"
            ],
            "answer": "Use parameterized queries or ORM libraries"
          },
          {
            "id": 19,
            "question": "What is 'cluster.fork()' used for?",
            "options": [
              "To create new worker processes sharing server ports",
              "To create child threads",
              "To fork database connections",
              "To clone modules"
            ],
            "answer": "To create new worker processes sharing server ports"
          },
          {
            "id": 20,
            "question": "Explain the purpose of the 'buffer' module in Node.js.",
            "options": [
              "Handles raw binary data",
              "Handles JSON",
              "Manages streams",
              "Manages events"
            ],
            "answer": "Handles raw binary data"
          },
          {
            "id": 21,
            "question": "How do you implement graceful shutdown in a Node.js server?",
            "options": [
              "Handle process signals to close connections and clean resources before exit",
              "Call process.exit() immediately",
              "Ignore signals",
              "Restart the server"
            ],
            "answer": "Handle process signals to close connections and clean resources before exit"
          },
          {
            "id": 22,
            "question": "What is a 'callback queue' in Node.js?",
            "options": [
              "A queue that holds callbacks to be executed after the current operation",
              "A list of synchronous tasks",
              "A queue for database queries",
              "A buffer for streams"
            ],
            "answer": "A queue that holds callbacks to be executed after the current operation"
          },
          {
            "id": 23,
            "question": "How do you handle uncaught promise rejections?",
            "options": [
              "Listen to 'unhandledRejection' event on process",
              "Ignore them",
              "Use try-catch everywhere",
              "Use synchronous code"
            ],
            "answer": "Listen to 'unhandledRejection' event on process"
          },
          {
            "id": 24,
            "question": "What is the use of the 'perf_hooks' module?",
            "options": [
              "Provides performance timing APIs",
              "Handles HTTP performance",
              "Manages databases",
              "Handles streams"
            ],
            "answer": "Provides performance timing APIs"
          },
          {
            "id": 25,
            "question": "Explain the concept of 'zones' in Node.js.",
            "options": [
              "Contexts for managing asynchronous operations (experimental)",
              "Event loop phases",
              "Worker threads",
              "Child processes"
            ],
            "answer": "Contexts for managing asynchronous operations (experimental)"
          },
          {
            "id": 26,
            "question": "How can you improve performance in Node.js?",
            "options": [
              "Use caching, avoid blocking code, optimize database queries",
              "Use global variables",
              "Use synchronous code",
              "Ignore errors"
            ],
            "answer": "Use caching, avoid blocking code, optimize database queries"
          },
          {
            "id": 27,
            "question": "What is the difference between fork() and spawn() in child_process?",
            "options": [
              "fork() spawns new Node.js process; spawn() can run any command",
              "They are the same",
              "spawn() is for Node.js only",
              "fork() is deprecated"
            ],
            "answer": "fork() spawns new Node.js process; spawn() can run any command"
          },
          {
            "id": 28,
            "question": "How do you handle file system permissions in Node.js?",
            "options": [
              "Use fs.chmod() and fs.chown() methods",
              "Use npm packages",
              "Use environment variables",
              "Use global variables"
            ],
            "answer": "Use fs.chmod() and fs.chown() methods"
          },
          {
            "id": 29,
            "question": "How can you prevent cross-site scripting (XSS) in Node.js apps?",
            "options": [
              "Sanitize user inputs and use templating engines with auto-escaping",
              "Allow all inputs",
              "Use HTTP only",
              "Disable scripts"
            ],
            "answer": "Sanitize user inputs and use templating engines with auto-escaping"
          },
          {
            "id": 30,
            "question": "What is the 'require.resolve()' function used for?",
            "options": [
              "To get the resolved filename of a module",
              "To load a module",
              "To cache a module",
              "To remove a module"
            ],
            "answer": "To get the resolved filename of a module"
          }
        ]
      },
      {
        "id": "node_expert",
        "name": "Node.js Expert",
        "duration": 60,
        "questions": [
          {
            "id": 1,
            "question": "Explain the detailed working of Node.js event loop.",
            "options": [
              "It manages phases like timers, pending callbacks, idle, poll, check, and close callbacks to handle async operations",
              "It handles synchronous code only",
              "It manages only I/O",
              "It executes everything in parallel"
            ],
            "answer": "It manages phases like timers, pending callbacks, idle, poll, check, and close callbacks to handle async operations"
          },
          {
            "id": 2,
            "question": "How would you implement horizontal scaling in Node.js?",
            "options": [
              "Use the cluster module or run multiple Node instances behind a load balancer",
              "Use worker threads",
              "Use single-threaded approach",
              "Use synchronous code"
            ],
            "answer": "Use the cluster module or run multiple Node instances behind a load balancer"
          },
          {
            "id": 3,
            "question": "How do you write a custom Node.js native addon?",
            "options": [
              "Use C/C++ with N-API or NAN to build native modules",
              "Write JavaScript only",
              "Use Python bindings",
              "Use child_process"
            ],
            "answer": "Use C/C++ with N-API or NAN to build native modules"
          },
          {
            "id": 4,
            "question": "Explain the internals of V8 engine used by Node.js.",
            "options": [
              "V8 compiles JavaScript to machine code, manages garbage collection, and optimizes performance",
              "V8 interprets code only",
              "V8 handles network requests",
              "V8 is a database"
            ],
            "answer": "V8 compiles JavaScript to machine code, manages garbage collection, and optimizes performance"
          },
          {
            "id": 5,
            "question": "How would you debug memory leaks and performance bottlenecks in production Node.js apps?",
            "options": [
              "Use heap snapshots, CPU profiling, monitoring tools like New Relic or AppDynamics",
              "Use console.log only",
              "Restart app frequently",
              "Ignore issues"
            ],
            "answer": "Use heap snapshots, CPU profiling, monitoring tools like New Relic or AppDynamics"
          },
          {
            "id": 6,
            "question": "What are Zones and AsyncLocalStorage in Node.js?",
            "options": [
              "Mechanisms to maintain context across async calls",
              "Event loop phases",
              "Modules for child processes",
              "Modules for buffers"
            ],
            "answer": "Mechanisms to maintain context across async calls"
          },
          {
            "id": 7,
            "question": "How does the 'async_hooks' API work internally?",
            "options": [
              "Tracks lifecycle of async resources and allows custom hooks",
              "Manages child processes",
              "Handles database calls",
              "Manages HTTP headers"
            ],
            "answer": "Tracks lifecycle of async resources and allows custom hooks"
          },
          {
            "id": 8,
            "question": "Explain the advantages and limitations of using worker threads in Node.js.",
            "options": [
              "Allows parallel CPU-intensive work; limited by communication overhead and API complexity",
              "Replaces cluster module",
              "Only for I/O tasks",
              "Deprecated in latest versions"
            ],
            "answer": "Allows parallel CPU-intensive work; limited by communication overhead and API complexity"
          },
          {
            "id": 9,
            "question": "How do you securely manage secrets and environment variables in Node.js in production?",
            "options": [
              "Use vault services, environment variables, and encrypted config files",
              "Hardcode secrets",
              "Use .env files in production",
              "Use global variables"
            ],
            "answer": "Use vault services, environment variables, and encrypted config files"
          },
          {
            "id": 10,
            "question": "How does Node.js handle TLS/SSL termination?",
            "options": [
              "Using the 'tls' and 'https' modules to create secure servers",
              "It doesn't support TLS",
              "Handled by the OS only",
              "Using third-party tools only"
            ],
            "answer": "Using the 'tls' and 'https' modules to create secure servers"
          },
          {
            "id": 11,
            "question": "What is the difference between 'process.exit()' and 'process.kill()'?",
            "options": [
              "process.exit() terminates the process; process.kill() sends signals to processes",
              "They are the same",
              "process.kill() is deprecated",
              "process.exit() is asynchronous"
            ],
            "answer": "process.exit() terminates the process; process.kill() sends signals to processes"
          },
          {
            "id": 12,
            "question": "Explain the use of HTTP/2 in Node.js.",
            "options": [
              "Provides multiplexing, header compression, and server push for better performance",
              "Only supports HTTP/1.1",
              "Handles database connections",
              "Replaces TCP"
            ],
            "answer": "Provides multiplexing, header compression, and server push for better performance"
          },
          {
            "id": 13,
            "question": "How can you manage backpressure in Node.js streams?",
            "options": [
              "Use 'pause' and 'resume' methods and proper buffering",
              "Ignore it",
              "Use synchronous streams",
              "Use only small files"
            ],
            "answer": "Use 'pause' and 'resume' methods and proper buffering"
          },
          {
            "id": 14,
            "question": "What are the best practices for error handling in Node.js?",
            "options": [
              "Use try-catch with async/await, handle promise rejections, and centralized error handling",
              "Ignore errors",
              "Use only callbacks",
              "Log errors only"
            ],
            "answer": "Use try-catch with async/await, handle promise rejections, and centralized error handling"
          },
          {
            "id": 15,
            "question": "How do you implement microservices communication in Node.js?",
            "options": [
              "Using REST, gRPC, message queues like RabbitMQ or Kafka",
              "Using global variables",
              "Using localStorage",
              "Using monoliths"
            ],
            "answer": "Using REST, gRPC, message queues like RabbitMQ or Kafka"
          },
          {
            "id": 16,
            "question": "Explain Node.js bootstrapping process.",
            "options": [
              "It loads modules, initializes event loop, runs main script",
              "It compiles code only",
              "It initializes the database",
              "It configures OS"
            ],
            "answer": "It loads modules, initializes event loop, runs main script"
          },
          {
            "id": 17,
            "question": "How does the garbage collector work in Node.js?",
            "options": [
              "Uses V8 garbage collector with generational and incremental collection",
              "No garbage collection",
              "Manual memory management",
              "Uses OS-level garbage collection"
            ],
            "answer": "Uses V8 garbage collector with generational and incremental collection"
          },
          {
            "id": 18,
            "question": "How do you optimize startup time for large Node.js applications?",
            "options": [
              "Use lazy loading, minimize dependencies, and precompile code",
              "Load everything upfront",
              "Use global variables",
              "Ignore optimization"
            ],
            "answer": "Use lazy loading, minimize dependencies, and precompile code"
          },
          {
            "id": 19,
            "question": "What is the role of 'libuv' in Node.js?",
            "options": [
              "It provides the event loop and asynchronous I/O",
              "It's the JS engine",
              "It's a database",
              "It's a compiler"
            ],
            "answer": "It provides the event loop and asynchronous I/O"
          },
          {
            "id": 20,
            "question": "How do you implement graceful degradation and fallback in Node.js apps?",
            "options": [
              "Use try-catch, fallbacks, and circuit breakers",
              "Ignore errors",
              "Use synchronous code",
              "Use multiple threads"
            ],
            "answer": "Use try-catch, fallbacks, and circuit breakers"
          },
          {
            "id": 21,
            "question": "How does Node.js differ from traditional web servers?",
            "options": [
              "Node.js uses event-driven, non-blocking I/O; traditional servers often use multi-threading",
              "Node.js is synchronous",
              "Traditional servers are event-driven",
              "They are the same"
            ],
            "answer": "Node.js uses event-driven, non-blocking I/O; traditional servers often use multi-threading"
          },
          {
            "id": 22,
            "question": "What is the use of the 'worker_threads' module?",
            "options": [
              "To perform CPU-intensive JavaScript operations in parallel threads",
              "To handle HTTP requests",
              "To manage file systems",
              "To spawn child processes"
            ],
            "answer": "To perform CPU-intensive JavaScript operations in parallel threads"
          },
          {
            "id": 23,
            "question": "Explain the lifecycle of a Node.js HTTP request.",
            "options": [
              "Incoming request → Event loop phases → Callbacks → Response sent",
              "Request is synchronous",
              "Handled by OS only",
              "No lifecycle"
            ],
            "answer": "Incoming request → Event loop phases → Callbacks → Response sent"
          },
          {
            "id": 24,
            "question": "What is the role of 'async_hooks' in tracing asynchronous code?",
            "options": [
              "Tracks async resource creation, execution, and destruction",
              "Manages modules",
              "Handles I/O",
              "Manages event loop"
            ],
            "answer": "Tracks async resource creation, execution, and destruction"
          },
          {
            "id": 25,
            "question": "How do you implement authentication securely in Node.js?",
            "options": [
              "Use JWT, OAuth, hashed passwords, HTTPS",
              "Store passwords as plain text",
              "Use HTTP only",
              "Use global variables"
            ],
            "answer": "Use JWT, OAuth, hashed passwords, HTTPS"
          },
          {
            "id": 26,
            "question": "How can you prevent Denial of Service (DoS) attacks in Node.js?",
            "options": [
              "Use rate limiting, validate inputs, and use firewalls",
              "Ignore them",
              "Use synchronous code",
              "Restart server"
            ],
            "answer": "Use rate limiting, validate inputs, and use firewalls"
          },
          {
            "id": 27,
            "question": "How do you implement logging in production Node.js applications?",
            "options": [
              "Use libraries like Winston or Bunyan with log rotation",
              "Use console.log only",
              "Write logs to database",
              "Ignore logs"
            ],
            "answer": "Use libraries like Winston or Bunyan with log rotation"
          },
          {
            "id": 28,
            "question": "Explain how to implement websockets in Node.js.",
            "options": [
              "Use libraries like ws or socket.io for real-time communication",
              "Use HTTP only",
              "Use TCP sockets only",
              "Use global variables"
            ],
            "answer": "Use libraries like ws or socket.io for real-time communication"
          },
          {
            "id": 29,
            "question": "What is the purpose of the 'domain' module?",
            "options": [
              "Provides a way to handle multiple different I/O operations as a single group",
              "Handles HTTP requests",
              "Manages file systems",
              "Is deprecated"
            ],
            "answer": "Provides a way to handle multiple different I/O operations as a single group"
          },
          {
            "id": 30,
            "question": "How do you handle versioning in Node.js APIs?",
            "options": [
              "Use URL versioning or headers",
              "Use different apps",
              "Use environment variables",
              "Ignore it"
            ],
            "answer": "Use URL versioning or headers"
          }
        ]
      },
      {
        "id": "node_coding",
        "name": "Node.js Coding Questions",
        "duration": 45,
        "questions": [
          {
            "id": 1,
            "question": "How do you create a simple HTTP server in Node.js that listens on port 3000?",
            "options": [
              "const http = require('http'); http.createServer((req, res) => { res.end('Hello'); }).listen(3000);",
              "const server = new Server(); server.listen(3000);",
              "const http = require('http'); http.listen(3000);",
              "const express = require('express'); express.listen(3000);"
            ],
            "answer": "const http = require('http'); http.createServer((req, res) => { res.end('Hello'); }).listen(3000);"
          },
          {
            "id": 2,
            "question": "Which method is used to read a file asynchronously in Node.js?",
            "options": [
              "fs.readFile()",
              "fs.readFileSync()",
              "fs.open()",
              "fs.read()"
            ],
            "answer": "fs.readFile()"
          },
          {
            "id": 3,
            "question": "What will be the output of console.log(require.cache)?",
            "options": [
              "An object containing cached modules",
              "An empty array",
              "Undefined",
              "A list of installed npm packages"
            ],
            "answer": "An object containing cached modules"
          },
          {
            "id": 4,
            "question": "How do you import the built-in 'path' module in Node.js?",
            "options": [
              "const path = require('path');",
              "import path from 'path';",
              "const path = import('path');",
              "require('path');"
            ],
            "answer": "const path = require('path');"
          },
          {
            "id": 5,
            "question": "What is the purpose of process.nextTick() in Node.js?",
            "options": [
              "Defers the execution of a function until the next event loop iteration",
              "Ends the current process",
              "Schedules a timeout",
              "Creates a new thread"
            ],
            "answer": "Defers the execution of a function until the next event loop iteration"
          },
          {
            "id": 6,
            "question": "Which event does a readable stream emit when there is no more data to read?",
            "options": ["end", "finish", "close", "data"],
            "answer": "end"
          },
          {
            "id": 7,
            "question": "How can you create a simple file write stream in Node.js?",
            "options": [
              "fs.createWriteStream('file.txt');",
              "fs.writeFile('file.txt');",
              "fs.writeStream('file.txt');",
              "fs.openWriteStream('file.txt');"
            ],
            "answer": "fs.createWriteStream('file.txt');"
          },
          {
            "id": 8,
            "question": "Which module helps to work with file paths in a platform-independent way?",
            "options": ["path", "fs", "os", "url"],
            "answer": "path"
          },
          {
            "id": 9,
            "question": "How do you handle uncaught exceptions in Node.js?",
            "options": [
              "process.on('uncaughtException', handlerFunction);",
              "try { } catch { }",
              "Use Express error middleware",
              "process.catch(handlerFunction);"
            ],
            "answer": "process.on('uncaughtException', handlerFunction);"
          },
          {
            "id": 10,
            "question": "What does the 'cluster' module do in Node.js?",
            "options": [
              "Allows you to create child processes that share server ports",
              "Manages file clustering",
              "Is used for database connections",
              "Handles caching"
            ],
            "answer": "Allows you to create child processes that share server ports"
          },
          {
            "id": 11,
            "question": "Which method can be used to convert a Buffer to a string in Node.js?",
            "options": [
              "buffer.toString()",
              "buffer.stringify()",
              "buffer.toJSON()",
              "buffer.decode()"
            ],
            "answer": "buffer.toString()"
          },
          {
            "id": 12,
            "question": "How do you stop a running server instance created by http.createServer()?",
            "options": [
              "server.close();",
              "server.stop();",
              "server.end();",
              "server.destroy();"
            ],
            "answer": "server.close();"
          },
          {
            "id": 13,
            "question": "What does 'require.main === module' check in Node.js?",
            "options": [
              "If the current file is the entry point",
              "If the module is cached",
              "If the module has exports",
              "If the module is imported"
            ],
            "answer": "If the current file is the entry point"
          },
          {
            "id": 14,
            "question": "Which Node.js core module is used to create TCP servers?",
            "options": ["net", "http", "tls", "dgram"],
            "answer": "net"
          },
          {
            "id": 15,
            "question": "What is the purpose of the 'stream' module in Node.js?",
            "options": [
              "To handle streaming data such as files or network connections",
              "To parse JSON data",
              "To work with buffers only",
              "To manage database queries"
            ],
            "answer": "To handle streaming data such as files or network connections"
          },
          {
            "id": 16,
            "question": "How can you read environment variables in Node.js?",
            "options": [
              "process.env.VARIABLE_NAME",
              "env.get('VARIABLE_NAME')",
              "process.getEnv('VARIABLE_NAME')",
              "env.VARIABLE_NAME"
            ],
            "answer": "process.env.VARIABLE_NAME"
          },
          {
            "id": 17,
            "question": "Which method is used to asynchronously append data to a file in Node.js?",
            "options": [
              "fs.appendFile()",
              "fs.writeFile()",
              "fs.writeFileSync()",
              "fs.appendFileSync()"
            ],
            "answer": "fs.appendFile()"
          },
          {
            "id": 18,
            "question": "What will the following code output?\nconsole.log(typeof exports);",
            "options": ["object", "function", "undefined", "string"],
            "answer": "object"
          },
          {
            "id": 19,
            "question": "Which function in the 'crypto' module is used to create a hash?",
            "options": [
              "crypto.createHash()",
              "crypto.hash()",
              "crypto.createCipher()",
              "crypto.digest()"
            ],
            "answer": "crypto.createHash()"
          },
          {
            "id": 20,
            "question": "Which npm command installs all dependencies listed in package.json?",
            "options": ["npm install", "npm init", "npm update", "npm start"],
            "answer": "npm install"
          },
          {
            "id": 21,
            "question": "What does the 'express.json()' middleware do?",
            "options": [
              "Parses incoming requests with JSON payloads",
              "Serves static files",
              "Handles cookies",
              "Handles sessions"
            ],
            "answer": "Parses incoming requests with JSON payloads"
          },
          {
            "id": 22,
            "question": "How do you send a 404 status code response in Express.js?",
            "options": [
              "res.status(404).send('Not Found');",
              "res.send(404, 'Not Found');",
              "res.code(404).send('Not Found');",
              "res.error(404, 'Not Found');"
            ],
            "answer": "res.status(404).send('Not Found');"
          },
          {
            "id": 23,
            "question": "What is the event emitted by an EventEmitter when an error occurs?",
            "options": ["error", "exception", "fail", "fault"],
            "answer": "error"
          },
          {
            "id": 24,
            "question": "Which method in the http module sends a response header to the client?",
            "options": [
              "res.writeHead()",
              "res.setHeader()",
              "res.write()",
              "res.end()"
            ],
            "answer": "res.writeHead()"
          },
          {
            "id": 25,
            "question": "What is the purpose of the 'util.promisify()' method?",
            "options": [
              "Convert callback-based functions to return Promises",
              "Promisify the entire Node.js process",
              "Convert promises into callbacks",
              "Create a new Promise"
            ],
            "answer": "Convert callback-based functions to return Promises"
          },
          {
            "id": 26,
            "question": "Which npm package is commonly used for authentication in Node.js?",
            "options": ["passport", "bcrypt", "cors", "dotenv"],
            "answer": "passport"
          },
          {
            "id": 27,
            "question": "What does the 'child_process' module provide?",
            "options": [
              "Ability to spawn new processes",
              "Access to the file system",
              "Network utilities",
              "Stream utilities"
            ],
            "answer": "Ability to spawn new processes"
          },
          {
            "id": 28,
            "question": "Which of these is NOT a valid way to export a module in Node.js?",
            "options": [
              "exports = function() {}",
              "module.exports = function() {}",
              "exports.myFunc = function() {}",
              "module.exports.myFunc = function() {}"
            ],
            "answer": "exports = function() {}"
          },
          {
            "id": 29,
            "question": "How do you create an Express router instance?",
            "options": [
              "const router = require('express').Router();",
              "const router = express.Router();",
              "const router = new Router();",
              "const router = Router.create();"
            ],
            "answer": "const router = require('express').Router();"
          },
          {
            "id": 30,
            "question": "What will 'Buffer.alloc(10)' do?",
            "options": [
              "Create a buffer of 10 bytes initialized with zeros",
              "Create an uninitialized buffer of 10 bytes",
              "Allocate 10 buffers",
              "Create a buffer with 10 random bytes"
            ],
            "answer": "Create a buffer of 10 bytes initialized with zeros"
          },
          {
            "id": 31,
            "question": "Which method do you use to parse URL query strings in Node.js?",
            "options": [
              "querystring.parse()",
              "url.parse()",
              "fs.readFile()",
              "http.request()"
            ],
            "answer": "querystring.parse()"
          },
          {
            "id": 32,
            "question": "Which event signals that a client has connected to a TCP server?",
            "options": ["connection", "connect", "data", "ready"],
            "answer": "connection"
          },
          {
            "id": 33,
            "question": "What is the purpose of the 'os' module in Node.js?",
            "options": [
              "Provides operating system-related utility methods and properties",
              "Handles HTTP requests",
              "Manages file streams",
              "Creates child processes"
            ],
            "answer": "Provides operating system-related utility methods and properties"
          },
          {
            "id": 34,
            "question": "Which function is used to create a TCP client in Node.js?",
            "options": [
              "net.createConnection()",
              "net.createServer()",
              "http.createClient()",
              "tcp.connect()"
            ],
            "answer": "net.createConnection()"
          },
          {
            "id": 35,
            "question": "What does 'npm run build' generally do in a Node.js project?",
            "options": [
              "Runs the build script defined in package.json",
              "Installs dependencies",
              "Starts the server",
              "Updates npm"
            ],
            "answer": "Runs the build script defined in package.json"
          },
          {
            "id": 36,
            "question": "Which event indicates that a writable stream has finished writing data?",
            "options": ["finish", "end", "close", "drain"],
            "answer": "finish"
          },
          {
            "id": 37,
            "question": "What is the role of 'express.static()' middleware?",
            "options": [
              "Serves static files like images, CSS, JavaScript",
              "Parses JSON bodies",
              "Handles sessions",
              "Routes HTTP requests"
            ],
            "answer": "Serves static files like images, CSS, JavaScript"
          },
          {
            "id": 38,
            "question": "How do you exit a Node.js process with success?",
            "options": [
              "process.exit(0);",
              "process.end();",
              "exit(0);",
              "process.terminate();"
            ],
            "answer": "process.exit(0);"
          },
          {
            "id": 39,
            "question": "Which of the following is a way to create a promise-based delay in Node.js?",
            "options": [
              "new Promise(resolve => setTimeout(resolve, ms))",
              "setTimeout(() => {}, ms)",
              "Promise.delay(ms)",
              "delay(ms)"
            ],
            "answer": "new Promise(resolve => setTimeout(resolve, ms))"
          },
          {
            "id": 40,
            "question": "Which package helps manage cross-origin resource sharing (CORS) in Express apps?",
            "options": ["cors", "helmet", "morgan", "cookie-parser"],
            "answer": "cors"
          }
        ]
      }
    ]
  },
  {
   
    "id": "c6",
    "name": "Express Js",
    "tests": [
{
  "id": "express_basic",
  "name": "Express Basic",
  "duration": 30,
  "questions": [
    {
      "id": 1,
      "question": "How do you create a new Express application?",
      "options": [
        "const app = require('express')();",
        "const app = express.createApp();",
        "const app = new Express();",
        "const app = require('express').app();"
      ],
      "answer": "const app = require('express')();"
    },
    {
      "id": 2,
      "question": "Which method defines a route handler for GET requests in Express?",
      "options": [
        "app.get(path, callback)",
        "app.post(path, callback)",
        "app.route(path)",
        "app.listen(port)"
      ],
      "answer": "app.get(path, callback)"
    },
    {
      "id": 3,
      "question": "How do you start an Express server listening on port 3000?",
      "options": [
        "app.listen(3000);",
        "app.run(3000);",
        "app.start(3000);",
        "express.listen(3000);"
      ],
      "answer": "app.listen(3000);"
    },
    {
      "id": 4,
      "question": "What middleware do you use to parse incoming JSON requests in Express?",
      "options": [
        "express.json()",
        "bodyParser.urlencoded()",
        "express.static()",
        "express.urlencoded()"
      ],
      "answer": "express.json()"
    },
    {
      "id": 5,
      "question": "How can you serve static files like images or CSS in Express?",
      "options": [
        "app.use(express.static('public'));",
        "app.static('public');",
        "express.serveStatic('public');",
        "app.useStatic('public');"
      ],
      "answer": "app.use(express.static('public'));"
    },
    {
      "id": 6,
      "question": "How do you access route parameters in Express?",
      "options": [
        "req.params",
        "req.query",
        "req.body",
        "req.route"
      ],
      "answer": "req.params"
    },
    {
      "id": 7,
      "question": "How do you send a JSON response in Express?",
      "options": [
        "res.json({ key: 'value' });",
        "res.sendJson({ key: 'value' });",
        "res.send({ key: 'value' });",
        "res.jsonify({ key: 'value' });"
      ],
      "answer": "res.json({ key: 'value' });"
    },
    {
      "id": 8,
      "question": "Which method ends the response process in Express?",
      "options": [
        "res.end()",
        "res.send()",
        "res.close()",
        "res.finish()"
      ],
      "answer": "res.end()"
    },
    {
      "id": 9,
      "question": "What is the purpose of the next() function in Express middleware?",
      "options": [
        "Pass control to the next middleware",
        "End the response",
        "Throw an error",
        "Send a response"
      ],
      "answer": "Pass control to the next middleware"
    },
    {
      "id": 10,
      "question": "How do you access query string parameters in Express?",
      "options": [
        "req.query",
        "req.params",
        "req.body",
        "req.headers"
      ],
      "answer": "req.query"
    },
    {
      "id": 11,
      "question": "How do you parse URL-encoded form data in Express?",
      "options": [
        "app.use(express.urlencoded({ extended: true }));",
        "app.use(express.json());",
        "app.use(bodyParser.urlencoded());",
        "app.use(bodyParser.json());"
      ],
      "answer": "app.use(express.urlencoded({ extended: true }));"
    },
    {
      "id": 12,
      "question": "How do you redirect a client to another URL in Express?",
      "options": [
        "res.redirect('/new-url');",
        "res.sendRedirect('/new-url');",
        "res.goto('/new-url');",
        "res.redirectTo('/new-url');"
      ],
      "answer": "res.redirect('/new-url');"
    },
    {
      "id": 13,
      "question": "How do you send a status code 404 in Express?",
      "options": [
        "res.sendStatus(404);",
        "res.status(404);",
        "res.error(404);",
        "res.code(404);"
      ],
      "answer": "res.sendStatus(404);"
    },
    {
      "id": 14,
      "question": "Which method sets HTTP headers in the response in Express?",
      "options": [
        "res.set(headerName, value)",
        "res.header(headerName, value)",
        "res.headers(headerName, value)",
        "res.addHeader(headerName, value)"
      ],
      "answer": "res.set(headerName, value)"
    },
    {
      "id": 15,
      "question": "How do you retrieve headers sent in a request in Express?",
      "options": [
        "req.headers",
        "req.header",
        "req.getHeaders()",
        "req.getHeader()"
      ],
      "answer": "req.headers"
    },
    {
      "id": 16,
      "question": "Which method defines middleware that runs for all HTTP methods and paths?",
      "options": [
        "app.use()",
        "app.all()",
        "app.middleware()",
        "app.run()"
      ],
      "answer": "app.use()"
    },
    {
      "id": 17,
      "question": "Which method is used to define a route that responds to all HTTP verbs?",
      "options": [
        "app.all()",
        "app.use()",
        "app.route()",
        "app.any()"
      ],
      "answer": "app.all()"
    },
    {
      "id": 18,
      "question": "How do you handle errors in Express middleware?",
      "options": [
        "Define middleware with 4 arguments: (err, req, res, next)",
        "Use try-catch blocks only",
        "Use app.error()",
        "Throw errors directly"
      ],
      "answer": "Define middleware with 4 arguments: (err, req, res, next)"
    },
    {
      "id": 19,
      "question": "How do you specify multiple handlers for a single route in Express?",
      "options": [
        "app.get('/route', handler1, handler2, ...);",
        "app.get('/route', [handler1, handler2], ...);",
        "app.route('/route').get(handler1).get(handler2);",
        "app.use('/route', handler1, handler2);"
      ],
      "answer": "app.get('/route', handler1, handler2, ...);"
    },
    {
      "id": 20,
      "question": "How do you mount a router on a path in Express?",
      "options": [
        "app.use('/path', router);",
        "app.route('/path', router);",
        "app.register('/path', router);",
        "app.attach('/path', router);"
      ],
      "answer": "app.use('/path', router);"
    },
    {
      "id": 21,
      "question": "How do you create a middleware function in Express?",
      "options": [
        "(req, res, next) => { /* middleware logic */ }",
        "(req, res) => { /* middleware logic */ }",
        "function middleware(req, res) { }",
        "function middleware(req) { }"
      ],
      "answer": "(req, res, next) => { /* middleware logic */ }"
    },
    {
      "id": 22,
      "question": "What middleware can be used to parse cookies in Express?",
      "options": [
        "cookie-parser",
        "express.cookies()",
        "express.cookieParser()",
        "Manual parsing"
      ],
      "answer": "cookie-parser"
    },
    {
      "id": 23,
      "question": "Which middleware is used for logging HTTP requests in Express?",
      "options": [
        "morgan",
        "helmet",
        "cors",
        "body-parser"
      ],
      "answer": "morgan"
    },
    {
      "id": 24,
      "question": "How do you enable Cross-Origin Resource Sharing (CORS) in Express?",
      "options": [
        "Use the cors middleware",
        "Set custom headers manually",
        "Use helmet middleware",
        "Enable HTTPS"
      ],
      "answer": "Use the cors middleware"
    },
    {
      "id": 25,
      "question": "How do you define a route with a parameter named 'id' in Express?",
      "options": [
        "app.get('/user/:id', callback);",
        "app.get('/user/id', callback);",
        "app.get('/user/?id', callback);",
        "app.get('/user/*id', callback);"
      ],
      "answer": "app.get('/user/:id', callback);"
    },
    {
      "id": 26,
      "question": "How do you send a file as a response in Express?",
      "options": [
        "res.sendFile('/path/to/file');",
        "res.send('/path/to/file');",
        "res.downloadFile('/path/to/file');",
        "res.file('/path/to/file');"
      ],
      "answer": "res.sendFile('/path/to/file');"
    },
    {
      "id": 27,
      "question": "Which middleware helps secure Express apps by setting HTTP headers?",
      "options": [
        "helmet",
        "cors",
        "morgan",
        "body-parser"
      ],
      "answer": "helmet"
    },
    {
      "id": 28,
      "question": "How do you set the default view engine in Express?",
      "options": [
        "app.set('view engine', 'ejs');",
        "app.use('view engine', 'ejs');",
        "app.engine('ejs');",
        "express.view('ejs');"
      ],
      "answer": "app.set('view engine', 'ejs');"
    },
    {
      "id": 29,
      "question": "How do you retrieve the POST request body in Express?",
      "options": [
        "req.body",
        "req.params",
        "req.query",
        "req.data"
      ],
      "answer": "req.body"
    },
    {
      "id": 30,
      "question": "Which method in Express is used to send a response?",
      "options": [
        "res.send()",
        "res.response()",
        "res.write()",
        "res.output()"
      ],
      "answer": "res.send()"
    }
  ]
},
{
  "id": "express_beginner",
  "name": "Express Beginner",
  "duration": 35,
  "questions": [
    {
      "id": 1,
      "question": "What is the default HTTP method for forms submitted in HTML?",
      "options": ["GET", "POST", "PUT", "DELETE"],
      "answer": "GET"
    },
    {
      "id": 2,
      "question": "How do you parse JSON request bodies in Express prior to v4.16?",
      "options": [
        "Using body-parser middleware",
        "express.json()",
        "express.urlencoded()",
        "No parsing needed"
      ],
      "answer": "Using body-parser middleware"
    },
    {
      "id": 3,
      "question": "How do you send an HTTP status code with a response in Express?",
      "options": [
        "res.status(200).send('OK')",
        "res.code(200).send('OK')",
        "res.sendStatus(200)",
        "Both A and C"
      ],
      "answer": "Both A and C"
    },
    {
      "id": 4,
      "question": "What is the use of req.app in Express?",
      "options": [
        "Access the Express app instance",
        "Access the current route",
        "Access middleware",
        "Access response"
      ],
      "answer": "Access the Express app instance"
    },
    {
      "id": 5,
      "question": "Which method adds a handler for POST requests to a route?",
      "options": [
        "app.post('/path', handler)",
        "app.put('/path', handler)",
        "app.get('/path', handler)",
        "app.all('/path', handler)"
      ],
      "answer": "app.post('/path', handler)"
    },
    {
      "id": 6,
      "question": "How can you get the IP address of a client in Express?",
      "options": [
        "req.ip",
        "req.connection.remoteAddress",
        "req.headers['x-forwarded-for']",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "id": 7,
      "question": "Which method can be used to set multiple HTTP headers at once?",
      "options": [
        "res.set({ 'Content-Type': 'application/json', 'X-Custom': 'value' });",
        "res.headers({ ... });",
        "res.setHeaders({ ... });",
        "res.addHeaders({ ... });"
      ],
      "answer": "res.set({ 'Content-Type': 'application/json', 'X-Custom': 'value' });"
    },
    {
      "id": 8,
      "question": "How do you serve a favicon in Express?",
      "options": [
        "Using serve-favicon middleware",
        "Using express.static",
        "Using helmet",
        "Express serves it automatically"
      ],
      "answer": "Using serve-favicon middleware"
    },
    {
      "id": 9,
      "question": "What happens if you don't call next() in middleware?",
      "options": [
        "Request hangs and does not proceed",
        "Response is sent automatically",
        "Error is thrown",
        "Middleware is skipped"
      ],
      "answer": "Request hangs and does not proceed"
    },
    {
      "id": 10,
      "question": "Which method retrieves the HTTP request method (GET, POST, etc.)?",
      "options": [
        "req.method",
        "req.type",
        "req.verb",
        "req.httpMethod"
      ],
      "answer": "req.method"
    },
    {
      "id": 11,
      "question": "How do you enable trust proxy in Express?",
      "options": [
        "app.set('trust proxy', true);",
        "app.enable('trust proxy');",
        "app.use(trustProxy());",
        "Express enables by default"
      ],
      "answer": "app.set('trust proxy', true);"
    },
    {
      "id": 12,
      "question": "What is the purpose of res.locals?",
      "options": [
        "Store variables available to the response lifecycle",
        "Send JSON data",
        "Set cookies",
        "Redirect response"
      ],
      "answer": "Store variables available to the response lifecycle"
    },
    {
      "id": 13,
      "question": "How do you serve HTML files from the filesystem in Express?",
      "options": [
        "res.sendFile('/path/to/file.html');",
        "res.render('/path/to/file.html');",
        "res.sendHTML('/path/to/file.html');",
        "res.html('/path/to/file.html');"
      ],
      "answer": "res.sendFile('/path/to/file.html');"
    },
    {
      "id": 14,
      "question": "What is the purpose of express.Router()?",
      "options": [
        "Create modular route handlers",
        "Middleware management",
        "Handle errors",
        "Serve static files"
      ],
      "answer": "Create modular route handlers"
    },
    {
      "id": 15,
      "question": "How do you handle 404 errors in Express?",
      "options": [
        "Add a middleware at the end to catch unmatched routes",
        "Use app.all('/404')",
        "Use res.sendStatus(404) in all routes",
        "Try-catch blocks"
      ],
      "answer": "Add a middleware at the end to catch unmatched routes"
    },
    {
      "id": 16,
      "question": "How do you parse cookies in Express?",
      "options": [
        "Use cookie-parser middleware",
        "Use express.cookies()",
        "Use express.cookieParser()",
        "Parse manually"
      ],
      "answer": "Use cookie-parser middleware"
    },
    {
      "id": 17,
      "question": "Which package can be used to secure Express apps by setting HTTP headers?",
      "options": [
        "helmet",
        "cors",
        "morgan",
        "body-parser"
      ],
      "answer": "helmet"
    },
    {
      "id": 18,
      "question": "How do you enable URL encoding for query strings in Express?",
      "options": [
        "express.urlencoded() middleware",
        "express.json() middleware",
        "body-parser.urlencoded()",
        "No need to enable"
      ],
      "answer": "express.urlencoded() middleware"
    },
    {
      "id": 19,
      "question": "Which method allows chaining multiple HTTP methods for a route?",
      "options": [
        "app.route()",
        "app.all()",
        "app.use()",
        "app.chain()"
      ],
      "answer": "app.route()"
    },
    {
      "id": 20,
      "question": "How do you get the current route's path in Express?",
      "options": [
        "req.route.path",
        "req.path",
        "req.url",
        "req.originalUrl"
      ],
      "answer": "req.route.path"
    },
    {
      "id": 21,
      "question": "How can you mount multiple middleware functions for a route?",
      "options": [
        "app.get('/route', mw1, mw2, handler);",
        "app.get('/route', [mw1, mw2], handler);",
        "Both A and B",
        "Neither"
      ],
      "answer": "Both A and B"
    },
    {
      "id": 22,
      "question": "How do you access HTTP headers in an incoming request?",
      "options": [
        "req.headers",
        "req.header()",
        "req.getHeaders()",
        "req.getHeader()"
      ],
      "answer": "req.headers"
    },
    {
      "id": 23,
      "question": "How do you set cookies in Express?",
      "options": [
        "res.cookie('name', 'value')",
        "res.setCookie('name', 'value')",
        "res.set('cookie', 'value')",
        "res.cookies.set('name', 'value')"
      ],
      "answer": "res.cookie('name', 'value')"
    },
    {
      "id": 24,
      "question": "How do you configure the Express app to trust proxy headers?",
      "options": [
        "app.set('trust proxy', true);",
        "app.enable('trust proxy');",
        "app.use(trustProxy())",
        "app.trustProxy(true)"
      ],
      "answer": "app.set('trust proxy', true);"
    },
    {
      "id": 25,
      "question": "Which method will send a file as an HTTP attachment to be downloaded?",
      "options": [
        "res.download('/path/to/file')",
        "res.sendFile('/path/to/file')",
        "res.attachment('/path/to/file')",
        "res.sendDownload('/path/to/file')"
      ],
      "answer": "res.download('/path/to/file')"
    },
    {
      "id": 26,
      "question": "How do you enable HTTP compression middleware in Express?",
      "options": [
        "Use compression middleware",
        "Use helmet middleware",
        "Use morgan middleware",
        "No need to enable"
      ],
      "answer": "Use compression middleware"
    },
    {
      "id": 27,
      "question": "What method do you use to stop further middleware processing and send a response?",
      "options": [
        "res.send()",
        "next()",
        "res.end()",
        "res.next()"
      ],
      "answer": "res.send()"
    },
    {
      "id": 28,
      "question": "How do you handle POST form submissions in Express?",
      "options": [
        "Use express.urlencoded() middleware and req.body",
        "Use express.json() middleware",
        "Use express.text() middleware",
        "Parse form manually"
      ],
      "answer": "Use express.urlencoded() middleware and req.body"
    },
    {
      "id": 29,
      "question": "Which method is used to set a status code and end the response?",
      "options": [
        "res.sendStatus(code)",
        "res.status(code).end()",
        "res.endStatus(code)",
        "Both A and B"
      ],
      "answer": "Both A and B"
    },
    {
      "id": 30,
      "question": "Which of these is true about middleware in Express?",
      "options": [
        "Middleware functions have access to req, res and next",
        "Middleware functions must always call next() to proceed",
        "Middleware can terminate the request-response cycle",
        "All of the above"
      ],
      "answer": "All of the above"
    }
  ]
},
{
  "id": "express_intermediate",
  "name": "Express Intermediate",
  "duration": 40,
  "questions": [
    {
      "id": 1,
      "question": "How do you mount multiple routers under different paths in Express?",
      "options": [
        "app.use('/users', userRouter); app.use('/admin', adminRouter);",
        "app.route('/users', userRouter); app.route('/admin', adminRouter);",
        "app.attach('/users', userRouter); app.attach('/admin', adminRouter);",
        "app.register('/users', userRouter); app.register('/admin', adminRouter);"
      ],
      "answer": "app.use('/users', userRouter); app.use('/admin', adminRouter);"
    },
    {
      "id": 2,
      "question": "How can you create route parameters that are optional in Express?",
      "options": [
        "/route/:param?",
        "/route/:param*",
        "/route/:param+",
        "/route/:param_optional"
      ],
      "answer": "/route/:param?"
    },
    {
      "id": 3,
      "question": "Which middleware order is correct when handling JSON and URL-encoded bodies?",
      "options": [
        "app.use(express.json()); app.use(express.urlencoded({ extended: true }));",
        "app.use(express.urlencoded({ extended: true })); app.use(express.json());",
        "Order doesn't matter",
        "Neither is needed"
      ],
      "answer": "app.use(express.json()); app.use(express.urlencoded({ extended: true }));"
    },
    {
      "id": 4,
      "question": "What is the use of express.static middleware?",
      "options": [
        "To serve static assets like images, CSS, JS files",
        "To parse static JSON bodies",
        "To handle dynamic routes",
        "To define route handlers"
      ],
      "answer": "To serve static assets like images, CSS, JS files"
    },
    {
      "id": 5,
      "question": "How do you create a custom middleware that logs each request's method and URL?",
      "options": [
        "app.use((req, res, next) => { console.log(req.method, req.url); next(); });",
        "app.use((req, res) => { console.log(req.method, req.url); });",
        "app.useLogger();",
        "app.logRequests();"
      ],
      "answer": "app.use((req, res, next) => { console.log(req.method, req.url); next(); });"
    },
    {
      "id": 6,
      "question": "How do you define an error handling middleware?",
      "options": [
        "(err, req, res, next) => { /* handle error */ }",
        "(req, res, next) => { /* handle error */ }",
        "app.useError()",
        "app.errorHandler()"
      ],
      "answer": "(err, req, res, next) => { /* handle error */ }"
    },
    {
      "id": 7,
      "question": "How can you capture all HTTP verbs on a route path?",
      "options": [
        "app.all('/path', handler);",
        "app.use('/path', handler);",
        "app.route('/path').all(handler);",
        "Both A and C"
      ],
      "answer": "Both A and C"
    },
    {
      "id": 8,
      "question": "What does res.locals do in Express?",
      "options": [
        "Stores data available during the lifecycle of the request",
        "Sends JSON data to client",
        "Ends the response",
        "Sets cookies"
      ],
      "answer": "Stores data available during the lifecycle of the request"
    },
    {
      "id": 9,
      "question": "How do you send a 500 Internal Server Error with a message?",
      "options": [
        "res.status(500).send('Internal Server Error');",
        "res.sendStatus(500);",
        "res.error(500);",
        "res.status(500).json({ error: 'Internal Server Error' });"
      ],
      "answer": "res.status(500).send('Internal Server Error');"
    },
    {
      "id": 10,
      "question": "How can you chain route handlers for a route in Express?",
      "options": [
        "app.get('/route', mw1, mw2, handler);",
        "app.route('/route').get(mw1, mw2, handler);",
        "Both A and B",
        "Neither"
      ],
      "answer": "Both A and B"
    },
    {
      "id": 11,
      "question": "How do you create a sub-router for modular routes in Express?",
      "options": [
        "const router = express.Router();",
        "const router = new express.Router();",
        "const router = express.route();",
        "const router = new express.Route();"
      ],
      "answer": "const router = express.Router();"
    },
    {
      "id": 12,
      "question": "Which method allows sending a file with a custom filename for download?",
      "options": [
        "res.download('/path/to/file', 'customname.ext')",
        "res.sendFile('/path/to/file', 'customname.ext')",
        "res.attachment('/path/to/file', 'customname.ext')",
        "res.sendDownload('/path/to/file', 'customname.ext')"
      ],
      "answer": "res.download('/path/to/file', 'customname.ext')"
    },
    {
      "id": 13,
      "question": "How do you get the full original URL of a request?",
      "options": [
        "req.originalUrl",
        "req.url",
        "req.path",
        "req.route"
      ],
      "answer": "req.originalUrl"
    },
    {
      "id": 14,
      "question": "How do you configure Express to trust the first proxy only?",
      "options": [
        "app.set('trust proxy', 1);",
        "app.enable('trust proxy');",
        "app.use(trustProxy(1));",
        "app.set('trust proxy', true);"
      ],
      "answer": "app.set('trust proxy', 1);"
    },
    {
      "id": 15,
      "question": "Which method can you use to mount a middleware only on a specific HTTP method?",
      "options": [
        "app.get(path, middleware);",
        "app.use(path, middleware);",
        "app.all(path, middleware);",
        "app.route(path).use(middleware);"
      ],
      "answer": "app.get(path, middleware);"
    },
    {
      "id": 16,
      "question": "How do you specify parameters in the query string of a GET request?",
      "options": [
        "By appending ?key=value pairs to the URL",
        "In the request body",
        "As route params",
        "In headers"
      ],
      "answer": "By appending ?key=value pairs to the URL"
    },
    {
      "id": 17,
      "question": "How do you send an HTTP cookie in Express?",
      "options": [
        "res.cookie('name', 'value');",
        "res.setCookie('name', 'value');",
        "res.set('cookie', 'value');",
        "res.cookies.set('name', 'value');"
      ],
      "answer": "res.cookie('name', 'value');"
    },
    {
      "id": 18,
      "question": "How can you protect an Express app from cross-site scripting attacks?",
      "options": [
        "Use helmet middleware",
        "Use cors middleware",
        "Use compression middleware",
        "Use body-parser middleware"
      ],
      "answer": "Use helmet middleware"
    },
    {
      "id": 19,
      "question": "How do you limit the size of incoming request bodies in Express?",
      "options": [
        "Pass a 'limit' option to body parser middleware",
        "Set maxBodySize globally",
        "Express limits by default",
        "No limit"
      ],
      "answer": "Pass a 'limit' option to body parser middleware"
    },
    {
      "id": 20,
      "question": "How do you listen for errors on the Express app instance?",
      "options": [
        "app.on('error', handler);",
        "app.useError(handler);",
        "app.error(handler);",
        "app.addEventListener('error', handler);"
      ],
      "answer": "app.on('error', handler);"
    },
    {
      "id": 21,
      "question": "How can you implement rate limiting in Express?",
      "options": [
        "Use express-rate-limit middleware",
        "Use helmet middleware",
        "Use morgan middleware",
        "Implement manually"
      ],
      "answer": "Use express-rate-limit middleware"
    },
    {
      "id": 22,
      "question": "How do you parse multipart/form-data for file uploads in Express?",
      "options": [
        "Use multer middleware",
        "Use express.json()",
        "Use express.urlencoded()",
        "Use body-parser"
      ],
      "answer": "Use multer middleware"
    },
    {
      "id": 23,
      "question": "What is the default view engine in Express?",
      "options": [
        "None, you must set one",
        "EJS",
        "Pug",
        "Handlebars"
      ],
      "answer": "None, you must set one"
    },
    {
      "id": 24,
      "question": "How do you mount middleware to a router only for specific routes?",
      "options": [
        "router.use('/route', middleware);",
        "router.all('/route', middleware);",
        "router.get('/route', middleware);",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "id": 25,
      "question": "How do you share data between middleware functions?",
      "options": [
        "Use req or res.locals objects",
        "Use global variables",
        "Use app.locals only",
        "Use session only"
      ],
      "answer": "Use req or res.locals objects"
    },
    {
      "id": 26,
      "question": "How do you handle URL encoding when parsing request bodies?",
      "options": [
        "Use express.urlencoded({ extended: true }) middleware",
        "Use express.json()",
        "No need to handle",
        "Use body-parser.json()"
      ],
      "answer": "Use express.urlencoded({ extended: true }) middleware"
    },
    {
      "id": 27,
      "question": "How do you set a cookie with an expiration time in Express?",
      "options": [
        "res.cookie('name', 'value', { expires: new Date(Date.now() + 900000) });",
        "res.setCookie('name', 'value', { maxAge: 900000 });",
        "res.cookie('name', 'value', { maxAge: 900000 });",
        "Both A and C"
      ],
      "answer": "Both A and C"
    },
    {
      "id": 28,
      "question": "Which method can you use to halt further middleware execution?",
      "options": [
        "Do not call next()",
        "Call next('route')",
        "Call res.end()",
        "All of the above"
      ],
      "answer": "All of the above"
    },
    {
      "id": 29,
      "question": "What is the effect of app.disable('x-powered-by')?",
      "options": [
        "Removes X-Powered-By header for security",
        "Disables app features",
        "Enables debugging",
        "No effect"
      ],
      "answer": "Removes X-Powered-By header for security"
    },
    {
      "id": 30,
      "question": "How can you handle HTTP OPTIONS requests in Express?",
      "options": [
        "app.options('/route', handler);",
        "app.all('/route', handler);",
        "app.use('/route', handler);",
        "Express handles automatically"
      ],
      "answer": "app.options('/route', handler);"
    }
  ]
},
{
  "id": "express_advanced",
  "name": "Express Advanced",
  "duration": 45,
  "questions": [
    {
      "id": 1,
      "question": "What is middleware in Express?",
      "options": [
        "Functions with access to req, res, and next that can modify request/response or end the cycle",
        "Functions that run after the response is sent",
        "Only used for error handling",
        "Built-in authentication"
      ],
      "answer": "Functions with access to req, res, and next that can modify request/response or end the cycle"
    },
    {
      "id": 2,
      "question": "How do you add middleware for a specific route in Express?",
      "options": [
        "app.use('/route', middleware)",
        "app.route('/middleware')",
        "app.getMiddleware('/route')",
        "Middleware cannot be route-specific"
      ],
      "answer": "app.use('/route', middleware)"
    },
    {
      "id": 3,
      "question": "What method is used to mount a router instance in Express?",
      "options": [
        "app.use('/path', router)",
        "app.mount('/path', router)",
        "app.router('/path')",
        "app.route('/path')"
      ],
      "answer": "app.use('/path', router)"
    },
    {
      "id": 4,
      "question": "How can you parse JSON request bodies in Express?",
      "options": [
        "Using express.json() middleware",
        "Using body-parser.json() middleware",
        "Using express.urlencoded()",
        "Both 1 and 2"
      ],
      "answer": "Both 1 and 2"
    },
    {
      "id": 5,
      "question": "What is the use of next() in middleware?",
      "options": [
        "To pass control to the next middleware",
        "To end the response",
        "To throw an error",
        "To send a response"
      ],
      "answer": "To pass control to the next middleware"
    },
    {
      "id": 6,
      "question": "How do you serve static files in Express?",
      "options": [
        "app.use(express.static('public'))",
        "app.static('public')",
        "express.static('public')",
        "app.serveStatic('public')"
      ],
      "answer": "app.use(express.static('public'))"
    },
    {
      "id": 7,
      "question": "How do you handle 404 errors in Express?",
      "options": [
        "By adding a middleware after all routes that sends a 404 response",
        "By using res.status(404) in every route",
        "Express automatically handles 404",
        "By using error-handling middleware"
      ],
      "answer": "By adding a middleware after all routes that sends a 404 response"
    },
    {
      "id": 8,
      "question": "How can you define route parameters in Express?",
      "options": [
        "Using colon, e.g., /users/:id",
        "Using asterisk, e.g., /users/*id",
        "Using brackets, e.g., /users/[id]",
        "Route params are not supported"
      ],
      "answer": "Using colon, e.g., /users/:id"
    },
    {
      "id": 9,
      "question": "How do you access URL query parameters in Express?",
      "options": [
        "req.query",
        "req.params",
        "req.body",
        "req.urlParams"
      ],
      "answer": "req.query"
    },
    {
      "id": 10,
      "question": "What is the significance of error-handling middleware signature?",
      "options": [
        "It must have four arguments: (err, req, res, next)",
        "It has three arguments: (req, res, next)",
        "It has two arguments: (req, res)",
        "Any middleware can handle errors"
      ],
      "answer": "It must have four arguments: (err, req, res, next)"
    },
    {
      "id": 11,
      "question": "How do you set HTTP response status codes in Express?",
      "options": [
        "res.status(code)",
        "res.setStatus(code)",
        "res.code(code)",
        "res.responseStatus(code)"
      ],
      "answer": "res.status(code)"
    },
    {
      "id": 12,
      "question": "What is the default HTTP method that app.use() handles?",
      "options": [
        "All methods",
        "GET",
        "POST",
        "PUT"
      ],
      "answer": "All methods"
    },
    {
      "id": 13,
      "question": "How to send JSON response in Express?",
      "options": [
        "res.json(object)",
        "res.sendJSON(object)",
        "res.send(object)",
        "res.sendObject(object)"
      ],
      "answer": "res.json(object)"
    },
    {
      "id": 14,
      "question": "Which middleware parses URL-encoded data in Express?",
      "options": [
        "express.urlencoded()",
        "express.json()",
        "body-parser.urlencoded()",
        "body-parser.json()"
      ],
      "answer": "express.urlencoded()"
    },
    {
      "id": 15,
      "question": "How do you access POST form data in Express?",
      "options": [
        "req.body",
        "req.params",
        "req.query",
        "req.data"
      ],
      "answer": "req.body"
    },
    {
      "id": 16,
      "question": "How do you enable CORS in an Express app?",
      "options": [
        "Using cors middleware package",
        "Setting headers manually",
        "Express has built-in CORS",
        "Using app.enable('cors')"
      ],
      "answer": "Using cors middleware package"
    },
    {
      "id": 17,
      "question": "What is the purpose of express.Router()?",
      "options": [
        "To create modular route handlers",
        "To handle errors",
        "To serve static files",
        "To handle database connections"
      ],
      "answer": "To create modular route handlers"
    },
    {
      "id": 18,
      "question": "How can you chain route handlers for a single route?",
      "options": [
        "app.get('/path', middleware1, middleware2, handler)",
        "app.route('/path').get(handler1, handler2)",
        "app.use('/path', handler1, handler2)",
        "Cannot chain handlers"
      ],
      "answer": "app.get('/path', middleware1, middleware2, handler)"
    },
    {
      "id": 19,
      "question": "How can you implement route-level middleware?",
      "options": [
        "Pass middleware as additional parameters in route methods",
        "Only global middleware exists",
        "Use app.use() only",
        "Express does not support it"
      ],
      "answer": "Pass middleware as additional parameters in route methods"
    },
    {
      "id": 20,
      "question": "How can you send a file as a response in Express?",
      "options": [
        "res.sendFile(filepath)",
        "res.download(filepath)",
        "res.send(filepath)",
        "res.file(filepath)"
      ],
      "answer": "res.sendFile(filepath)"
    },
    {
      "id": 21,
      "question": "What is the role of next() in error-handling middleware?",
      "options": [
        "To pass the error to the next error-handling middleware",
        "To end the request",
        "To ignore the error",
        "To restart the server"
      ],
      "answer": "To pass the error to the next error-handling middleware"
    },
    {
      "id": 22,
      "question": "How can you handle route parameters validation?",
      "options": [
        "Using middleware or libraries like express-validator",
        "Express validates automatically",
        "Using res.validate()",
        "By default in app.get()"
      ],
      "answer": "Using middleware or libraries like express-validator"
    },
    {
      "id": 23,
      "question": "How can you define multiple HTTP methods for the same route?",
      "options": [
        "app.route('/path').get(handler).post(handler)",
        "app.use('/path').get(handler).post(handler)",
        "app.methods('/path')",
        "Not possible"
      ],
      "answer": "app.route('/path').get(handler).post(handler)"
    },
    {
      "id": 24,
      "question": "How do you redirect a request in Express?",
      "options": [
        "res.redirect('/newpath')",
        "res.sendRedirect('/newpath')",
        "res.route('/newpath')",
        "res.forward('/newpath')"
      ],
      "answer": "res.redirect('/newpath')"
    },
    {
      "id": 25,
      "question": "Which Express method is used to listen to incoming requests?",
      "options": [
        "app.listen(port)",
        "app.start(port)",
        "app.connect(port)",
        "app.run(port)"
      ],
      "answer": "app.listen(port)"
    },
    {
      "id": 26,
      "question": "How can you pass data between middleware in Express?",
      "options": [
        "Attach properties to req object",
        "Use global variables",
        "Use res.locals only",
        "Use cookies"
      ],
      "answer": "Attach properties to req object"
    },
    {
      "id": 27,
      "question": "What does the express.static middleware do?",
      "options": [
        "Serves static files such as images, CSS, JS",
        "Handles errors",
        "Parses request bodies",
        "Manages sessions"
      ],
      "answer": "Serves static files such as images, CSS, JS"
    },
    {
      "id": 28,
      "question": "How can you create modular route handlers?",
      "options": [
        "By using express.Router() and exporting the router",
        "By writing all routes in one file",
        "By using app.use() only",
        "By not using routers"
      ],
      "answer": "By using express.Router() and exporting the router"
    },
    {
      "id": 29,
      "question": "How do you send a response header in Express?",
      "options": [
        "res.set('Header-Name', 'value')",
        "res.header('Header-Name', 'value')",
        "res.sendHeader('Header-Name', 'value')",
        "res.writeHeader('Header-Name', 'value')"
      ],
      "answer": "res.set('Header-Name', 'value')"
    },
    {
      "id": 30,
      "question": "How do you handle cookies in Express?",
      "options": [
        "By using cookie-parser middleware",
        "Express supports cookies by default",
        "Using express.cookies()",
        "By handling cookies manually in req"
      ],
      "answer": "By using cookie-parser middleware"
    }
  ]
},
{
  "id": "express_expert",
  "name": "Express Expert",
  "duration": 50,
  "questions": [
    {
      "id": 1,
      "question": "How do you implement rate limiting in Express?",
      "options": [
        "Using express-rate-limit middleware",
        "Using app.listen() options",
        "By default Express rate limits requests",
        "Using res.limit()"
      ],
      "answer": "Using express-rate-limit middleware"
    },
    {
      "id": 2,
      "question": "How do you handle asynchronous errors in Express?",
      "options": [
        "Pass errors to next(err)",
        "Try-catch is enough",
        "Errors are caught automatically",
        "Use res.catch()"
      ],
      "answer": "Pass errors to next(err)"
    },
    {
      "id": 3,
      "question": "How do you implement CORS in Express?",
      "options": [
        "Use cors middleware",
        "Set Access-Control-Allow-Origin headers manually",
        "Use app.cors()",
        "Express has built-in CORS support"
      ],
      "answer": "Use cors middleware"
    },
    {
      "id": 4,
      "question": "How do you implement authentication in Express?",
      "options": [
        "Use Passport.js or JWT based middleware",
        "Use express.auth()",
        "Express authenticates automatically",
        "Use sessions only"
      ],
      "answer": "Use Passport.js or JWT based middleware"
    },
    {
      "id": 5,
      "question": "What is Helmet used for in Express?",
      "options": [
        "To secure HTTP headers",
        "To parse JSON",
        "To handle sessions",
        "To log requests"
      ],
      "answer": "To secure HTTP headers"
    },
    {
      "id": 6,
      "question": "How do you structure a large Express app?",
      "options": [
        "Using MVC or modular routers",
        "All routes in app.js",
        "One file per function",
        "Using a monolith"
      ],
      "answer": "Using MVC or modular routers"
    },
    {
      "id": 7,
      "question": "How do you handle file uploads in Express?",
      "options": [
        "Use multer middleware",
        "Use express.fileUpload()",
        "Parse files manually",
        "Express supports uploads natively"
      ],
      "answer": "Use multer middleware"
    },
    {
      "id": 8,
      "question": "What is the benefit of using async/await with Express middleware?",
      "options": [
        "Cleaner asynchronous code and better error handling",
        "Faster response time",
        "Less code needed for routes",
        "No benefit"
      ],
      "answer": "Cleaner asynchronous code and better error handling"
    },
    {
      "id": 9,
      "question": "How can you prevent blocking the event loop in Express?",
      "options": [
        "Use asynchronous functions for IO operations",
        "Use synchronous code always",
        "Run everything on main thread",
        "Avoid middleware"
      ],
      "answer": "Use asynchronous functions for IO operations"
    },
    {
      "id": 10,
      "question": "How can you implement request validation in Express?",
      "options": [
        "Use express-validator middleware",
        "Validate inside route handlers only",
        "Express validates automatically",
        "Use JSON schema"
      ],
      "answer": "Use express-validator middleware"
    },
    {
      "id": 11,
      "question": "How can you use environment variables in Express apps?",
      "options": [
        "Using dotenv package to load .env file",
        "Express has built-in env support",
        "Use config.json only",
        "Set global variables manually"
      ],
      "answer": "Using dotenv package to load .env file"
    },
    {
      "id": 12,
      "question": "How do you debug Express applications?",
      "options": [
        "Using Node.js debugger, console.log, or VSCode debugging",
        "Use only console.log",
        "Express has built-in debugger",
        "Debugging is not possible"
      ],
      "answer": "Using Node.js debugger, console.log, or VSCode debugging"
    },
    {
      "id": 13,
      "question": "How to implement session management in Express?",
      "options": [
        "Using express-session middleware",
        "Using cookies only",
        "Sessions are built-in",
        "Using localStorage"
      ],
      "answer": "Using express-session middleware"
    },
    {
      "id": 14,
      "question": "How do you handle rate-limiting by IP address?",
      "options": [
        "Use express-rate-limit configured with IP-based keys",
        "Block IPs manually",
        "Use app.limit(ip)",
        "Express rate limits by default"
      ],
      "answer": "Use express-rate-limit configured with IP-based keys"
    },
    {
      "id": 15,
      "question": "What is the role of next('route') in middleware?",
      "options": [
        "Skips remaining middleware for current route and moves to next route handler",
        "Ends request-response cycle",
        "Throws an error",
        "Restart the middleware"
      ],
      "answer": "Skips remaining middleware for current route and moves to next route handler"
    },
    {
      "id": 16,
      "question": "How can you use Express with WebSockets?",
      "options": [
        "Integrate libraries like socket.io or ws alongside Express",
        "Express supports WebSockets natively",
        "Use app.ws()",
        "Use HTTP/2"
      ],
      "answer": "Integrate libraries like socket.io or ws alongside Express"
    },
    {
      "id": 17,
      "question": "How to cache static assets in Express?",
      "options": [
        "Set cache-control headers in express.static middleware options",
        "Cache is automatic",
        "Use Redis",
        "No caching in Express"
      ],
      "answer": "Set cache-control headers in express.static middleware options"
    },
    {
      "id": 18,
      "question": "How do you handle HTTP method overriding in Express?",
      "options": [
        "Using method-override middleware",
        "Express supports all HTTP methods by default",
        "Use app.override()",
        "Use custom headers"
      ],
      "answer": "Using method-override middleware"
    },
    {
      "id": 19,
      "question": "How do you sanitize inputs in Express?",
      "options": [
        "Using express-validator sanitization features",
        "By default inputs are safe",
        "Manually sanitize in routes",
        "Use helmet"
      ],
      "answer": "Using express-validator sanitization features"
    },
    {
      "id": 20,
      "question": "How do you implement localization (i18n) in Express?",
      "options": [
        "Using i18n middleware or packages like i18next-express-middleware",
        "Express supports i18n natively",
        "Using res.locale()",
        "Not possible"
      ],
      "answer": "Using i18n middleware or packages like i18next-express-middleware"
    },
    {
      "id": 21,
      "question": "How can you limit payload size in Express requests?",
      "options": [
        "Pass limit option to express.json() or express.urlencoded()",
        "Express limits by default",
        "Use res.limit()",
        "Use firewall"
      ],
      "answer": "Pass limit option to express.json() or express.urlencoded()"
    },
    {
      "id": 22,
      "question": "How do you implement request logging in Express?",
      "options": [
        "Using morgan middleware",
        "Using console.log in every route",
        "Express logs requests automatically",
        "Use winston only"
      ],
      "answer": "Using morgan middleware"
    },
    {
      "id": 23,
      "question": "How do you handle file streaming responses in Express?",
      "options": [
        "Use streams with res.write() and res.end() or res.pipe()",
        "Send whole file using res.sendFile() only",
        "Express doesn’t support streaming",
        "Use fs.readFileSync"
      ],
      "answer": "Use streams with res.write() and res.end() or res.pipe()"
    },
    {
      "id": 24,
      "question": "How do you implement request throttling in Express?",
      "options": [
        "Using express-rate-limit or similar middleware",
        "Express throttles requests automatically",
        "Use res.throttle()",
        "Use app.throttle()"
      ],
      "answer": "Using express-rate-limit or similar middleware"
    },
    {
      "id": 25,
      "question": "How to implement API versioning in Express?",
      "options": [
        "Prefix routes with version numbers like /api/v1",
        "Express supports versioning natively",
        "Use headers only",
        "Use different servers"
      ],
      "answer": "Prefix routes with version numbers like /api/v1"
    },
    {
      "id": 26,
      "question": "How to test Express routes effectively?",
      "options": [
        "Using testing libraries like supertest and Jest",
        "Use Postman only",
        "Manual testing only",
        "Express has built-in testing"
      ],
      "answer": "Using testing libraries like supertest and Jest"
    },
    {
      "id": 27,
      "question": "How do you handle multipart/form-data in Express?",
      "options": [
        "Using multer middleware",
        "Express parses multipart data automatically",
        "Use express.json()",
        "Use body-parser"
      ],
      "answer": "Using multer middleware"
    },
    {
      "id": 28,
      "question": "How can you handle long-polling or SSE with Express?",
      "options": [
        "By keeping HTTP connection open and sending events manually",
        "Express supports SSE natively",
        "Use WebSocket only",
        "Use polling middleware"
      ],
      "answer": "By keeping HTTP connection open and sending events manually"
    },
    {
      "id": 29,
      "question": "What are the best practices for error handling in Express?",
      "options": [
        "Use centralized error-handling middleware and pass errors with next(err)",
        "Handle errors only in routes",
        "Use try-catch everywhere",
        "Ignore errors"
      ],
      "answer": "Use centralized error-handling middleware and pass errors with next(err)"
    },
    {
      "id": 30,
      "question": "How to handle graceful shutdown of Express server?",
      "options": [
        "Listen for SIGINT/SIGTERM and close server and DB connections",
        "Just exit process immediately",
        "Use app.shutdown()",
        "Express shuts down automatically"
      ],
      "answer": "Listen for SIGINT/SIGTERM and close server and DB connections"
    }
  ]
},
{
  "id": "express_coding",
  "name": "Express Coding",
  "duration": 60,
  "questions": [
    {
      "id": 1,
      "question": "Write an Express GET route to return JSON array of users.",
      "options": [
        "app.get('/users', (req, res) => res.json([{id:1,name:'Alice'}]));",
        "app.post('/users', (req, res) => res.json([]));",
        "app.use('/users', (req, res) => res.json([]));",
        "app.get('/users', (req, res) => res.send('Users'));"
      ],
      "answer": "app.get('/users', (req, res) => res.json([{id:1,name:'Alice'}]));"
    },
    {
      "id": 2,
      "question": "Create middleware to log method and URL of incoming requests.",
      "options": [
        "app.use((req,res,next) => { console.log(req.method, req.url); next(); });",
        "app.get((req,res,next) => { console.log(req.method); next(); });",
        "app.use((req,res) => { console.log(req.url); });",
        "app.listen(() => { console.log('Server started'); });"
      ],
      "answer": "app.use((req,res,next) => { console.log(req.method, req.url); next(); });"
    },
    {
      "id": 3,
      "question": "Write a POST '/login' route that reads JSON body and returns success.",
      "options": [
        "app.post('/login', express.json(), (req,res) => { res.send('Success'); });",
        "app.get('/login', (req,res) => { res.send('Success'); });",
        "app.post('/login', (req,res) => { res.json(req.body); });",
        "app.route('/login').post(() => {});"
      ],
      "answer": "app.post('/login', express.json(), (req,res) => { res.send('Success'); });"
    },
    {
      "id": 4,
      "question": "Write error-handling middleware in Express.",
      "options": [
        "app.use((err,req,res,next) => { console.error(err); res.status(500).send('Server error'); });",
        "app.use((req,res,next) => { console.error(err); res.status(500).send('Server error'); });",
        "app.error((err,req,res,next) => {});",
        "app.handleError((err,req,res) => {});"
      ],
      "answer": "app.use((err,req,res,next) => { console.error(err); res.status(500).send('Server error'); });"
    },
    {
      "id": 5,
      "question": "Serve static files from 'public' folder.",
      "options": [
        "app.use(express.static('public'));",
        "app.static('public');",
        "express.useStatic('public');",
        "app.serve('public');"
      ],
      "answer": "app.use(express.static('public'));"
    },
    {
      "id": 6,
      "question": "Write a route to extract and respond with a URL param called 'id'.",
      "options": [
        "app.get('/item/:id', (req,res) => { res.send(req.params.id); });",
        "app.get('/item', (req,res) => { res.send(req.query.id); });",
        "app.get('/item/:id', (req,res) => { res.send(req.body.id); });",
        "app.get('/item', (req,res) => { res.send(req.params.id); });"
      ],
      "answer": "app.get('/item/:id', (req,res) => { res.send(req.params.id); });"
    },
    {
      "id": 7,
      "question": "Write middleware to reject requests without a specific header 'X-Auth'.",
      "options": [
        "app.use((req,res,next) => { if(!req.headers['x-auth']) return res.status(401).send('Unauthorized'); next(); });",
        "app.use((req,res,next) => { if(!req.headers.auth) return res.send('Unauthorized'); next(); });",
        "app.use((req,res) => { res.send('Unauthorized'); });",
        "app.use((req,res,next) => { next(); });"
      ],
      "answer": "app.use((req,res,next) => { if(!req.headers['x-auth']) return res.status(401).send('Unauthorized'); next(); });"
    },
    {
      "id": 8,
      "question": "Write an Express route that redirects '/old' to '/new'.",
      "options": [
        "app.get('/old', (req,res) => { res.redirect('/new'); });",
        "app.get('/old', (req,res) => { res.send('/new'); });",
        "app.use('/old', (req,res) => { res.redirect('/new'); });",
        "app.route('/old').get((req,res) => { res.redirect('/new'); });"
      ],
      "answer": "app.get('/old', (req,res) => { res.redirect('/new'); });"
    },
    {
      "id": 9,
      "question": "Create an Express route that sends a file 'index.html' from the 'views' directory.",
      "options": [
        "app.get('/', (req,res) => { res.sendFile(__dirname + '/views/index.html'); });",
        "app.get('/', (req,res) => { res.sendFile('index.html'); });",
        "app.get('/', (req,res) => { res.send('index.html'); });",
        "app.use('/', (req,res) => { res.sendFile('index.html'); });"
      ],
      "answer": "app.get('/', (req,res) => { res.sendFile(__dirname + '/views/index.html'); });"
    },
    {
      "id": 10,
      "question": "Write a route that parses URL-encoded POST data.",
      "options": [
        "app.use(express.urlencoded({ extended: true }));",
        "app.use(express.json());",
        "app.use(bodyParser.json());",
        "app.use(bodyParser.urlencoded());"
      ],
      "answer": "app.use(express.urlencoded({ extended: true }));"
    },
    {
      "id": 11,
      "question": "Write middleware that sets a custom header 'X-Powered-By' in all responses.",
      "options": [
        "app.use((req,res,next) => { res.set('X-Powered-By', 'Express'); next(); });",
        "app.use((req,res) => { res.set('X-Powered-By', 'Express'); });",
        "app.use((req,res,next) => { res.header('X-Powered-By', 'Express'); next(); });",
        "app.use((req,res,next) => { next(); });"
      ],
      "answer": "app.use((req,res,next) => { res.set('X-Powered-By', 'Express'); next(); });"
    },
    {
      "id": 12,
      "question": "Write a route that handles all HTTP methods on '/api'.",
      "options": [
        "app.all('/api', (req,res) => { res.send('API Endpoint'); });",
        "app.use('/api', (req,res) => { res.send('API Endpoint'); });",
        "app.get('/api', (req,res) => { res.send('API Endpoint'); });",
        "app.route('/api').use((req,res) => { res.send('API Endpoint'); });"
      ],
      "answer": "app.all('/api', (req,res) => { res.send('API Endpoint'); });"
    },
    {
      "id": 13,
      "question": "Write middleware that blocks requests to '/admin' unless a query param admin=true is present.",
      "options": [
        "app.use('/admin', (req,res,next) => { if(req.query.admin !== 'true') return res.status(403).send('Forbidden'); next(); });",
        "app.use((req,res,next) => { if(req.query.admin !== 'true') return res.status(403).send('Forbidden'); next(); });",
        "app.get('/admin', (req,res) => { if(req.query.admin !== 'true') return res.status(403).send('Forbidden'); res.send('Admin'); });",
        "app.use('/admin', (req,res) => { res.send('Forbidden'); });"
      ],
      "answer": "app.use('/admin', (req,res,next) => { if(req.query.admin !== 'true') return res.status(403).send('Forbidden'); next(); });"
    },
    {
      "id": 14,
      "question": "Write code to create an Express router for '/users' with GET and POST routes.",
      "options": [
        "const router = express.Router(); router.get('/', (req,res) => {}); router.post('/', (req,res) => {}); app.use('/users', router);",
        "const router = express.Router(); router.route('/users').get(() => {}).post(() => {}); app.use(router);",
        "const router = express.Router(); router.use('/users', (req,res) => {}); app.use(router);",
        "app.get('/users', () => {}); app.post('/users', () => {});"
      ],
      "answer": "const router = express.Router(); router.get('/', (req,res) => {}); router.post('/', (req,res) => {}); app.use('/users', router);"
    },
    {
      "id": 15,
      "question": "Write middleware that catches all 404 errors.",
      "options": [
        "app.use((req,res) => { res.status(404).send('Not Found'); });",
        "app.get('*', (req,res) => { res.status(404).send('Not Found'); });",
        "app.use((err,req,res,next) => { res.status(404).send('Not Found'); });",
        "app.all('*', (req,res) => { res.send('Not Found'); });"
      ],
      "answer": "app.use((req,res) => { res.status(404).send('Not Found'); });"
    },
    {
      "id": 16,
      "question": "Write code to parse cookies in Express.",
      "options": [
        "app.use(require('cookie-parser')());",
        "app.use(express.cookies());",
        "app.use(cookie());",
        "app.use(parseCookies());"
      ],
      "answer": "app.use(require('cookie-parser')());"
    },
    {
      "id": 17,
      "question": "Write a route that sends a JSON error message when an error occurs.",
      "options": [
        "app.use((err,req,res,next) => { res.status(500).json({error: err.message}); });",
        "app.use((req,res) => { res.json({error: 'error'}); });",
        "app.get('/error', (req,res) => { res.json({error: 'error'}); });",
        "app.error((err,req,res) => { res.json({error: err.message}); });"
      ],
      "answer": "app.use((err,req,res,next) => { res.status(500).json({error: err.message}); });"
    },
    {
      "id": 18,
      "question": "Write a route that handles JSON body and validates required 'name' field.",
      "options": [
        "app.post('/user', express.json(), (req,res) => { if(!req.body.name) return res.status(400).send('Name required'); res.send('OK'); });",
        "app.post('/user', (req,res) => { if(!req.body.name) return res.status(400).send('Name required'); res.send('OK'); });",
        "app.use(express.json()); app.post('/user', (req,res) => { res.send('OK'); });",
        "app.post('/user', express.urlencoded(), (req,res) => { res.send('OK'); });"
      ],
      "answer": "app.post('/user', express.json(), (req,res) => { if(!req.body.name) return res.status(400).send('Name required'); res.send('OK'); });"
    },
    {
      "id": 19,
      "question": "Write code to configure CORS to accept only requests from example.com.",
      "options": [
        "const cors = require('cors'); app.use(cors({ origin: 'https://example.com' }));",
        "app.use(cors('https://example.com'));",
        "app.use(cors({ allowedOrigins: ['example.com'] }));",
        "app.enable('cors');"
      ],
      "answer": "const cors = require('cors'); app.use(cors({ origin: 'https://example.com' }));"
    },
    {
      "id": 20,
      "question": "Write a route that streams a large file to the client.",
      "options": [
        "app.get('/file', (req,res) => { const stream = fs.createReadStream('largefile.txt'); stream.pipe(res); });",
        "app.get('/file', (req,res) => { res.sendFile('largefile.txt'); });",
        "app.get('/file', (req,res) => { res.download('largefile.txt'); });",
        "app.use('/file', (req,res) => { res.send('file'); });"
      ],
      "answer": "app.get('/file', (req,res) => { const stream = fs.createReadStream('largefile.txt'); stream.pipe(res); });"
    },
    {
      "id": 21,
      "question": "Write a route to handle PUT requests on '/update/:id'.",
      "options": [
        "app.put('/update/:id', (req,res) => { res.send('Updated ' + req.params.id); });",
        "app.post('/update/:id', (req,res) => { res.send('Updated'); });",
        "app.use('/update/:id', (req,res) => { res.send('Updated'); });",
        "app.get('/update/:id', (req,res) => { res.send('Updated'); });"
      ],
      "answer": "app.put('/update/:id', (req,res) => { res.send('Updated ' + req.params.id); });"
    },
    {
      "id": 22,
      "question": "Write middleware to set a timeout of 5 seconds on requests.",
      "options": [
        "app.use(timeout('5s'));",
        "app.use((req,res,next) => { setTimeout(next, 5000); });",
        "app.timeout(5000);",
        "Express sets timeout by default"
      ],
      "answer": "app.use(timeout('5s'));"
    },
    {
      "id": 23,
      "question": "Write code to parse multipart/form-data for file uploads.",
      "options": [
        "const multer = require('multer'); const upload = multer(); app.post('/upload', upload.single('file'), (req,res) => {});",
        "app.use(express.multipart());",
        "app.use(bodyParser.multipart());",
        "app.post('/upload', (req,res) => {});"
      ],
      "answer": "const multer = require('multer'); const upload = multer(); app.post('/upload', upload.single('file'), (req,res) => {});"
    },
    {
      "id": 24,
      "question": "Write code to disable the 'X-Powered-By' header in Express.",
      "options": [
        "app.disable('x-powered-by');",
        "app.use((req,res,next) => { res.removeHeader('X-Powered-By'); next(); });",
        "app.set('x-powered-by', false);",
        "app.header('X-Powered-By', '');"
      ],
      "answer": "app.disable('x-powered-by');"
    },
    {
      "id": 25,
      "question": "Write middleware to parse query parameters and log them.",
      "options": [
        "app.use((req,res,next) => { console.log(req.query); next(); });",
        "app.use((req,res) => { console.log(req.query); });",
        "app.get((req,res,next) => { console.log(req.query); next(); });",
        "app.route((req,res,next) => { console.log(req.query); next(); });"
      ],
      "answer": "app.use((req,res,next) => { console.log(req.query); next(); });"
    },
    {
      "id": 26,
      "question": "Write an Express route that sends an HTML response.",
      "options": [
        "app.get('/', (req,res) => { res.send('<h1>Hello</h1>'); });",
        "app.get('/', (req,res) => { res.html('<h1>Hello</h1>'); });",
        "app.get('/', (req,res) => { res.render('<h1>Hello</h1>'); });",
        "app.get('/', (req,res) => { res.sendFile('index.html'); });"
      ],
      "answer": "app.get('/', (req,res) => { res.send('<h1>Hello</h1>'); });"
    },
    {
      "id": 27,
      "question": "Write code to mount a sub-router on '/api'.",
      "options": [
        "const apiRouter = express.Router(); app.use('/api', apiRouter);",
        "app.use('/api', express.Router());",
        "app.router('/api', apiRouter);",
        "app.route('/api', apiRouter);"
      ],
      "answer": "const apiRouter = express.Router(); app.use('/api', apiRouter);"
    },
    {
      "id": 28,
      "question": "Write an Express middleware that measures request time.",
      "options": [
        "app.use((req,res,next) => { const start = Date.now(); res.on('finish', () => console.log(Date.now() - start)); next(); });",
        "app.use((req,res,next) => { console.log('Time'); next(); });",
        "app.use((req,res) => { console.log('Time'); });",
        "app.use((req,res,next) => { start = Date.now(); next(); });"
      ],
      "answer": "app.use((req,res,next) => { const start = Date.now(); res.on('finish', () => console.log(Date.now() - start)); next(); });"
    },
    {
      "id": 29,
      "question": "Write code to parse JSON bodies with a max size of 100kb.",
      "options": [
        "app.use(express.json({ limit: '100kb' }));",
        "app.use(express.json(100000));",
        "app.use(bodyParser.json(100000));",
        "app.use(express.json().limit('100kb'));"
      ],
      "answer": "app.use(express.json({ limit: '100kb' }));"
    },
    {
      "id": 30,
      "question": "Write a route that sends a 204 No Content response.",
      "options": [
        "app.delete('/resource/:id', (req,res) => { res.status(204).send(); });",
        "app.delete('/resource/:id', (req,res) => { res.sendStatus(204); });",
        "app.delete('/resource/:id', (req,res) => { res.status(204).end(); });",
        "All above are correct"
      ],
      "answer": "All above are correct"
    }
  ]
}

    ]
  },
  {
    "id": "c7",
    "name": "Tailwind CSS",
    "tests": [
{
  "id": "t1",
  "name": "Tailwind CSS Basic",
  "duration": 30,
  "questions": [
    {
      "id": 1,
      "question": "What does Tailwind CSS provide?",
      "options": [
        "Utility-first CSS classes",
        "Predefined components",
        "JavaScript functions",
        "Backend framework"
      ],
      "answer": "Utility-first CSS classes"
    },
    {
      "id": 2,
      "question": "How do you apply padding of 4 units in Tailwind?",
      "options": [
        "p-4",
        "padding-4",
        "pad-4",
        "p4"
      ],
      "answer": "p-4"
    },
    {
      "id": 3,
      "question": "Which class sets the text color to red?",
      "options": [
        "text-red-500",
        "color-red",
        "font-red",
        "text-danger"
      ],
      "answer": "text-red-500"
    },
    {
      "id": 4,
      "question": "What is the default unit scale for margin and padding in Tailwind?",
      "options": [
        "0.25rem per unit",
        "1rem per unit",
        "10px per unit",
        "1em per unit"
      ],
      "answer": "0.25rem per unit"
    },
    {
      "id": 5,
      "question": "How do you set a background color to blue using Tailwind?",
      "options": [
        "bg-blue-500",
        "background-blue",
        "bgcolor-blue",
        "background-blue-500"
      ],
      "answer": "bg-blue-500"
    },
    {
      "id": 6,
      "question": "Which class centers text horizontally?",
      "options": [
        "text-center",
        "text-middle",
        "text-align-center",
        "center-text"
      ],
      "answer": "text-center"
    },
    {
      "id": 7,
      "question": "How do you make text bold in Tailwind?",
      "options": [
        "font-bold",
        "text-bold",
        "bold-text",
        "font-heavy"
      ],
      "answer": "font-bold"
    },
    {
      "id": 8,
      "question": "Which class adds a border to an element?",
      "options": [
        "border",
        "bordered",
        "border-1",
        "border-all"
      ],
      "answer": "border"
    },
    {
      "id": 9,
      "question": "How do you set the width of an element to 50%?",
      "options": [
        "w-1/2",
        "width-50",
        "w-50%",
        "w-half"
      ],
      "answer": "w-1/2"
    },
    {
      "id": 10,
      "question": "What class is used to round the corners of an element?",
      "options": [
        "rounded",
        "border-radius",
        "corner-radius",
        "round-corners"
      ],
      "answer": "rounded"
    },
    {
      "id": 11,
      "question": "Which class applies a shadow effect?",
      "options": [
        "shadow",
        "box-shadow",
        "shadow-effect",
        "drop-shadow"
      ],
      "answer": "shadow"
    },
    {
      "id": 12,
      "question": "How do you hide an element using Tailwind?",
      "options": [
        "hidden",
        "display-none",
        "invisible",
        "no-display"
      ],
      "answer": "hidden"
    },
    {
      "id": 13,
      "question": "Which class makes an element flex container?",
      "options": [
        "flex",
        "flexbox",
        "d-flex",
        "flex-container"
      ],
      "answer": "flex"
    },
    {
      "id": 14,
      "question": "How to justify content to center in flex?",
      "options": [
        "justify-center",
        "content-center",
        "justify-middle",
        "align-center"
      ],
      "answer": "justify-center"
    },
    {
      "id": 15,
      "question": "What class sets a fixed height of 64 units?",
      "options": [
        "h-64",
        "height-64",
        "h-full",
        "height-fixed"
      ],
      "answer": "h-64"
    },
    {
      "id": 16,
      "question": "Which class adds margin to the left side?",
      "options": [
        "ml-4",
        "margin-left-4",
        "m-left-4",
        "ml4"
      ],
      "answer": "ml-4"
    },
    {
      "id": 17,
      "question": "How do you apply a responsive class for medium screens?",
      "options": [
        "md:",
        "medium-",
        "m-",
        "mid-"
      ],
      "answer": "md:"
    },
    {
      "id": 18,
      "question": "Which class applies italic style to text?",
      "options": [
        "italic",
        "text-italic",
        "font-italic",
        "style-italic"
      ],
      "answer": "italic"
    },
    {
      "id": 19,
      "question": "What class adds padding only on the top?",
      "options": [
        "pt-4",
        "p-top-4",
        "padding-top-4",
        "paddingt-4"
      ],
      "answer": "pt-4"
    },
    {
      "id": 20,
      "question": "How do you add a gradient background?",
      "options": [
        "bg-gradient-to-r",
        "gradient-bg",
        "bg-grad",
        "bg-gradient"
      ],
      "answer": "bg-gradient-to-r"
    },
    {
      "id": 21,
      "question": "Which class sets the cursor to pointer on hover?",
      "options": [
        "cursor-pointer",
        "hover-pointer",
        "pointer-cursor",
        "cursor-hand"
      ],
      "answer": "cursor-pointer"
    },
    {
      "id": 22,
      "question": "How do you make text uppercase?",
      "options": [
        "uppercase",
        "text-uppercase",
        "text-upper",
        "font-uppercase"
      ],
      "answer": "uppercase"
    },
    {
      "id": 23,
      "question": "Which class makes an element take full width?",
      "options": [
        "w-full",
        "width-full",
        "full-width",
        "w-100"
      ],
      "answer": "w-full"
    },
    {
      "id": 24,
      "question": "How to make text truncate with ellipsis?",
      "options": [
        "truncate",
        "text-ellipsis",
        "text-truncate",
        "ellipsis"
      ],
      "answer": "truncate"
    },
    {
      "id": 25,
      "question": "Which class adds a transition effect?",
      "options": [
        "transition",
        "animate",
        "trans-effect",
        "effect-transition"
      ],
      "answer": "transition"
    },
    {
      "id": 26,
      "question": "How do you apply flex column direction?",
      "options": [
        "flex-col",
        "flex-column",
        "column-flex",
        "flex-direction-column"
      ],
      "answer": "flex-col"
    },
    {
      "id": 27,
      "question": "What class adds a ring outline effect?",
      "options": [
        "ring",
        "outline-ring",
        "ring-effect",
        "outline"
      ],
      "answer": "ring"
    },
    {
      "id": 28,
      "question": "How to set min-height to screen height?",
      "options": [
        "min-h-screen",
        "min-height-screen",
        "height-min-screen",
        "min-h-full"
      ],
      "answer": "min-h-screen"
    },
    {
      "id": 29,
      "question": "Which class adds a shadow with larger blur?",
      "options": [
        "shadow-lg",
        "shadow-large",
        "shadow-xl",
        "shadow-blur"
      ],
      "answer": "shadow-lg"
    },
    {
      "id": 30,
      "question": "How do you add space between flex items?",
      "options": [
        "space-x-4",
        "gap-4",
        "margin-x-4",
        "spacing-4"
      ],
      "answer": "space-x-4"
    }
  ]
},
{
  "id": "t2",
  "name": "Tailwind CSS Beginner",
  "duration": 40,
  "questions": [
    {
      "id": 1,
      "question": "How do you customize Tailwind’s default theme?",
      "options": [
        "By editing tailwind.config.js",
        "Directly editing CSS files",
        "Using inline styles",
        "Editing HTML files"
      ],
      "answer": "By editing tailwind.config.js"
    },
    {
      "id": 2,
      "question": "How do you apply hover styles in Tailwind?",
      "options": [
        "hover:bg-blue-500",
        "onhover:bg-blue-500",
        "hoverBlue:bg-500",
        "hover-style-blue"
      ],
      "answer": "hover:bg-blue-500"
    },
    {
      "id": 3,
      "question": "How do you make text responsive in Tailwind?",
      "options": [
        "Using responsive prefixes like sm:, md:, lg:",
        "Using font-responsive class",
        "Using media queries only",
        "Using JavaScript"
      ],
      "answer": "Using responsive prefixes like sm:, md:, lg:"
    },
    {
      "id": 4,
      "question": "How to add custom colors in Tailwind?",
      "options": [
        "Add in tailwind.config.js under theme.extend.colors",
        "Use inline styles",
        "Add in CSS files",
        "Use external libraries"
      ],
      "answer": "Add in tailwind.config.js under theme.extend.colors"
    },
    {
      "id": 5,
      "question": "What does the `group` class do in Tailwind?",
      "options": [
        "Allows targeting child elements on hover/focus of parent",
        "Groups multiple classes",
        "Applies font grouping",
        "No effect"
      ],
      "answer": "Allows targeting child elements on hover/focus of parent"
    },
    {
      "id": 6,
      "question": "Which class applies flex-grow to an element?",
      "options": [
        "flex-grow",
        "grow",
        "flex-expand",
        "grow-full"
      ],
      "answer": "grow"
    },
    {
      "id": 7,
      "question": "How do you center an element absolutely in Tailwind?",
      "options": [
        "Use absolute, inset-0, m-auto",
        "Use center class",
        "Use margin-center",
        "Use position-center"
      ],
      "answer": "Use absolute, inset-0, m-auto"
    },
    {
      "id": 8,
      "question": "How to add animations in Tailwind?",
      "options": [
        "Using animate-* classes",
        "Use CSS animations only",
        "Use JavaScript animations only",
        "No animation support"
      ],
      "answer": "Using animate-* classes"
    },
    {
      "id": 9,
      "question": "How do you apply grid layout in Tailwind?",
      "options": [
        "Use grid class",
        "Use flex-grid",
        "Use grid-layout",
        "Use display-grid"
      ],
      "answer": "Use grid class"
    },
    {
      "id": 10,
      "question": "What is the purpose of the `container` class?",
      "options": [
        "To create a responsive fixed-width container",
        "Add a box",
        "Add margin",
        "Add padding"
      ],
      "answer": "To create a responsive fixed-width container"
    },
    {
      "id": 11,
      "question": "How do you enable dark mode in Tailwind?",
      "options": [
        "Set darkMode: 'class' in tailwind.config.js",
        "Add dark mode plugin",
        "Use inline styles",
        "Use dark prefix in classes"
      ],
      "answer": "Set darkMode: 'class' in tailwind.config.js"
    },
    {
      "id": 12,
      "question": "What does the `space-y-4` class do?",
      "options": [
        "Adds vertical spacing between children",
        "Adds margin top 4",
        "Adds padding top 4",
        "Adds horizontal spacing"
      ],
      "answer": "Adds vertical spacing between children"
    },
    {
      "id": 13,
      "question": "How do you disable an element using Tailwind?",
      "options": [
        "Use opacity-50 and pointer-events-none",
        "Use disabled class",
        "Use invisible",
        "Use hidden"
      ],
      "answer": "Use opacity-50 and pointer-events-none"
    },
    {
      "id": 14,
      "question": "How do you add a ring effect only on focus?",
      "options": [
        "focus:ring",
        "ring-focus",
        "focus-ring",
        "ring-on-focus"
      ],
      "answer": "focus:ring"
    },
    {
      "id": 15,
      "question": "What does `z-10` do in Tailwind?",
      "options": [
        "Sets z-index to 10",
        "Sets zoom to 10",
        "Sets padding 10",
        "Sets margin 10"
      ],
      "answer": "Sets z-index to 10"
    },
    {
      "id": 16,
      "question": "How do you hide an element on small screens only?",
      "options": [
        "sm:hidden",
        "hidden-sm",
        "hide-sm",
        "hide-on-sm"
      ],
      "answer": "sm:hidden"
    },
    {
      "id": 17,
      "question": "How do you apply opacity of 75%?",
      "options": [
        "opacity-75",
        "opacity-0.75",
        "opacity-7",
        "opacity-3/4"
      ],
      "answer": "opacity-75"
    },
    {
      "id": 18,
      "question": "What does the `line-clamp` plugin do?",
      "options": [
        "Limits text to a specified number of lines",
        "Clamps height of an element",
        "Restricts width",
        "Limits margin"
      ],
      "answer": "Limits text to a specified number of lines"
    },
    {
      "id": 19,
      "question": "How to make an element sticky using Tailwind?",
      "options": [
        "Use sticky class",
        "Use fixed class",
        "Use float class",
        "Use absolute class"
      ],
      "answer": "Use sticky class"
    },
    {
      "id": 20,
      "question": "How do you customize spacing scale in Tailwind?",
      "options": [
        "Extend spacing in tailwind.config.js",
        "Edit CSS directly",
        "Add inline styles",
        "Use utility classes"
      ],
      "answer": "Extend spacing in tailwind.config.js"
    },
    {
      "id": 21,
      "question": "What does the `aspect-w-16 aspect-h-9` classes do?",
      "options": [
        "Sets aspect ratio 16:9",
        "Sets width and height",
        "Sets padding",
        "Sets margin"
      ],
      "answer": "Sets aspect ratio 16:9"
    },
    {
      "id": 22,
      "question": "How do you remove default list styles?",
      "options": [
        "list-none",
        "no-list",
        "list-remove",
        "list-off"
      ],
      "answer": "list-none"
    },
    {
      "id": 23,
      "question": "Which class adds a dotted border?",
      "options": [
        "border-dotted",
        "border-dot",
        "border-dots",
        "border-dash"
      ],
      "answer": "border-dotted"
    },
    {
      "id": 24,
      "question": "How to make text truncate with ellipsis on overflow?",
      "options": [
        "truncate",
        "text-ellipsis",
        "text-truncate",
        "ellipsis"
      ],
      "answer": "truncate"
    },
    {
      "id": 25,
      "question": "How do you apply text shadow in Tailwind?",
      "options": [
        "Tailwind doesn’t support text-shadow by default",
        "text-shadow class",
        "shadow-text class",
        "text-shadow-md"
      ],
      "answer": "Tailwind doesn’t support text-shadow by default"
    },
    {
      "id": 26,
      "question": "How to add multiple classes on hover?",
      "options": [
        "Use group-hover prefix",
        "Use hover-multiple class",
        "Use hover:class1 class2",
        "Use hover-all class"
      ],
      "answer": "Use group-hover prefix"
    },
    {
      "id": 27,
      "question": "How to add scrollbar styles in Tailwind?",
      "options": [
        "Use the scrollbar plugin",
        "Use built-in classes",
        "Use CSS directly",
        "Use JavaScript"
      ],
      "answer": "Use the scrollbar plugin"
    },
    {
      "id": 28,
      "question": "How do you customize font families?",
      "options": [
        "Extend fontFamily in tailwind.config.js",
        "Use inline styles",
        "Add CSS",
        "Use Google Fonts"
      ],
      "answer": "Extend fontFamily in tailwind.config.js"
    },
    {
      "id": 29,
      "question": "How do you add a ring color?",
      "options": [
        "ring-red-500",
        "ring-color-red",
        "ring-style-red",
        "ring-bg-red"
      ],
      "answer": "ring-red-500"
    },
    {
      "id": 30,
      "question": "Which class applies a blur effect?",
      "options": [
        "blur",
        "blur-effect",
        "filter-blur",
        "blur-md"
      ],
      "answer": "blur"
    }
  ]
},
{
  "id": "t3",
  "name": "Tailwind CSS Intermediate",
  "duration": 45,
  "questions": [
    {
      "id": 1,
      "question": "How do you configure custom breakpoints in Tailwind?",
      "options": [
        "Modify screens in tailwind.config.js",
        "Use CSS media queries only",
        "Use JavaScript to detect screen size",
        "Use inline styles"
      ],
      "answer": "Modify screens in tailwind.config.js"
    },
    {
      "id": 2,
      "question": "What does `important: true` do in tailwind.config.js?",
      "options": [
        "Applies !important to all utilities",
        "Disables some utilities",
        "Enables dark mode",
        "Removes unused CSS"
      ],
      "answer": "Applies !important to all utilities"
    },
    {
      "id": 3,
      "question": "How do you generate utilities for custom variants?",
      "options": [
        "Using plugins in tailwind.config.js",
        "Modifying CSS files",
        "Using JavaScript",
        "Using inline styles"
      ],
      "answer": "Using plugins in tailwind.config.js"
    },
    {
      "id": 4,
      "question": "What is the purpose of the `@apply` directive in Tailwind?",
      "options": [
        "To compose utility classes in CSS files",
        "To add inline styles",
        "To override default styles",
        "To import CSS"
      ],
      "answer": "To compose utility classes in CSS files"
    },
    {
      "id": 5,
      "question": "How do you optimize Tailwind CSS for production?",
      "options": [
        "Use PurgeCSS or built-in purge option",
        "Use inline styles",
        "Add all CSS manually",
        "Use CDN only"
      ],
      "answer": "Use PurgeCSS or built-in purge option"
    },
    {
      "id": 6,
      "question": "How do you extend Tailwind spacing scale?",
      "options": [
        "Add new values in tailwind.config.js under theme.extend.spacing",
        "Edit CSS directly",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Add new values in tailwind.config.js under theme.extend.spacing"
    },
    {
      "id": 7,
      "question": "How can you customize the font sizes?",
      "options": [
        "Extend theme.fontSize in tailwind.config.js",
        "Use inline styles",
        "Add in CSS",
        "Use default sizes only"
      ],
      "answer": "Extend theme.fontSize in tailwind.config.js"
    },
    {
      "id": 8,
      "question": "What is the difference between `space-x-*` and `gap-x-*`?",
      "options": [
        "`space-x` adds margin between siblings; `gap-x` works with grid/flex gaps",
        "No difference",
        "`gap-x` adds margin; `space-x` adds padding",
        "Both deprecated"
      ],
      "answer": "`space-x` adds margin between siblings; `gap-x` works with grid/flex gaps"
    },
    {
      "id": 9,
      "question": "How do you create a custom plugin in Tailwind?",
      "options": [
        "Write a function and add to plugins array in config",
        "Write CSS",
        "Use inline styles",
        "Add JavaScript"
      ],
      "answer": "Write a function and add to plugins array in config"
    },
    {
      "id": 10,
      "question": "How do you use arbitrary values in Tailwind?",
      "options": [
        "Use square brackets with values e.g. w-[32px]",
        "Use normal classes only",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use square brackets with values e.g. w-[32px]"
    },
    {
      "id": 11,
      "question": "What does the 'dark:' variant do?",
      "options": [
        "Applies styles when dark mode is active",
        "Applies styles on hover",
        "Applies styles on focus",
        "Disables styles"
      ],
      "answer": "Applies styles when dark mode is active"
    },
    {
      "id": 12,
      "question": "How do you implement RTL support in Tailwind?",
      "options": [
        "Use the Tailwind RTL plugin",
        "Add custom CSS",
        "Use inline styles",
        "Use external libraries"
      ],
      "answer": "Use the Tailwind RTL plugin"
    },
    {
      "id": 13,
      "question": "How do you add variants for group-hover and focus within plugins?",
      "options": [
        "Add variants: ['group-hover', 'focus'] in plugin config",
        "Use CSS only",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Add variants: ['group-hover', 'focus'] in plugin config"
    },
    {
      "id": 14,
      "question": "How can you change the default font family?",
      "options": [
        "Override theme.fontFamily in tailwind.config.js",
        "Use inline styles",
        "Edit CSS files",
        "Use Google Fonts only"
      ],
      "answer": "Override theme.fontFamily in tailwind.config.js"
    },
    {
      "id": 15,
      "question": "What is the use of 'content' property in Tailwind?",
      "options": [
        "Insert generated content with utilities like before/after",
        "Add text content",
        "Insert images",
        "Add HTML elements"
      ],
      "answer": "Insert generated content with utilities like before/after"
    },
    {
      "id": 16,
      "question": "How to enable JIT mode in Tailwind?",
      "options": [
        "Set mode: 'jit' in tailwind.config.js",
        "Use npm package",
        "Use inline styles",
        "No need to enable"
      ],
      "answer": "Set mode: 'jit' in tailwind.config.js"
    },
    {
      "id": 17,
      "question": "How to customize container max-widths?",
      "options": [
        "Set container.screens in tailwind.config.js",
        "Edit CSS files",
        "Use inline styles",
        "Use external plugin"
      ],
      "answer": "Set container.screens in tailwind.config.js"
    },
    {
      "id": 18,
      "question": "What does 'peer' utility do?",
      "options": [
        "Allows styling sibling elements based on input state",
        "Sets element position",
        "Adds margin",
        "Controls opacity"
      ],
      "answer": "Allows styling sibling elements based on input state"
    },
    {
      "id": 19,
      "question": "How do you remove default margin/padding from all elements?",
      "options": [
        "Use preflight base styles",
        "Add margin-0 padding-0 classes",
        "Use CSS reset",
        "Use inline styles"
      ],
      "answer": "Use preflight base styles"
    },
    {
      "id": 20,
      "question": "How can you add accessibility variants in Tailwind?",
      "options": [
        "Use plugins or add custom variants",
        "Use CSS only",
        "Use JavaScript",
        "No support"
      ],
      "answer": "Use plugins or add custom variants"
    },
    {
      "id": 21,
      "question": "What does the 'important' flag do for utilities?",
      "options": [
        "Adds !important to the generated CSS",
        "Disables utilities",
        "Overrides inline styles",
        "Removes utilities"
      ],
      "answer": "Adds !important to the generated CSS"
    },
    {
      "id": 22,
      "question": "How do you add keyframe animations in Tailwind?",
      "options": [
        "Extend theme.keyframes and theme.animation in config",
        "Add CSS directly",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Extend theme.keyframes and theme.animation in config"
    },
    {
      "id": 23,
      "question": "How can you add scrollbar customization?",
      "options": [
        "Use scrollbar plugin",
        "Use CSS only",
        "Use inline styles",
        "No support"
      ],
      "answer": "Use scrollbar plugin"
    },
    {
      "id": 24,
      "question": "What is the purpose of the 'container' directive in Tailwind?",
      "options": [
        "Centers and sets max-width for content",
        "Adds margin",
        "Adds padding",
        "Adds border"
      ],
      "answer": "Centers and sets max-width for content"
    },
    {
      "id": 25,
      "question": "How do you create a responsive grid?",
      "options": [
        "Use grid-cols-* with responsive prefixes",
        "Use flexbox only",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use grid-cols-* with responsive prefixes"
    },
    {
      "id": 26,
      "question": "How do you apply multiple classes conditionally in Tailwind with React?",
      "options": [
        "Use classnames or clsx libraries",
        "Use inline styles",
        "Use CSS modules",
        "Use JavaScript only"
      ],
      "answer": "Use classnames or clsx libraries"
    },
    {
      "id": 27,
      "question": "How do you handle RTL flipping with Tailwind?",
      "options": [
        "Use rtl plugin",
        "Use inline styles",
        "Manually add styles",
        "Use JavaScript"
      ],
      "answer": "Use rtl plugin"
    },
    {
      "id": 28,
      "question": "How can you enable custom forms styling?",
      "options": [
        "Use @tailwindcss/forms plugin",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Use @tailwindcss/forms plugin"
    },
    {
      "id": 29,
      "question": "What does the 'divide-x' utility do?",
      "options": [
        "Adds borders between horizontal children",
        "Adds margin",
        "Adds padding",
        "Adds flex spacing"
      ],
      "answer": "Adds borders between horizontal children"
    },
    {
      "id": 30,
      "question": "How do you add screen reader only text?",
      "options": [
        "Use sr-only class",
        "Use invisible",
        "Use hidden",
        "Use aria-hidden"
      ],
      "answer": "Use sr-only class"
    }
  ]
},
{
  "id": "t4",
  "name": "Tailwind CSS Advanced",
  "duration": 50,
  "questions": [
    {
      "id": 1,
      "question": "How does Tailwind’s JIT mode improve performance?",
      "options": [
        "Generates styles on-demand during build and dev",
        "Generates full CSS upfront",
        "Removes unused CSS at runtime",
        "Adds inline styles"
      ],
      "answer": "Generates styles on-demand during build and dev"
    },
    {
      "id": 2,
      "question": "How can you create complex responsive variants in Tailwind?",
      "options": [
        "Combine multiple variants e.g. md:hover:",
        "Use only one variant at a time",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Combine multiple variants e.g. md:hover:"
    },
    {
      "id": 3,
      "question": "How do you add a custom utility with Tailwind plugins?",
      "options": [
        "Use addUtilities function inside plugin",
        "Modify CSS directly",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use addUtilities function inside plugin"
    },
    {
      "id": 4,
      "question": "What is the difference between preflight and normalize CSS?",
      "options": [
        "Preflight is Tailwind’s customized base styles; normalize is generic CSS reset",
        "Both are same",
        "Preflight is deprecated",
        "Normalize is Tailwind only"
      ],
      "answer": "Preflight is Tailwind’s customized base styles; normalize is generic CSS reset"
    },
    {
      "id": 5,
      "question": "How to add conditional variants for peer and group?",
      "options": [
        "Configure variants in tailwind.config.js",
        "Use inline styles",
        "Use JavaScript",
        "Use CSS only"
      ],
      "answer": "Configure variants in tailwind.config.js"
    },
    {
      "id": 6,
      "question": "How do you configure Tailwind to purge unused styles dynamically?",
      "options": [
        "Use content array with globs in tailwind.config.js",
        "Purge manually",
        "Use JavaScript",
        "Use inline styles"
      ],
      "answer": "Use content array with globs in tailwind.config.js"
    },
    {
      "id": 7,
      "question": "How to extend Tailwind’s colors with opacity variants?",
      "options": [
        "Use color opacity utilities or extend colors with RGBA",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Use color opacity utilities or extend colors with RGBA"
    },
    {
      "id": 8,
      "question": "How do you customize screens to use max-width instead of min-width?",
      "options": [
        "Define screens as { max: 'value' } in tailwind.config.js",
        "Use inline styles",
        "Use CSS media queries",
        "Use JavaScript"
      ],
      "answer": "Define screens as { max: 'value' } in tailwind.config.js"
    },
    {
      "id": 9,
      "question": "How do you create reusable components with Tailwind?",
      "options": [
        "Use @apply directive in CSS",
        "Copy paste classes",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use @apply directive in CSS"
    },
    {
      "id": 10,
      "question": "How can you handle specificity issues in Tailwind?",
      "options": [
        "Use important flag or higher specificity selectors",
        "Use inline styles",
        "Avoid conflicts",
        "Use JavaScript"
      ],
      "answer": "Use important flag or higher specificity selectors"
    },
    {
      "id": 11,
      "question": "What is the difference between 'space-x' and 'gap-x' when using flexbox?",
      "options": [
        "space-x adds margin between siblings; gap-x uses gap property",
        "No difference",
        "gap-x adds margin; space-x adds padding",
        "Both deprecated"
      ],
      "answer": "space-x adds margin between siblings; gap-x uses gap property"
    },
    {
      "id": 12,
      "question": "How to customize the typography plugin?",
      "options": [
        "Override theme.typography in config",
        "Use inline styles",
        "Add CSS",
        "Use JavaScript"
      ],
      "answer": "Override theme.typography in config"
    },
    {
      "id": 13,
      "question": "How do you debug generated Tailwind CSS classes?",
      "options": [
        "Use browser dev tools and inspect styles",
        "Print classes in console",
        "Use JavaScript debugging",
        "Use inline styles"
      ],
      "answer": "Use browser dev tools and inspect styles"
    },
    {
      "id": 14,
      "question": "How to use Tailwind CSS with CSS Modules?",
      "options": [
        "Import Tailwind globally and use class names in modules",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Import Tailwind globally and use class names in modules"
    },
    {
      "id": 15,
      "question": "How do you add transition timing functions?",
      "options": [
        "Use ease-linear, ease-in, ease-out classes",
        "Use CSS only",
        "Use JavaScript",
        "Use inline styles"
      ],
      "answer": "Use ease-linear, ease-in, ease-out classes"
    },
    {
      "id": 16,
      "question": "How to create a responsive container with max width?",
      "options": [
        "Use container class with responsive max-width",
        "Use fixed width",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use container class with responsive max-width"
    },
    {
      "id": 17,
      "question": "How do you extend Tailwind to support custom fonts?",
      "options": [
        "Add to theme.fontFamily in tailwind.config.js",
        "Use Google Fonts only",
        "Use inline styles",
        "Use CSS only"
      ],
      "answer": "Add to theme.fontFamily in tailwind.config.js"
    },
    {
      "id": 18,
      "question": "How do you control the order of flex items?",
      "options": [
        "Use order-* classes",
        "Use z-index",
        "Use position absolute",
        "Use inline styles"
      ],
      "answer": "Use order-* classes"
    },
    {
      "id": 19,
      "question": "How do you customize form inputs appearance?",
      "options": [
        "Use @tailwindcss/forms plugin",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Use @tailwindcss/forms plugin"
    },
    {
      "id": 20,
      "question": "What is the purpose of the `content-['']` utility?",
      "options": [
        "Insert generated content (empty string) for pseudo-elements",
        "Add text content",
        "Add images",
        "Add HTML elements"
      ],
      "answer": "Insert generated content (empty string) for pseudo-elements"
    },
    {
      "id": 21,
      "question": "How do you disable transitions on certain elements?",
      "options": [
        "Use transition-none class",
        "Remove all classes",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use transition-none class"
    },
    {
      "id": 22,
      "question": "How do you add custom shadows?",
      "options": [
        "Extend boxShadow in tailwind.config.js",
        "Use inline styles",
        "Add CSS only",
        "Use JavaScript"
      ],
      "answer": "Extend boxShadow in tailwind.config.js"
    },
    {
      "id": 23,
      "question": "How do you customize animation durations?",
      "options": [
        "Extend animation.duration in config",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Extend animation.duration in config"
    },
    {
      "id": 24,
      "question": "How can you force Tailwind to include rarely used classes?",
      "options": [
        "Add them in safelist option",
        "Add inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Add them in safelist option"
    },
    {
      "id": 25,
      "question": "How do you create custom breakpoints?",
      "options": [
        "Add to screens property in tailwind.config.js",
        "Use CSS only",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Add to screens property in tailwind.config.js"
    },
    {
      "id": 26,
      "question": "What is the recommended way to add Tailwind CSS in a React project?",
      "options": [
        "Install via npm and configure PostCSS",
        "Use CDN only",
        "Add CSS manually",
        "Use inline styles"
      ],
      "answer": "Install via npm and configure PostCSS"
    },
    {
      "id": 27,
      "question": "How do you configure Tailwind with Next.js?",
      "options": [
        "Install tailwindcss, postcss, autoprefixer and configure postcss.config.js",
        "Use CDN only",
        "Add CSS manually",
        "Use inline styles"
      ],
      "answer": "Install tailwindcss, postcss, autoprefixer and configure postcss.config.js"
    },
    {
      "id": 28,
      "question": "How can you reduce build time in large Tailwind projects?",
      "options": [
        "Enable JIT mode and optimize purge paths",
        "Add all CSS manually",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Enable JIT mode and optimize purge paths"
    },
    {
      "id": 29,
      "question": "How do you create responsive typography?",
      "options": [
        "Use responsive font size classes like sm:text-lg",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Use responsive font size classes like sm:text-lg"
    },
    {
      "id": 30,
      "question": "How do you add gradients with custom colors?",
      "options": [
        "Extend gradientColorStops in config",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Extend gradientColorStops in config"
    }
  ]
},
{
  "id": "t5",
  "name": "Tailwind CSS Expert",
  "duration": 60,
  "questions": [
    {
      "id": 1,
      "question": "Explain the internal working of Tailwind JIT compiler.",
      "options": [
        "It scans your source files and generates only the used classes on the fly",
        "Generates full CSS upfront",
        "Uses runtime CSS generation",
        "Caches all styles"
      ],
      "answer": "It scans your source files and generates only the used classes on the fly"
    },
    {
      "id": 2,
      "question": "How do you write custom variants for Tailwind plugins?",
      "options": [
        "Use addVariant function in plugin API",
        "Use CSS only",
        "Use JavaScript only",
        "Use inline styles"
      ],
      "answer": "Use addVariant function in plugin API"
    },
    {
      "id": 3,
      "question": "How do you handle complex states like ‘focus-within’ with Tailwind?",
      "options": [
        "Use focus-within: prefix variant",
        "Use JavaScript events",
        "Use inline styles",
        "Not possible"
      ],
      "answer": "Use focus-within: prefix variant"
    },
    {
      "id": 4,
      "question": "How can you integrate Tailwind CSS with CSS-in-JS libraries?",
      "options": [
        "Use twin.macro or className with Tailwind classes",
        "Use inline styles",
        "Use only CSS",
        "Not recommended"
      ],
      "answer": "Use twin.macro or className with Tailwind classes"
    },
    {
      "id": 5,
      "question": "How do you create a dynamic utility class in Tailwind plugin?",
      "options": [
        "Use matchUtilities API",
        "Add static utilities only",
        "Use JavaScript only",
        "Use inline styles"
      ],
      "answer": "Use matchUtilities API"
    },
    {
      "id": 6,
      "question": "What are the best practices to keep Tailwind CSS bundle size minimal?",
      "options": [
        "Use JIT mode and purge unused CSS correctly",
        "Include all classes",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Use JIT mode and purge unused CSS correctly"
    },
    {
      "id": 7,
      "question": "Explain the difference between Tailwind’s base, components, and utilities layers.",
      "options": [
        "Base is reset styles, components are reusable classes, utilities are single purpose classes",
        "All are same",
        "Base is components, utilities are JavaScript",
        "Components are base styles"
      ],
      "answer": "Base is reset styles, components are reusable classes, utilities are single purpose classes"
    },
    {
      "id": 8,
      "question": "How do you write conditional responsive utilities in Tailwind plugins?",
      "options": [
        "Use variants API with media queries",
        "Use JavaScript only",
        "Use inline styles",
        "Not supported"
      ],
      "answer": "Use variants API with media queries"
    },
    {
      "id": 9,
      "question": "How does Tailwind handle specificity and conflicting styles?",
      "options": [
        "Generates CSS in order, later classes override earlier ones",
        "Uses !important everywhere",
        "Uses inline styles",
        "Uses JavaScript"
      ],
      "answer": "Generates CSS in order, later classes override earlier ones"
    },
    {
      "id": 10,
      "question": "How can you use Tailwind with server-side rendering frameworks?",
      "options": [
        "Configure purge/content properly and import CSS globally",
        "Use inline styles only",
        "Use CDN",
        "Not possible"
      ],
      "answer": "Configure purge/content properly and import CSS globally"
    },
    {
      "id": 11,
      "question": "Explain how you can customize Tailwind’s default animations.",
      "options": [
        "Extend keyframes and animation in tailwind.config.js",
        "Use inline styles",
        "Add CSS animations",
        "Use JavaScript"
      ],
      "answer": "Extend keyframes and animation in tailwind.config.js"
    },
    {
      "id": 12,
      "question": "What is the benefit of using Tailwind's arbitrary variants and values?",
      "options": [
        "Allows fine-tuned customization without editing config",
        "No benefit",
        "Adds complexity",
        "Not supported"
      ],
      "answer": "Allows fine-tuned customization without editing config"
    },
    {
      "id": 13,
      "question": "How can you use Tailwind to build design systems?",
      "options": [
        "Create component classes using @apply and customize config",
        "Use default utilities only",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Create component classes using @apply and customize config"
    },
    {
      "id": 14,
      "question": "How to ensure accessibility while using Tailwind CSS?",
      "options": [
        "Use semantic HTML and utility classes carefully",
        "Use inline styles only",
        "Use JavaScript",
        "Accessibility not supported"
      ],
      "answer": "Use semantic HTML and utility classes carefully"
    },
    {
      "id": 15,
      "question": "What is the function of the `corePlugins` option?",
      "options": [
        "Enable or disable core utilities",
        "Add custom plugins",
        "Override defaults",
        "Add CSS manually"
      ],
      "answer": "Enable or disable core utilities"
    },
    {
      "id": 16,
      "question": "How can you extend Tailwind with third-party plugins?",
      "options": [
        "Install plugin and add to plugins array",
        "Add CSS manually",
        "Use inline styles",
        "Not supported"
      ],
      "answer": "Install plugin and add to plugins array"
    },
    {
      "id": 17,
      "question": "How does the `safelist` option help in Tailwind config?",
      "options": [
        "Prevents purge of specified classes",
        "Adds new utilities",
        "Overrides defaults",
        "Removes unused CSS"
      ],
      "answer": "Prevents purge of specified classes"
    },
    {
      "id": 18,
      "question": "How do you debug Tailwind’s generated CSS during development?",
      "options": [
        "Inspect elements in browser devtools and check styles",
        "Print to console",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Inspect elements in browser devtools and check styles"
    },
    {
      "id": 19,
      "question": "How do you combine Tailwind with utility-first JavaScript frameworks?",
      "options": [
        "Use class bindings or libraries like twin.macro",
        "Use inline styles",
        "Use CSS only",
        "Not recommended"
      ],
      "answer": "Use class bindings or libraries like twin.macro"
    },
    {
      "id": 20,
      "question": "What is the impact of enabling `experimental` features in Tailwind config?",
      "options": [
        "Enables upcoming features with possible instability",
        "Disables some utilities",
        "Optimizes build",
        "No impact"
      ],
      "answer": "Enables upcoming features with possible instability"
    },
    {
      "id": 21,
      "question": "Explain how to use Tailwind CSS with React Native.",
      "options": [
        "Use libraries like Tailwind React Native Classnames",
        "Use inline styles only",
        "Use CSS only",
        "Not supported"
      ],
      "answer": "Use libraries like Tailwind React Native Classnames"
    },
    {
      "id": 22,
      "question": "How can you handle large-scale projects with Tailwind CSS?",
      "options": [
        "Use design tokens, component classes, and config customization",
        "Use inline styles only",
        "Use CSS only",
        "Avoid Tailwind"
      ],
      "answer": "Use design tokens, component classes, and config customization"
    },
    {
      "id": 23,
      "question": "What is the purpose of the `variants` section in Tailwind config?",
      "options": [
        "Configure which variants are generated for utilities",
        "Add new utilities",
        "Add CSS",
        "Use JavaScript"
      ],
      "answer": "Configure which variants are generated for utilities"
    },
    {
      "id": 24,
      "question": "How can Tailwind CSS improve developer productivity?",
      "options": [
        "By providing utility classes that reduce CSS writing",
        "By adding inline styles",
        "By adding components",
        "By adding JavaScript"
      ],
      "answer": "By providing utility classes that reduce CSS writing"
    },
    {
      "id": 25,
      "question": "How to handle custom SVG styling with Tailwind?",
      "options": [
        "Use utilities for fill, stroke, and sizing",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Use utilities for fill, stroke, and sizing"
    },
    {
      "id": 26,
      "question": "Explain the use of the `prefix` option in Tailwind config.",
      "options": [
        "Adds a prefix to all generated classes to avoid conflicts",
        "Adds margin",
        "Adds padding",
        "Overrides styles"
      ],
      "answer": "Adds a prefix to all generated classes to avoid conflicts"
    },
    {
      "id": 27,
      "question": "How can you create custom media queries?",
      "options": [
        "Add custom screens in tailwind.config.js",
        "Use CSS only",
        "Use inline styles",
        "Use JavaScript"
      ],
      "answer": "Add custom screens in tailwind.config.js"
    },
    {
      "id": 28,
      "question": "How to handle dark mode toggle programmatically?",
      "options": [
        "Toggle a class on the root element",
        "Use JavaScript only",
        "Use CSS only",
        "Use inline styles"
      ],
      "answer": "Toggle a class on the root element"
    },
    {
      "id": 29,
      "question": "What is the recommended way to extend Tailwind’s functionality?",
      "options": [
        "Use plugins and extend config",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Use plugins and extend config"
    },
    {
      "id": 30,
      "question": "How do you manage custom z-index values?",
      "options": [
        "Extend zIndex in tailwind.config.js",
        "Use inline styles",
        "Use CSS only",
        "Use JavaScript"
      ],
      "answer": "Extend zIndex in tailwind.config.js"
    }
  ]
}





    ]
  },
  {
    "id": "c8",
    "name": "SpringBoot",
    "tests": [
      {
  "id": "t1",
  "name": "Spring Boot Basic",
  "duration": 30,
  "questions": [
    {
      "id": 1,
      "question": "What is Spring Boot mainly used for?",
      "options": [
        "Creating standalone, production-grade Spring-based applications",
        "Designing databases",
        "Building desktop applications",
        "Managing cloud infrastructure"
      ],
      "answer": "Creating standalone, production-grade Spring-based applications"
    },
    {
      "id": 2,
      "question": "Which annotation is used to mark the main class of a Spring Boot application?",
      "options": [
        "@SpringBootApplication",
        "@EnableAutoConfiguration",
        "@Component",
        "@Controller"
      ],
      "answer": "@SpringBootApplication"
    },
    {
      "id": 3,
      "question": "Which file is primarily used to configure Spring Boot properties?",
      "options": [
        "application.properties",
        "pom.xml",
        "README.md",
        "build.gradle"
      ],
      "answer": "application.properties"
    },
    {
      "id": 4,
      "question": "What is the default embedded server in Spring Boot?",
      "options": [
        "Tomcat",
        "Jetty",
        "Undertow",
        "GlassFish"
      ],
      "answer": "Tomcat"
    },
    {
      "id": 5,
      "question": "What does Spring Boot Starter do?",
      "options": [
        "Provides a set of dependencies for a particular functionality",
        "Starts the server manually",
        "Manages database schemas",
        "Deploys the app to cloud"
      ],
      "answer": "Provides a set of dependencies for a particular functionality"
    },
    {
      "id": 6,
      "question": "Which annotation is used to create a REST controller?",
      "options": [
        "@RestController",
        "@Controller",
        "@Service",
        "@Component"
      ],
      "answer": "@RestController"
    },
    {
      "id": 7,
      "question": "How do you start a Spring Boot application?",
      "options": [
        "By running the main method with SpringApplication.run()",
        "Manually starting Tomcat server",
        "Running a shell script",
        "Using @Start annotation"
      ],
      "answer": "By running the main method with SpringApplication.run()"
    },
    {
      "id": 8,
      "question": "Which package manager is commonly used with Spring Boot projects?",
      "options": [
        "Maven",
        "npm",
        "pip",
        "yarn"
      ],
      "answer": "Maven"
    },
    {
      "id": 9,
      "question": "What does the @Autowired annotation do?",
      "options": [
        "Injects dependencies automatically",
        "Starts the server",
        "Manages database connections",
        "Handles HTTP requests"
      ],
      "answer": "Injects dependencies automatically"
    },
    {
      "id": 10,
      "question": "What is the default HTTP port for a Spring Boot application?",
      "options": [
        "8080",
        "80",
        "443",
        "3000"
      ],
      "answer": "8080"
    },
    {
      "id": 11,
      "question": "Which Spring Boot starter would you add to create web applications?",
      "options": [
        "spring-boot-starter-web",
        "spring-boot-starter-data-jpa",
        "spring-boot-starter-security",
        "spring-boot-starter-test"
      ],
      "answer": "spring-boot-starter-web"
    },
    {
      "id": 12,
      "question": "How do you expose REST endpoints in Spring Boot?",
      "options": [
        "By using @RequestMapping or shortcut annotations like @GetMapping",
        "By creating JSP pages",
        "Using XML configuration",
        "Using @Entity"
      ],
      "answer": "By using @RequestMapping or shortcut annotations like @GetMapping"
    },
    {
      "id": 13,
      "question": "Which annotation marks a method parameter as a request body?",
      "options": [
        "@RequestBody",
        "@PathVariable",
        "@RequestParam",
        "@ResponseBody"
      ],
      "answer": "@RequestBody"
    },
    {
      "id": 14,
      "question": "How does Spring Boot simplify dependency management?",
      "options": [
        "By providing starters that bundle dependencies",
        "By manually adding jars",
        "By using global variables",
        "By bundling all jars into a single file"
      ],
      "answer": "By providing starters that bundle dependencies"
    },
    {
      "id": 15,
      "question": "What annotation do you use to map a service class?",
      "options": [
        "@Service",
        "@Component",
        "@Repository",
        "@Controller"
      ],
      "answer": "@Service"
    },
    {
      "id": 16,
      "question": "Which annotation do you use to map a repository interface?",
      "options": [
        "@Repository",
        "@Service",
        "@Controller",
        "@Component"
      ],
      "answer": "@Repository"
    },
    {
      "id": 17,
      "question": "What is the default Spring Boot packaging format?",
      "options": [
        "Jar",
        "War",
        "Zip",
        "Tar"
      ],
      "answer": "Jar"
    },
    {
      "id": 18,
      "question": "How do you change the default server port in Spring Boot?",
      "options": [
        "Set server.port in application.properties",
        "Change main class annotation",
        "Edit pom.xml",
        "Set JVM arguments only"
      ],
      "answer": "Set server.port in application.properties"
    },
    {
      "id": 19,
      "question": "What is Spring Initializr?",
      "options": [
        "A web tool to bootstrap Spring Boot projects",
        "A server tool",
        "A database tool",
        "A testing framework"
      ],
      "answer": "A web tool to bootstrap Spring Boot projects"
    },
    {
      "id": 20,
      "question": "Which annotation do you use to enable configuration properties binding?",
      "options": [
        "@ConfigurationProperties",
        "@Value",
        "@Bean",
        "@Component"
      ],
      "answer": "@ConfigurationProperties"
    },
    {
      "id": 21,
      "question": "Which of these is NOT a Spring Boot feature?",
      "options": [
        "Auto-configuration",
        "Embedded servers",
        "Manual server setup required",
        "Starter dependencies"
      ],
      "answer": "Manual server setup required"
    },
    {
      "id": 22,
      "question": "How do you create a bean in Spring Boot?",
      "options": [
        "Annotate with @Bean or use component scanning",
        "Declare in XML",
        "Use static classes",
        "Manually instantiate in main"
      ],
      "answer": "Annotate with @Bean or use component scanning"
    },
    {
      "id": 23,
      "question": "Which Spring Boot starter is used for testing?",
      "options": [
        "spring-boot-starter-test",
        "spring-boot-starter-web",
        "spring-boot-starter-security",
        "spring-boot-starter-data-jpa"
      ],
      "answer": "spring-boot-starter-test"
    },
    {
      "id": 24,
      "question": "Which logging framework is used by default in Spring Boot?",
      "options": [
        "Logback",
        "Log4j",
        "Java Util Logging",
        "SLF4J only"
      ],
      "answer": "Logback"
    },
    {
      "id": 25,
      "question": "What is the default scope of a Spring Bean?",
      "options": [
        "Singleton",
        "Prototype",
        "Request",
        "Session"
      ],
      "answer": "Singleton"
    },
    {
      "id": 26,
      "question": "Which annotation enables scheduling in Spring Boot?",
      "options": [
        "@EnableScheduling",
        "@Scheduled",
        "@Async",
        "@EnableAsync"
      ],
      "answer": "@EnableScheduling"
    },
    {
      "id": 27,
      "question": "How do you handle exceptions globally in Spring Boot?",
      "options": [
        "Using @ControllerAdvice",
        "Using try-catch only",
        "Using @ExceptionHandler in each controller",
        "Using filters only"
      ],
      "answer": "Using @ControllerAdvice"
    },
    {
      "id": 28,
      "question": "Which Spring Boot annotation enables caching?",
      "options": [
        "@EnableCaching",
        "@Cacheable",
        "@CacheEvict",
        "@CacheConfig"
      ],
      "answer": "@EnableCaching"
    },
    {
      "id": 29,
      "question": "Which annotation is used to bind HTTP request parameters to method parameters?",
      "options": [
        "@RequestParam",
        "@RequestBody",
        "@PathVariable",
        "@RequestHeader"
      ],
      "answer": "@RequestParam"
    },
    {
      "id": 30,
      "question": "What is the role of spring-boot-devtools?",
      "options": [
        "Enables automatic restart and live reload during development",
        "Manages database migrations",
        "Builds Docker images",
        "Manages cloud deployments"
      ],
      "answer": "Enables automatic restart and live reload during development"
    }
  ]
},
{
  "id": "t2",
  "name": "Spring Boot Beginner",
  "duration": 40,
  "questions": [
    {
      "id": 1,
      "question": "What does @SpringBootApplication annotation include?",
      "options": [
        "@EnableAutoConfiguration, @ComponentScan, @Configuration",
        "@Controller, @Service, @Repository",
        "@ComponentScan only",
        "@EnableWebSecurity"
      ],
      "answer": "@EnableAutoConfiguration, @ComponentScan, @Configuration"
    },
    {
      "id": 2,
      "question": "What is auto-configuration in Spring Boot?",
      "options": [
        "Automatically configures Spring application based on dependencies",
        "Manual XML configuration",
        "Configuring only database",
        "Configuring UI components"
      ],
      "answer": "Automatically configures Spring application based on dependencies"
    },
    {
      "id": 3,
      "question": "Which annotation marks a class as a configuration class?",
      "options": [
        "@Configuration",
        "@Component",
        "@Bean",
        "@Service"
      ],
      "answer": "@Configuration"
    },
    {
      "id": 4,
      "question": "How to define a bean in a configuration class?",
      "options": [
        "Use @Bean annotated method",
        "Use @Component annotation",
        "Use XML configuration",
        "Manually instantiate"
      ],
      "answer": "Use @Bean annotated method"
    },
    {
      "id": 5,
      "question": "Which annotation is used to handle HTTP GET requests?",
      "options": [
        "@GetMapping",
        "@PostMapping",
        "@RequestMapping(method = POST)",
        "@DeleteMapping"
      ],
      "answer": "@GetMapping"
    },
    {
      "id": 6,
      "question": "What is Spring Data JPA?",
      "options": [
        "A Spring module to simplify database access with JPA",
        "A testing tool",
        "A UI framework",
        "A build tool"
      ],
      "answer": "A Spring module to simplify database access with JPA"
    },
    {
      "id": 7,
      "question": "How do you define a JPA entity?",
      "options": [
        "Annotate class with @Entity",
        "Use @Repository",
        "Use @Component",
        "Use XML mapping"
      ],
      "answer": "Annotate class with @Entity"
    },
    {
      "id": 8,
      "question": "What does CrudRepository provide?",
      "options": [
        "Basic CRUD methods for JPA entities",
        "UI components",
        "Web services",
        "Scheduling support"
      ],
      "answer": "Basic CRUD methods for JPA entities"
    },
    {
      "id": 9,
      "question": "How to execute custom queries in Spring Data JPA?",
      "options": [
        "Using @Query annotation",
        "Writing native SQL only",
        "Manual JDBC code",
        "Using JPQL not supported"
      ],
      "answer": "Using @Query annotation"
    },
    {
      "id": 10,
      "question": "What is the use of @Transactional annotation?",
      "options": [
        "Defines transactional boundaries for methods",
        "Defines REST endpoints",
        "Injects beans",
        "Schedules jobs"
      ],
      "answer": "Defines transactional boundaries for methods"
    },
    {
      "id": 11,
      "question": "How to externalize configuration in Spring Boot?",
      "options": [
        "Using application.properties or application.yml files",
        "Hard coding values",
        "Using XML",
        "Using annotations only"
      ],
      "answer": "Using application.properties or application.yml files"
    },
    {
      "id": 12,
      "question": "What is the use of @Value annotation?",
      "options": [
        "Injects values from properties files into fields",
        "Creates beans",
        "Marks methods as endpoints",
        "Handles exceptions"
      ],
      "answer": "Injects values from properties files into fields"
    },
    {
      "id": 13,
      "question": "How do you enable Spring Security in a Spring Boot app?",
      "options": [
        "Add spring-boot-starter-security dependency",
        "Add @EnableSecurity annotation",
        "Manually configure filters",
        "Use third-party libraries only"
      ],
      "answer": "Add spring-boot-starter-security dependency"
    },
    {
      "id": 14,
      "question": "Which starter provides integration with Thymeleaf?",
      "options": [
        "spring-boot-starter-thymeleaf",
        "spring-boot-starter-web",
        "spring-boot-starter-data-jpa",
        "spring-boot-starter-actuator"
      ],
      "answer": "spring-boot-starter-thymeleaf"
    },
    {
      "id": 15,
      "question": "How do you create a scheduled task in Spring Boot?",
      "options": [
        "Use @Scheduled annotation and enable scheduling",
        "Use Quartz only",
        "Create a new thread",
        "Use @Async only"
      ],
      "answer": "Use @Scheduled annotation and enable scheduling"
    },
    {
      "id": 16,
      "question": "What is actuator in Spring Boot?",
      "options": [
        "Provides production-ready monitoring endpoints",
        "Manages database schema",
        "Handles security",
        "Manages application packaging"
      ],
      "answer": "Provides production-ready monitoring endpoints"
    },
    {
      "id": 17,
      "question": "How do you customize error pages in Spring Boot?",
      "options": [
        "Create error.html or error/{status}.html in resources/templates",
        "Use XML",
        "Use JavaScript",
        "Manually configure in code only"
      ],
      "answer": "Create error.html or error/{status}.html in resources/templates"
    },
    {
      "id": 18,
      "question": "Which annotation marks a method to run after the application starts?",
      "options": [
        "@PostConstruct",
        "@PreDestroy",
        "@Bean",
        "@Controller"
      ],
      "answer": "@PostConstruct"
    },
    {
      "id": 19,
      "question": "How do you enable CORS in Spring Boot?",
      "options": [
        "Use @CrossOrigin annotation",
        "Use @EnableCors",
        "Use XML configuration",
        "Use filters only"
      ],
      "answer": "Use @CrossOrigin annotation"
    },
    {
      "id": 20,
      "question": "What is the purpose of spring-boot-starter-test?",
      "options": [
        "Includes testing libraries like JUnit, Mockito",
        "Provides web UI",
        "Manages database",
        "Manages logging"
      ],
      "answer": "Includes testing libraries like JUnit, Mockito"
    },
    {
      "id": 21,
      "question": "How do you configure logging level in Spring Boot?",
      "options": [
        "Set logging.level in application.properties",
        "Edit pom.xml",
        "Change main class annotation",
        "Use JVM options only"
      ],
      "answer": "Set logging.level in application.properties"
    },
    {
      "id": 22,
      "question": "Which tool can you use to monitor Spring Boot metrics?",
      "options": [
        "Spring Boot Actuator",
        "Spring Data JPA",
        "Maven",
        "Thymeleaf"
      ],
      "answer": "Spring Boot Actuator"
    },
    {
      "id": 23,
      "question": "Which property controls the context path of the application?",
      "options": [
        "server.servlet.context-path",
        "server.port",
        "spring.application.name",
        "server.host"
      ],
      "answer": "server.servlet.context-path"
    },
    {
      "id": 24,
      "question": "Which annotation do you use to map URL path variables?",
      "options": [
        "@PathVariable",
        "@RequestParam",
        "@RequestBody",
        "@RequestHeader"
      ],
      "answer": "@PathVariable"
    },
    {
      "id": 25,
      "question": "How do you handle form submissions in Spring MVC?",
      "options": [
        "Bind form data to a model object using @ModelAttribute",
        "Use @RequestBody only",
        "Use plain HTML only",
        "Use JavaScript"
      ],
      "answer": "Bind form data to a model object using @ModelAttribute"
    },
    {
      "id": 26,
      "question": "Which dependency management tool supports Gradle for Spring Boot?",
      "options": [
        "build.gradle",
        "pom.xml",
        "package.json",
        "requirements.txt"
      ],
      "answer": "build.gradle"
    },
    {
      "id": 27,
      "question": "What is the purpose of @SpringBootTest annotation?",
      "options": [
        "Used for integration testing with full Spring context",
        "Unit testing",
        "Mocking only",
        "Performance testing"
      ],
      "answer": "Used for integration testing with full Spring context"
    },
    {
      "id": 28,
      "question": "Which protocol does Spring Boot Actuator use to expose endpoints?",
      "options": [
        "HTTP",
        "FTP",
        "SMTP",
        "JMS"
      ],
      "answer": "HTTP"
    },
    {
      "id": 29,
      "question": "Which of these is used for file upload support in Spring Boot?",
      "options": [
        "MultipartFile",
        "FileReader",
        "BufferedReader",
        "FileInputStream"
      ],
      "answer": "MultipartFile"
    },
    {
      "id": 30,
      "question": "How do you exclude a bean from auto-configuration?",
      "options": [
        "Use @SpringBootApplication(exclude = ...)",
        "Delete the bean class",
        "Manually disable server",
        "Use @Ignore annotation"
      ],
      "answer": "Use @SpringBootApplication(exclude = ...)"
    }
  ]
},
{
  "id": "t3",
  "name": "Spring Boot Intermediate",
  "duration": 45,
  "questions": [
    {
      "id": 1,
      "question": "What is the use of @ConditionalOnProperty?",
      "options": [
        "Enables bean registration based on property value",
        "Conditional database migration",
        "Logging configuration",
        "Security filter"
      ],
      "answer": "Enables bean registration based on property value"
    },
    {
      "id": 2,
      "question": "How do you externalize configuration to profiles in Spring Boot?",
      "options": [
        "Use application-{profile}.properties files",
        "Use XML",
        "Use YAML only",
        "Manually load properties"
      ],
      "answer": "Use application-{profile}.properties files"
    },
    {
      "id": 3,
      "question": "What is actuator health endpoint?",
      "options": [
        "Provides application health status",
        "Returns server logs",
        "Manages database schema",
        "Monitors memory usage only"
      ],
      "answer": "Provides application health status"
    },
    {
      "id": 4,
      "question": "How do you customize the banner in Spring Boot?",
      "options": [
        "Place banner.txt in src/main/resources",
        "Edit application.properties",
        "Use XML",
        "Edit main class"
      ],
      "answer": "Place banner.txt in src/main/resources"
    },
    {
      "id": 5,
      "question": "What does spring.jpa.hibernate.ddl-auto do?",
      "options": [
        "Controls database schema generation",
        "Manages logging",
        "Controls server port",
        "Manages bean lifecycle"
      ],
      "answer": "Controls database schema generation"
    },
    {
      "id": 6,
      "question": "How do you enable HTTPS in Spring Boot?",
      "options": [
        "Configure SSL properties and provide keystore",
        "Add dependency only",
        "Use annotations",
        "Use XML"
      ],
      "answer": "Configure SSL properties and provide keystore"
    },
    {
      "id": 7,
      "question": "What is a RestTemplate?",
      "options": [
        "A synchronous HTTP client for RESTful services",
        "An ORM tool",
        "A testing framework",
        "A data binding tool"
      ],
      "answer": "A synchronous HTTP client for RESTful services"
    },
    {
      "id": 8,
      "question": "What is WebClient in Spring?",
      "options": [
        "A reactive, non-blocking HTTP client",
        "A template engine",
        "A database connector",
        "An XML parser"
      ],
      "answer": "A reactive, non-blocking HTTP client"
    },
    {
      "id": 9,
      "question": "How do you enable asynchronous processing in Spring Boot?",
      "options": [
        "Add @EnableAsync and use @Async annotation",
        "Use @Scheduled",
        "Use new threads manually",
        "Use CompletableFuture only"
      ],
      "answer": "Add @EnableAsync and use @Async annotation"
    },
    {
      "id": 10,
      "question": "What is the difference between @Controller and @RestController?",
      "options": [
        "@RestController combines @Controller and @ResponseBody",
        "They are the same",
        "@Controller is deprecated",
        "@RestController is for database only"
      ],
      "answer": "@RestController combines @Controller and @ResponseBody"
    },
    {
      "id": 11,
      "question": "What is the use of @EnableCaching?",
      "options": [
        "Enables caching support in Spring Boot",
        "Disables caching",
        "Manages database transactions",
        "Handles security"
      ],
      "answer": "Enables caching support in Spring Boot"
    },
    {
      "id": 12,
      "question": "How do you implement pagination with Spring Data JPA?",
      "options": [
        "Use Pageable and Page objects",
        "Write manual SQL only",
        "Use native queries only",
        "Use streams"
      ],
      "answer": "Use Pageable and Page objects"
    },
    {
      "id": 13,
      "question": "Which annotation can be used to bind configuration properties to a POJO?",
      "options": [
        "@ConfigurationProperties",
        "@Bean",
        "@Autowired",
        "@Repository"
      ],
      "answer": "@ConfigurationProperties"
    },
    {
      "id": 14,
      "question": "How can you disable specific auto-configuration classes?",
      "options": [
        "Use exclude attribute of @SpringBootApplication",
        "Delete dependency jars",
        "Edit pom.xml",
        "Use @DisableAutoConfiguration"
      ],
      "answer": "Use exclude attribute of @SpringBootApplication"
    },
    {
      "id": 15,
      "question": "What is the purpose of @Profile annotation?",
      "options": [
        "Loads beans only for specific profiles",
        "Manages database schemas",
        "Handles security",
        "Schedules tasks"
      ],
      "answer": "Loads beans only for specific profiles"
    },
    {
      "id": 16,
      "question": "Which of these is a Spring Boot starter for messaging with RabbitMQ?",
      "options": [
        "spring-boot-starter-amqp",
        "spring-boot-starter-web",
        "spring-boot-starter-data-jpa",
        "spring-boot-starter-cache"
      ],
      "answer": "spring-boot-starter-amqp"
    },
    {
      "id": 17,
      "question": "How do you handle exceptions globally in Spring Boot REST APIs?",
      "options": [
        "Use @ControllerAdvice with @ExceptionHandler methods",
        "Use try-catch everywhere",
        "Use filters only",
        "Use interceptors only"
      ],
      "answer": "Use @ControllerAdvice with @ExceptionHandler methods"
    },
    {
      "id": 18,
      "question": "What is the default database used by Spring Boot if none is configured?",
      "options": [
        "H2 in-memory database",
        "MySQL",
        "PostgreSQL",
        "Oracle"
      ],
      "answer": "H2 in-memory database"
    },
    {
      "id": 19,
      "question": "How do you secure REST APIs in Spring Boot?",
      "options": [
        "Use Spring Security with OAuth2 or JWT",
        "Write custom filters only",
        "Use basic auth only",
        "No security"
      ],
      "answer": "Use Spring Security with OAuth2 or JWT"
    },
    {
      "id": 20,
      "question": "What does the spring-boot-starter-actuator provide?",
      "options": [
        "Production-ready endpoints for monitoring and management",
        "UI components",
        "Database tools",
        "Build automation"
      ],
      "answer": "Production-ready endpoints for monitoring and management"
    },
    {
      "id": 21,
      "question": "What is the use of @Cacheable annotation?",
      "options": [
        "Caches method results to improve performance",
        "Disables caching",
        "Handles security",
        "Manages transactions"
      ],
      "answer": "Caches method results to improve performance"
    },
    {
      "id": 22,
      "question": "How do you enable HTTPS with a self-signed certificate in Spring Boot?",
      "options": [
        "Configure keystore properties in application.properties",
        "Add dependency only",
        "Use annotations only",
        "Use XML only"
      ],
      "answer": "Configure keystore properties in application.properties"
    },
    {
      "id": 23,
      "question": "How can you override default error messages in Spring Boot validation?",
      "options": [
        "By specifying message attribute in validation annotations",
        "Using XML only",
        "Hardcoded in code",
        "Cannot override"
      ],
      "answer": "By specifying message attribute in validation annotations"
    },
    {
      "id": 24,
      "question": "What is the use of @EnableJpaRepositories?",
      "options": [
        "Enables JPA repository scanning",
        "Enables security",
        "Enables caching",
        "Enables web support"
      ],
      "answer": "Enables JPA repository scanning"
    },
    {
      "id": 25,
      "question": "What is a health indicator in Spring Boot Actuator?",
      "options": [
        "A component that provides health info of app components",
        "A scheduler",
        "A security filter",
        "A database migration tool"
      ],
      "answer": "A component that provides health info of app components"
    },
    {
      "id": 26,
      "question": "Which annotation can be used to bind environment variables?",
      "options": [
        "@Value",
        "@Autowired",
        "@Bean",
        "@Repository"
      ],
      "answer": "@Value"
    },
    {
      "id": 27,
      "question": "What is the purpose of spring.jpa.show-sql property?",
      "options": [
        "Logs SQL queries generated by Hibernate",
        "Enables SQL injection protection",
        "Enables database migrations",
        "Manages connections"
      ],
      "answer": "Logs SQL queries generated by Hibernate"
    },
    {
      "id": 28,
      "question": "What is the use of spring.main.web-application-type property?",
      "options": [
        "Configures the type of web application (servlet/reactive/none)",
        "Sets logging level",
        "Manages database",
        "Manages security"
      ],
      "answer": "Configures the type of web application (servlet/reactive/none)"
    },
    {
      "id": 29,
      "question": "What is the use of spring-boot-starter-validation?",
      "options": [
        "Provides bean validation support",
        "Provides UI components",
        "Handles security",
        "Manages database"
      ],
      "answer": "Provides bean validation support"
    },
    {
      "id": 30,
      "question": "Which starter would you add for reactive programming in Spring Boot?",
      "options": [
        "spring-boot-starter-webflux",
        "spring-boot-starter-web",
        "spring-boot-starter-data-jpa",
        "spring-boot-starter-security"
      ],
      "answer": "spring-boot-starter-webflux"
    }
  ]
},
{
  "id": "t4",
  "name": "Spring Boot Advanced",
  "duration": 50,
  "questions": [
    {
      "id": 1,
      "question": "What is the difference between Spring Boot and Spring Framework?",
      "options": [
        "Spring Boot is opinionated, with auto-configuration and starters; Spring Framework is lower-level",
        "They are the same",
        "Spring Boot is for front-end only",
        "Spring Framework is deprecated"
      ],
      "answer": "Spring Boot is opinionated, with auto-configuration and starters; Spring Framework is lower-level"
    },
    {
      "id": 2,
      "question": "How does Spring Boot's auto-configuration work?",
      "options": [
        "It uses @Conditional annotations to configure beans based on classpath and properties",
        "It requires manual bean registration",
        "It only configures databases",
        "It runs only in tests"
      ],
      "answer": "It uses @Conditional annotations to configure beans based on classpath and properties"
    },
    {
      "id": 3,
      "question": "What are Spring Boot Starters?",
      "options": [
        "Predefined dependency descriptors for common functionality",
        "Build tools",
        "Database schemas",
        "Logging frameworks"
      ],
      "answer": "Predefined dependency descriptors for common functionality"
    },
    {
      "id": 4,
      "question": "How to customize the auto-configuration classes?",
      "options": [
        "Use spring.factories or exclude them via @SpringBootApplication",
        "Edit core classes",
        "Manually add beans only",
        "Change the main class"
      ],
      "answer": "Use spring.factories or exclude them via @SpringBootApplication"
    },
    {
      "id": 5,
      "question": "What is Spring Boot Actuator’s info endpoint?",
      "options": [
        "Shows arbitrary application info from properties",
        "Shows health status only",
        "Shows error details",
        "Shows logs"
      ],
      "answer": "Shows arbitrary application info from properties"
    },
    {
      "id": 6,
      "question": "How do you implement custom health indicators?",
      "options": [
        "Implement HealthIndicator interface and register bean",
        "Use @Health annotation",
        "Use application.properties only",
        "Use spring.factories only"
      ],
      "answer": "Implement HealthIndicator interface and register bean"
    },
    {
      "id": 7,
      "question": "What is Spring Boot DevTools?",
      "options": [
        "Provides automatic restarts and live reload during development",
        "A deployment tool",
        "A testing tool",
        "A database migration tool"
      ],
      "answer": "Provides automatic restarts and live reload during development"
    },
    {
      "id": 8,
      "question": "How do you configure Spring Boot for containerization?",
      "options": [
        "Use Spring Boot build plugins like Jib or Dockerfile with Maven/Gradle",
        "Add dependencies only",
        "Use cloud tools only",
        "Use XML configuration"
      ],
      "answer": "Use Spring Boot build plugins like Jib or Dockerfile with Maven/Gradle"
    },
    {
      "id": 9,
      "question": "What is a functional bean registration?",
      "options": [
        "Registering beans using functional style in Java config",
        "Using XML configuration",
        "Using annotations only",
        "Using interfaces only"
      ],
      "answer": "Registering beans using functional style in Java config"
    },
    {
      "id": 10,
      "question": "How do you handle application events in Spring Boot?",
      "options": [
        "Implement ApplicationListener or use @EventListener",
        "Use filters only",
        "Use scheduled tasks",
        "Use custom annotations only"
      ],
      "answer": "Implement ApplicationListener or use @EventListener"
    },
    {
      "id": 11,
      "question": "What is the difference between @EnableAutoConfiguration and @SpringBootApplication?",
      "options": [
        "@SpringBootApplication includes @EnableAutoConfiguration, @ComponentScan, @Configuration",
        "They are the same",
        "@EnableAutoConfiguration is deprecated",
        "@SpringBootApplication is for tests only"
      ],
      "answer": "@SpringBootApplication includes @EnableAutoConfiguration, @ComponentScan, @Configuration"
    },
    {
      "id": 12,
      "question": "What is reactive programming in Spring Boot?",
      "options": [
        "Asynchronous, non-blocking programming model using Project Reactor",
        "Synchronous blocking programming",
        "UI rendering",
        "Database migration"
      ],
      "answer": "Asynchronous, non-blocking programming model using Project Reactor"
    },
    {
      "id": 13,
      "question": "Which starter should be used for reactive web applications?",
      "options": [
        "spring-boot-starter-webflux",
        "spring-boot-starter-web",
        "spring-boot-starter-data-jpa",
        "spring-boot-starter-security"
      ],
      "answer": "spring-boot-starter-webflux"
    },
    {
      "id": 14,
      "question": "What is the purpose of @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)?",
      "options": [
        "Starts the server on a random port for integration tests",
        "Starts server on default port",
        "Mocks server only",
        "Disables server"
      ],
      "answer": "Starts the server on a random port for integration tests"
    },
    {
      "id": 15,
      "question": "How can you secure endpoints with method-level security?",
      "options": [
        "Use @EnableGlobalMethodSecurity and annotations like @PreAuthorize",
        "Use @Controller only",
        "Use filters only",
        "Use XML only"
      ],
      "answer": "Use @EnableGlobalMethodSecurity and annotations like @PreAuthorize"
    },
    {
      "id": 16,
      "question": "What is Spring Cloud in relation to Spring Boot?",
      "options": [
        "A set of tools for distributed systems and microservices",
        "Database module",
        "UI module",
        "Logging framework"
      ],
      "answer": "A set of tools for distributed systems and microservices"
    },
    {
      "id": 17,
      "question": "How does Spring Boot support distributed tracing?",
      "options": [
        "Through Spring Cloud Sleuth integration",
        "Through Actuator only",
        "No support",
        "Using filters only"
      ],
      "answer": "Through Spring Cloud Sleuth integration"
    },
    {
      "id": 18,
      "question": "What is Spring Boot's approach to database migrations?",
      "options": [
        "Supports Flyway and Liquibase for versioned migrations",
        "No support",
        "Manual SQL only",
        "XML configuration only"
      ],
      "answer": "Supports Flyway and Liquibase for versioned migrations"
    },
    {
      "id": 19,
      "question": "How do you test Spring Boot REST controllers?",
      "options": [
        "Use @WebMvcTest annotation",
        "Use @SpringBootTest only",
        "Use manual mocks only",
        "Use Selenium only"
      ],
      "answer": "Use @WebMvcTest annotation"
    },
    {
      "id": 20,
      "question": "What is the use of @ConditionalOnClass?",
      "options": [
        "Loads beans only if a class is present in classpath",
        "Loads beans always",
        "Loads beans only if a property is set",
        "Disables beans"
      ],
      "answer": "Loads beans only if a class is present in classpath"
    },
    {
      "id": 21,
      "question": "What are Spring Boot Metrics?",
      "options": [
        "Data points collected about app behavior like memory, CPU, requests",
        "UI components",
        "Database schemas",
        "Security filters"
      ],
      "answer": "Data points collected about app behavior like memory, CPU, requests"
    },
    {
      "id": 22,
      "question": "How do you expose custom actuator endpoints?",
      "options": [
        "Implement an endpoint class and register it as a bean",
        "Use XML",
        "Use filters only",
        "Use third-party tools only"
      ],
      "answer": "Implement an endpoint class and register it as a bean"
    },
    {
      "id": 23,
      "question": "What is the purpose of spring.main.allow-bean-definition-overriding?",
      "options": [
        "Allows multiple beans of same name",
        "Disables bean registration",
        "Enables scheduling",
        "Manages transactions"
      ],
      "answer": "Allows multiple beans of same name"
    },
    {
      "id": 24,
      "question": "How do you use profiles for multi-environment configuration?",
      "options": [
        "Activate profiles using spring.profiles.active and define profile-specific files",
        "Use only one application.properties",
        "Manually load properties",
        "Use environment variables only"
      ],
      "answer": "Activate profiles using spring.profiles.active and define profile-specific files"
    },
    {
      "id": 25,
      "question": "What is the use of spring-boot-starter-parent in Maven?",
      "options": [
        "Provides default dependency and plugin management",
        "Includes database dependencies",
        "Includes UI components",
        "Manages security only"
      ],
      "answer": "Provides default dependency and plugin management"
    },
    {
      "id": 26,
      "question": "How does Spring Boot handle logging configuration?",
      "options": [
        "Uses Logback by default and can be customized via properties or logback.xml",
        "Uses Log4j only",
        "No logging support",
        "Uses System.out only"
      ],
      "answer": "Uses Logback by default and can be customized via properties or logback.xml"
    },
    {
      "id": 27,
      "question": "How to configure custom converters for request parameters?",
      "options": [
        "Implement Converter interface and register as bean",
        "Use annotations only",
        "Use filters only",
        "Use XML only"
      ],
      "answer": "Implement Converter interface and register as bean"
    },
    {
      "id": 28,
      "question": "What is the purpose of the @EnableTransactionManagement annotation?",
      "options": [
        "Enables Spring's annotation-driven transaction management",
        "Enables security",
        "Enables scheduling",
        "Enables caching"
      ],
      "answer": "Enables Spring's annotation-driven transaction management"
    },
    {
      "id": 29,
      "question": "How do you configure multipart file uploads in Spring Boot?",
      "options": [
        "Set spring.servlet.multipart.* properties in application.properties",
        "Use external libraries only",
        "Use filters only",
        "No support"
      ],
      "answer": "Set spring.servlet.multipart.* properties in application.properties"
    },
    {
      "id": 30,
      "question": "What is the difference between @Bean and @Component?",
      "options": [
        "@Bean defines method-based beans; @Component is class level and scanned automatically",
        "They are the same",
        "@Bean is deprecated",
        "@Component only for tests"
      ],
      "answer": "@Bean defines method-based beans; @Component is class level and scanned automatically"
    }
  ]
},{
  "id": "t5",
  "name": "Spring Boot Expert",
  "duration": 60,
  "questions": [
    {
      "id": 1,
      "question": "How does Spring Boot handle circular dependencies in bean injection?",
      "options": [
        "Throws BeanCurrentlyInCreationException unless using setter injection or @Lazy",
        "Automatically resolves all circular dependencies",
        "Ignores circular dependencies",
        "Fails silently"
      ],
      "answer": "Throws BeanCurrentlyInCreationException unless using setter injection or @Lazy"
    },
    {
      "id": 2,
      "question": "Explain the use of @Conditional annotations in Spring Boot.",
      "options": [
        "They conditionally enable bean registration based on environment, classpath, property, etc.",
        "They configure transactions",
        "They handle exceptions",
        "They schedule tasks"
      ],
      "answer": "They conditionally enable bean registration based on environment, classpath, property, etc."
    },
    {
      "id": 3,
      "question": "How can you implement custom starter modules in Spring Boot?",
      "options": [
        "Create a Spring Boot starter project with proper dependencies and spring.factories",
        "Use @Component only",
        "Use XML only",
        "Use Maven plugins only"
      ],
      "answer": "Create a Spring Boot starter project with proper dependencies and spring.factories"
    },
    {
      "id": 4,
      "question": "What are the challenges of using @Transactional on private methods?",
      "options": [
        "Spring AOP proxies do not apply to private methods, so transactions won’t work",
        "They work fine",
        "They cause compilation errors",
        "They enable better performance"
      ],
      "answer": "Spring AOP proxies do not apply to private methods, so transactions won’t work"
    },
    {
      "id": 5,
      "question": "How do you implement distributed tracing with Spring Boot and Sleuth?",
      "options": [
        "Add Sleuth dependency; it auto-instruments and sends trace info to Zipkin or other systems",
        "Manually add trace logs",
        "Use filters only",
        "Use Actuator only"
      ],
      "answer": "Add Sleuth dependency; it auto-instruments and sends trace info to Zipkin or other systems"
    },
    {
      "id": 6,
      "question": "How do you implement OAuth2 login in Spring Boot?",
      "options": [
        "Use spring-boot-starter-oauth2-client and configure client registration",
        "Use @OAuth2Login only",
        "Use filters only",
        "Manually write OAuth code"
      ],
      "answer": "Use spring-boot-starter-oauth2-client and configure client registration"
    },
    {
      "id": 7,
      "question": "Explain reactive transaction management in Spring Boot.",
      "options": [
        "Supported with reactive databases using R2DBC and transactional operators",
        "Same as imperative transactions",
        "Not supported",
        "Requires XML"
      ],
      "answer": "Supported with reactive databases using R2DBC and transactional operators"
    },
    {
      "id": 8,
      "question": "How does Spring Boot optimize startup time?",
      "options": [
        "Lazy initialization, auto-configuration optimization, classpath scanning improvements",
        "Manual optimizations only",
        "No optimizations",
        "By reducing dependencies only"
      ],
      "answer": "Lazy initialization, auto-configuration optimization, classpath scanning improvements"
    },
    {
      "id": 9,
      "question": "What is the use of @Import annotation in Spring Boot?",
      "options": [
        "Imports additional configuration classes or beans",
        "Imports dependencies",
        "Imports XML",
        "Imports properties"
      ],
      "answer": "Imports additional configuration classes or beans"
    },
    {
      "id": 10,
      "question": "How do you create a custom actuator endpoint?",
      "options": [
        "Implement Endpoint interface or extend AbstractEndpoint and register as bean",
        "Use @Endpoint only",
        "Use filters",
        "Use third-party plugins"
      ],
      "answer": "Implement Endpoint interface or extend AbstractEndpoint and register as bean"
    },
    {
      "id": 11,
      "question": "How can you secure actuator endpoints?",
      "options": [
        "Configure Spring Security to protect actuator endpoints with roles",
        "They are open by default",
        "Disable security",
        "Use external firewalls only"
      ],
      "answer": "Configure Spring Security to protect actuator endpoints with roles"
    },
    {
      "id": 12,
      "question": "Explain the difference between @Transactional propagation levels.",
      "options": [
        "Defines how transactions behave when calling other transactional methods (REQUIRED, REQUIRES_NEW, etc.)",
        "Defines security levels",
        "Defines logging levels",
        "Defines thread priorities"
      ],
      "answer": "Defines how transactions behave when calling other transactional methods (REQUIRED, REQUIRES_NEW, etc.)"
    },
    {
      "id": 13,
      "question": "How to implement multi-tenancy in Spring Boot?",
      "options": [
        "Use Hibernate multi-tenancy support and configure data sources dynamically",
        "Use XML only",
        "Use filters only",
        "No support"
      ],
      "answer": "Use Hibernate multi-tenancy support and configure data sources dynamically"
    },
    {
      "id": 14,
      "question": "How do you create custom exception handling globally?",
      "options": [
        "Use @ControllerAdvice and @ExceptionHandler with custom logic",
        "Use try-catch everywhere",
        "Use filters only",
        "Use XML only"
      ],
      "answer": "Use @ControllerAdvice and @ExceptionHandler with custom logic"
    },
    {
      "id": 15,
      "question": "What is Spring Boot's support for GraphQL?",
      "options": [
        "Supports GraphQL via starter dependencies and schema configuration",
        "No support",
        "Only REST",
        "Manual implementation only"
      ],
      "answer": "Supports GraphQL via starter dependencies and schema configuration"
    },
    {
      "id": 16,
      "question": "Explain the use of Spring Boot’s conditional annotations.",
      "options": [
        "Control bean registration based on presence of classes, beans, properties, OS, etc.",
        "Control logging",
        "Control scheduling",
        "Control security"
      ],
      "answer": "Control bean registration based on presence of classes, beans, properties, OS, etc."
    },
    {
      "id": 17,
      "question": "How to profile Spring Boot application startup?",
      "options": [
        "Use --debug flag or enable startup tracing logs",
        "Use external profilers only",
        "Use JVisualVM only",
        "No profiling"
      ],
      "answer": "Use --debug flag or enable startup tracing logs"
    },
    {
      "id": 18,
      "question": "How do you implement session management in Spring Boot?",
      "options": [
        "Use Spring Session to support clustered sessions with Redis or JDBC",
        "Use cookies only",
        "Use filters only",
        "Manual coding only"
      ],
      "answer": "Use Spring Session to support clustered sessions with Redis or JDBC"
    },
    {
      "id": 19,
      "question": "What is the role of ApplicationContext in Spring Boot?",
      "options": [
        "Manages beans and dependency injection lifecycle",
        "Manages HTTP requests only",
        "Manages database only",
        "Manages logging"
      ],
      "answer": "Manages beans and dependency injection lifecycle"
    },
    {
      "id": 20,
      "question": "How do you test components with MockMvc?",
      "options": [
        "Use MockMvc to simulate HTTP requests in unit/integration tests",
        "Use @WebMvcTest only",
        "Use Selenium only",
        "Use Postman only"
      ],
      "answer": "Use MockMvc to simulate HTTP requests in unit/integration tests"
    },
    {
      "id": 21,
      "question": "How do you enable detailed SQL logging with Hibernate?",
      "options": [
        "Set spring.jpa.show-sql=true and configure logging.level.org.hibernate.SQL=DEBUG",
        "Use JDBC driver options only",
        "Use filters only",
        "No support"
      ],
      "answer": "Set spring.jpa.show-sql=true and configure logging.level.org.hibernate.SQL=DEBUG"
    },
    {
      "id": 22,
      "question": "What is the difference between bean scopes 'singleton' and 'prototype'?",
      "options": [
        "Singleton creates one instance per container; prototype creates a new instance on each request",
        "They are the same",
        "Prototype is deprecated",
        "Singleton is thread-local"
      ],
      "answer": "Singleton creates one instance per container; prototype creates a new instance on each request"
    },
    {
      "id": 23,
      "question": "Explain Spring Boot's conditional bean registration using @ConditionalOnMissingBean.",
      "options": [
        "Registers a bean only if no other bean of the same type/name exists",
        "Always registers bean",
        "Disables bean",
        "Overrides existing bean"
      ],
      "answer": "Registers a bean only if no other bean of the same type/name exists"
    },
    {
      "id": 24,
      "question": "How to create a custom property editor in Spring Boot?",
      "options": [
        "Extend PropertyEditorSupport and register with WebDataBinder",
        "Use annotations only",
        "Use XML only",
        "No support"
      ],
      "answer": "Extend PropertyEditorSupport and register with WebDataBinder"
    },
    {
      "id": 25,
      "question": "How can you create a reactive REST endpoint in Spring Boot?",
      "options": [
        "Return Mono or Flux types from controller methods",
        "Return ResponseEntity only",
        "Use Servlet API only",
        "No reactive support"
      ],
      "answer": "Return Mono or Flux types from controller methods"
    },
    {
      "id": 26,
      "question": "Explain the difference between @ComponentScan and @EntityScan.",
      "options": [
        "@ComponentScan scans for Spring components; @EntityScan scans for JPA entities",
        "They do the same",
        "@EntityScan is deprecated",
        "Both scan only controllers"
      ],
      "answer": "@ComponentScan scans for Spring components; @EntityScan scans for JPA entities"
    },
    {
      "id": 27,
      "question": "What is the use of spring-boot-maven-plugin?",
      "options": [
        "Provides packaging and running of Spring Boot apps",
        "Manages database migrations",
        "Provides logging",
        "Manages security"
      ],
      "answer": "Provides packaging and running of Spring Boot apps"
    },
    {
      "id": 28,
      "question": "How do you override default error handling in Spring Boot?",
      "options": [
        "Implement ErrorController and override methods",
        "Use filters only",
        "Use try-catch everywhere",
        "Use annotations only"
      ],
      "answer": "Implement ErrorController and override methods"
    },
    {
      "id": 29,
      "question": "What is the use of @Order annotation?",
      "options": [
        "Specifies the order of bean loading or filter execution",
        "Manages logging",
        "Manages transactions",
        "Manages scheduling"
      ],
      "answer": "Specifies the order of bean loading or filter execution"
    },
    {
      "id": 30,
      "question": "How does Spring Boot support microservices architecture?",
      "options": [
        "With Spring Cloud projects for config, discovery, circuit breakers, gateways",
        "No support",
        "Only monolithic",
        "Only serverless"
      ],
      "answer": "With Spring Cloud projects for config, discovery, circuit breakers, gateways"
    }
  ]
},
{
  "id": "springboot_coding",
  "name": "SpringBoot Coding",
  "duration": 60,
  "questions": [
    {
      "id": 1,
      "question": "Which annotation is used to define a Spring Boot REST controller?",
      "options": [
        "@RestController",
        "@Controller",
        "@Service",
        "@Component"
      ],
      "answer": "@RestController"
    },
    {
      "id": 2,
      "question": "How do you map a GET request to a method in Spring Boot?",
      "options": [
        "@GetMapping",
        "@PostMapping",
        "@RequestMapping(method = POST)",
        "@PutMapping"
      ],
      "answer": "@GetMapping"
    },
    {
      "id": 3,
      "question": "Which annotation is used to inject a repository bean in a service class?",
      "options": [
        "@Autowired",
        "@Inject",
        "@Resource",
        "@Service"
      ],
      "answer": "@Autowired"
    },
    {
      "id": 4,
      "question": "How do you define a JPA entity class?",
      "options": [
        "Use @Entity on the class and @Id on the primary key field",
        "Use @Table only",
        "Use @Repository",
        "Use @Service"
      ],
      "answer": "Use @Entity on the class and @Id on the primary key field"
    },
    {
      "id": 5,
      "question": "How do you define a Spring Boot application main class?",
      "options": [
        "Annotate the class with @SpringBootApplication and call SpringApplication.run() in main()",
        "Use @Component",
        "Use @Configuration only",
        "Use @Controller"
      ],
      "answer": "Annotate the class with @SpringBootApplication and call SpringApplication.run() in main()"
    },
    {
      "id": 6,
      "question": "How can you handle exceptions globally in Spring Boot?",
      "options": [
        "Using @ControllerAdvice with @ExceptionHandler methods",
        "Using try-catch in every method",
        "Using filters only",
        "Using @Service only"
      ],
      "answer": "Using @ControllerAdvice with @ExceptionHandler methods"
    },
    {
      "id": 7,
      "question": "Which interface is used to implement pagination in Spring Data JPA?",
      "options": [
        "PagingAndSortingRepository",
        "JpaRepository",
        "CrudRepository",
        "Repository"
      ],
      "answer": "PagingAndSortingRepository"
    },
    {
      "id": 8,
      "question": "What is the default database used by Spring Boot if no datasource is configured?",
      "options": [
        "H2 in-memory database",
        "MySQL",
        "PostgreSQL",
        "MongoDB"
      ],
      "answer": "H2 in-memory database"
    },
    {
      "id": 9,
      "question": "How do you enable scheduling in a Spring Boot application?",
      "options": [
        "Use @EnableScheduling on a configuration class",
        "Use @Scheduled on main class",
        "Use @Async",
        "Use @ComponentScan"
      ],
      "answer": "Use @EnableScheduling on a configuration class"
    },
    {
      "id": 10,
      "question": "How to define a scheduled task that runs every 5 seconds?",
      "options": [
        "@Scheduled(fixedRate = 5000)",
        "@Scheduled(cron = '*/5 * * * * *')",
        "Both of the above",
        "None of the above"
      ],
      "answer": "Both of the above"
    },
    {
      "id": 11,
      "question": "How to create a custom property in application.properties and bind it to a class?",
      "options": [
        "Use @ConfigurationProperties and annotate the class with @Component",
        "Use @Value only",
        "Use @Autowired only",
        "Use @ComponentScan"
      ],
      "answer": "Use @ConfigurationProperties and annotate the class with @Component"
    },
    {
      "id": 12,
      "question": "How can you create a REST endpoint to accept JSON input?",
      "options": [
        "Use @RequestBody annotation on the method parameter",
        "Use @PathVariable",
        "Use @RequestParam",
        "Use @ResponseBody only"
      ],
      "answer": "Use @RequestBody annotation on the method parameter"
    },
    {
      "id": 13,
      "question": "What is the use of @SpringBootTest annotation?",
      "options": [
        "For integration testing of Spring Boot applications",
        "For unit testing only",
        "For controller testing only",
        "For database testing only"
      ],
      "answer": "For integration testing of Spring Boot applications"
    },
    {
      "id": 14,
      "question": "How to implement caching in Spring Boot?",
      "options": [
        "Enable caching with @EnableCaching and use @Cacheable on methods",
        "Use @Cache annotation",
        "Use manual caching only",
        "Use filters"
      ],
      "answer": "Enable caching with @EnableCaching and use @Cacheable on methods"
    },
    {
      "id": 15,
      "question": "Which starter is used for security in Spring Boot?",
      "options": [
        "spring-boot-starter-security",
        "spring-boot-starter-web",
        "spring-boot-starter-data-jpa",
        "spring-boot-starter-actuator"
      ],
      "answer": "spring-boot-starter-security"
    },
    {
      "id": 16,
      "question": "How do you define a bean in Spring Boot using Java configuration?",
      "options": [
        "Use @Bean annotation inside a @Configuration class",
        "Use @Component only",
        "Use XML configuration only",
        "Use @Service only"
      ],
      "answer": "Use @Bean annotation inside a @Configuration class"
    },
    {
      "id": 17,
      "question": "Which annotation is used to map a POST request?",
      "options": [
        "@PostMapping",
        "@GetMapping",
        "@RequestMapping(method = GET)",
        "@DeleteMapping"
      ],
      "answer": "@PostMapping"
    },
    {
      "id": 18,
      "question": "How do you inject values from application.properties?",
      "options": [
        "Using @Value annotation",
        "Using @Autowired only",
        "Using @Component",
        "Using @RequestParam"
      ],
      "answer": "Using @Value annotation"
    },
    {
      "id": 19,
      "question": "How to enable CORS in a Spring Boot REST controller?",
      "options": [
        "Use @CrossOrigin annotation on the controller or method",
        "Use filters only",
        "Use @Controller only",
        "Use @RestController only"
      ],
      "answer": "Use @CrossOrigin annotation on the controller or method"
    },
    {
      "id": 20,
      "question": "How to access path variables in Spring Boot controller?",
      "options": [
        "Use @PathVariable annotation",
        "Use @RequestParam",
        "Use @RequestBody",
        "Use @ResponseBody"
      ],
      "answer": "Use @PathVariable annotation"
    },
    {
      "id": 21,
      "question": "What annotation is used to mark a service layer class?",
      "options": [
        "@Service",
        "@Component",
        "@Repository",
        "@Controller"
      ],
      "answer": "@Service"
    },
    {
      "id": 22,
      "question": "How do you perform database transactions in Spring Boot?",
      "options": [
        "Use @Transactional annotation",
        "Use @Service only",
        "Use filters only",
        "Use XML only"
      ],
      "answer": "Use @Transactional annotation"
    },
    {
      "id": 23,
      "question": "How to configure datasource in Spring Boot?",
      "options": [
        "Set properties spring.datasource.url, username, password in application.properties",
        "Use XML only",
        "Use @Bean only",
        "Use filters only"
      ],
      "answer": "Set properties spring.datasource.url, username, password in application.properties"
    },
    {
      "id": 24,
      "question": "What is the default embedded server in Spring Boot web applications?",
      "options": [
        "Tomcat",
        "Jetty",
        "Undertow",
        "Netty"
      ],
      "answer": "Tomcat"
    },
    {
      "id": 25,
      "question": "How do you expose REST endpoints with Spring Boot?",
      "options": [
        "Using @RestController and mapping annotations like @GetMapping",
        "Using @Controller only",
        "Using @Service only",
        "Using filters only"
      ],
      "answer": "Using @RestController and mapping annotations like @GetMapping"
    },
    {
      "id": 26,
      "question": "Which annotation disables Spring Boot's auto-configuration?",
      "options": [
        "@EnableAutoConfiguration(exclude = ...)",
        "@SpringBootApplication",
        "@ComponentScan",
        "@Configuration"
      ],
      "answer": "@EnableAutoConfiguration(exclude = ...)"
    },
    {
      "id": 27,
      "question": "How to customize error responses in Spring Boot REST API?",
      "options": [
        "Use @ControllerAdvice with @ExceptionHandler methods",
        "Use filters only",
        "Use try-catch everywhere",
        "Use @Service only"
      ],
      "answer": "Use @ControllerAdvice with @ExceptionHandler methods"
    },
    {
      "id": 28,
      "question": "Which annotation marks a repository interface for Spring Data JPA?",
      "options": [
        "@Repository",
        "@Service",
        "@Component",
        "@Controller"
      ],
      "answer": "@Repository"
    },
    {
      "id": 29,
      "question": "How to send a redirect response from a Spring Boot controller?",
      "options": [
        "Return \"redirect:/url\" from the controller method",
        "Use HttpServletResponse.sendRedirect() only",
        "Use filters only",
        "Use @ResponseBody only"
      ],
      "answer": "Return \"redirect:/url\" from the controller method"
    },
    {
      "id": 30,
      "question": "How do you access query parameters in Spring Boot controllers?",
      "options": [
        "Use @RequestParam annotation",
        "Use @PathVariable",
        "Use @RequestBody",
        "Use @ResponseBody"
      ],
      "answer": "Use @RequestParam annotation"
    }
  ]
},
{
  "id": "springboot_advanced_coding",
  "name": "SpringBoot Coding II",
  "duration": 60,
  "questions": [
    {
      "id": 1,
      "question": "How do you implement asynchronous methods in Spring Boot?",
      "options": [
        "Use @Async annotation on the method and enable with @EnableAsync",
        "Use @Scheduled annotation",
        "Use @Transactional annotation",
        "Use CompletableFuture manually only"
      ],
      "answer": "Use @Async annotation on the method and enable with @EnableAsync"
    },
    {
      "id": 2,
      "question": "How do you create a custom annotation in Spring Boot?",
      "options": [
        "Define an annotation with @Retention and @Target, then use Spring AOP to process it",
        "Use @Component annotation only",
        "Use XML configuration only",
        "Use @Service only"
      ],
      "answer": "Define an annotation with @Retention and @Target, then use Spring AOP to process it"
    },
    {
      "id": 3,
      "question": "Which interface should you implement to create a custom Spring Boot starter?",
      "options": [
        "No interface, create an auto-config module with @Configuration and spring.factories file",
        "ApplicationRunner",
        "CommandLineRunner",
        "BeanPostProcessor"
      ],
      "answer": "No interface, create an auto-config module with @Configuration and spring.factories file"
    },
    {
      "id": 4,
      "question": "How do you implement a custom filter in Spring Boot security chain?",
      "options": [
        "Extend OncePerRequestFilter and register it in the security configuration",
        "Use @Filter annotation only",
        "Use @Component only",
        "Use @Service only"
      ],
      "answer": "Extend OncePerRequestFilter and register it in the security configuration"
    },
    {
      "id": 5,
      "question": "How can you customize Spring Boot Actuator endpoints?",
      "options": [
        "Configure properties in application.properties and create custom @Endpoint beans",
        "Use @RestController only",
        "Use @Service only",
        "Use @ControllerAdvice only"
      ],
      "answer": "Configure properties in application.properties and create custom @Endpoint beans"
    },
    {
      "id": 6,
      "question": "What is the purpose of ApplicationContextInitializer?",
      "options": [
        "To customize the ApplicationContext before it is refreshed",
        "To run code after context initialization",
        "To define beans",
        "To manage transactions"
      ],
      "answer": "To customize the ApplicationContext before it is refreshed"
    },
    {
      "id": 7,
      "question": "How do you handle multi-tenancy in Spring Boot with JPA?",
      "options": [
        "Use Hibernate multi-tenancy support and implement CurrentTenantIdentifierResolver",
        "Use different databases without configuration",
        "Use @Primary only",
        "Use multiple DataSources without routing"
      ],
      "answer": "Use Hibernate multi-tenancy support and implement CurrentTenantIdentifierResolver"
    },
    {
      "id": 8,
      "question": "How do you implement a reactive REST API with Spring Boot?",
      "options": [
        "Use Spring WebFlux with Mono and Flux types",
        "Use standard Spring MVC controllers",
        "Use @RestController with CompletableFuture only",
        "Use Servlets directly"
      ],
      "answer": "Use Spring WebFlux with Mono and Flux types"
    },
    {
      "id": 9,
      "question": "Which Spring Boot feature supports configuration profiles for different environments?",
      "options": [
        "Spring Profiles using @Profile annotation and application-{profile}.properties",
        "@Conditional only",
        "@Autowired only",
        "@ComponentScan only"
      ],
      "answer": "Spring Profiles using @Profile annotation and application-{profile}.properties"
    },
    {
      "id": 10,
      "question": "How can you implement event-driven architecture in Spring Boot?",
      "options": [
        "Use ApplicationEventPublisher and @EventListener annotations",
        "Use @Service only",
        "Use @Controller only",
        "Use @Repository only"
      ],
      "answer": "Use ApplicationEventPublisher and @EventListener annotations"
    },
    {
      "id": 11,
      "question": "What is the purpose of BeanPostProcessor interface?",
      "options": [
        "To modify new bean instances after their initialization",
        "To create beans",
        "To destroy beans",
        "To register beans"
      ],
      "answer": "To modify new bean instances after their initialization"
    },
    {
      "id": 12,
      "question": "How do you create a custom health check for Spring Boot Actuator?",
      "options": [
        "Implement HealthIndicator interface and register it as a bean",
        "Use @HealthCheck annotation",
        "Use @Service only",
        "Use @Component only"
      ],
      "answer": "Implement HealthIndicator interface and register it as a bean"
    },
    {
      "id": 13,
      "question": "How to externalize sensitive configuration like passwords in Spring Boot?",
      "options": [
        "Use Spring Cloud Config or encrypted properties",
        "Use plain application.properties only",
        "Use environment variables only",
        "Use XML only"
      ],
      "answer": "Use Spring Cloud Config or encrypted properties"
    },
    {
      "id": 14,
      "question": "How do you implement retry logic in Spring Boot?",
      "options": [
        "Use @Retryable annotation with Spring Retry library",
        "Use try-catch only",
        "Use filters only",
        "Use AOP only"
      ],
      "answer": "Use @Retryable annotation with Spring Retry library"
    },
    {
      "id": 15,
      "question": "What is the difference between CommandLineRunner and ApplicationRunner?",
      "options": [
        "ApplicationRunner provides ApplicationArguments for parsing, CommandLineRunner provides raw args",
        "They are the same",
        "CommandLineRunner runs only after ApplicationRunner",
        "ApplicationRunner is deprecated"
      ],
      "answer": "ApplicationRunner provides ApplicationArguments for parsing, CommandLineRunner provides raw args"
    },
    {
      "id": 16,
      "question": "How do you create a custom starter for Spring Boot?",
      "options": [
        "Create a separate module with auto-configuration and spring.factories file",
        "Use @ComponentScan only",
        "Use @Configuration only",
        "Use XML only"
      ],
      "answer": "Create a separate module with auto-configuration and spring.factories file"
    },
    {
      "id": 17,
      "question": "Which annotation would you use to conditionally load a bean based on a property value?",
      "options": [
        "@ConditionalOnProperty",
        "@Profile",
        "@Conditional",
        "@Component"
      ],
      "answer": "@ConditionalOnProperty"
    },
    {
      "id": 18,
      "question": "How do you configure Spring Boot to use multiple data sources?",
      "options": [
        "Define multiple DataSource beans and configure routing if needed",
        "Use one DataSource only",
        "Use @Repository only",
        "Use @Service only"
      ],
      "answer": "Define multiple DataSource beans and configure routing if needed"
    },
    {
      "id": 19,
      "question": "How to customize Jackson serialization in Spring Boot?",
      "options": [
        "Configure ObjectMapper with modules or custom serializers",
        "Use @JsonSerialize only",
        "Use Gson only",
        "Use @Controller only"
      ],
      "answer": "Configure ObjectMapper with modules or custom serializers"
    },
    {
      "id": 20,
      "question": "How to implement OAuth2 login in Spring Boot?",
      "options": [
        "Use spring-boot-starter-oauth2-client and configure security settings",
        "Use spring-boot-starter-security only",
        "Use @Controller only",
        "Use @Service only"
      ],
      "answer": "Use spring-boot-starter-oauth2-client and configure security settings"
    },
    {
      "id": 21,
      "question": "How can you expose metrics in Spring Boot?",
      "options": [
        "Use Spring Boot Actuator with Micrometer",
        "Use logging only",
        "Use @Service only",
        "Use filters only"
      ],
      "answer": "Use Spring Boot Actuator with Micrometer"
    },
    {
      "id": 22,
      "question": "How to handle transactions programmatically in Spring Boot?",
      "options": [
        "Use PlatformTransactionManager and TransactionTemplate",
        "Use @Transactional only",
        "Use try-catch only",
        "Use AOP only"
      ],
      "answer": "Use PlatformTransactionManager and TransactionTemplate"
    },
    {
      "id": 23,
      "question": "What is the purpose of Spring Boot DevTools?",
      "options": [
        "Enable hot reload and development-time features",
        "Manage transactions",
        "Handle security",
        "Manage database"
      ],
      "answer": "Enable hot reload and development-time features"
    },
    {
      "id": 24,
      "question": "How to secure REST APIs with JWT in Spring Boot?",
      "options": [
        "Use custom filters for JWT validation and configure Spring Security",
        "Use OAuth2 only",
        "Use basic auth only",
        "Use @Service only"
      ],
      "answer": "Use custom filters for JWT validation and configure Spring Security"
    },
    {
      "id": 25,
      "question": "How do you implement WebSocket communication in Spring Boot?",
      "options": [
        "Use spring-websocket module and configure WebSocket endpoints",
        "Use REST controllers only",
        "Use @Service only",
        "Use JMS only"
      ],
      "answer": "Use spring-websocket module and configure WebSocket endpoints"
    },
    {
      "id": 26,
      "question": "How to implement database migrations in Spring Boot?",
      "options": [
        "Use Flyway or Liquibase integrations",
        "Use manual SQL scripts only",
        "Use @Transactional only",
        "Use @Service only"
      ],
      "answer": "Use Flyway or Liquibase integrations"
    },
    {
      "id": 27,
      "question": "How to add custom headers to all HTTP responses in Spring Boot?",
      "options": [
        "Implement a Filter or use ResponseBodyAdvice",
        "Use @ControllerAdvice only",
        "Use @RestController only",
        "Use @Service only"
      ],
      "answer": "Implement a Filter or use ResponseBodyAdvice"
    },
    {
      "id": 28,
      "question": "How do you create a reactive repository in Spring Boot?",
      "options": [
        "Extend ReactiveCrudRepository interface",
        "Extend JpaRepository only",
        "Use @Repository only",
        "Use @Service only"
      ],
      "answer": "Extend ReactiveCrudRepository interface"
    },
    {
      "id": 29,
      "question": "What is the use of CommandLineRunner in Spring Boot?",
      "options": [
        "Run specific code after application startup",
        "Define REST endpoints",
        "Configure database",
        "Manage transactions"
      ],
      "answer": "Run specific code after application startup"
    },
    {
      "id": 30,
      "question": "How to customize the embedded Tomcat server in Spring Boot?",
      "options": [
        "Implement WebServerFactoryCustomizer<ConfigurableTomcatWebServerFactory>",
        "Use @Component only",
        "Use @Service only",
        "Use filters only"
      ],
      "answer": "Implement WebServerFactoryCustomizer<ConfigurableTomcatWebServerFactory>"
    }
  ]
}






    ]

  }

]
